
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/new_sail.ys' --

1. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/RAM.v
Parsing Verilog input from `verilog/RAM.v' to AST representation.
Generating RTLIL representation for module `\RAM'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\dsp_adder'.
Generating RTLIL representation for module `\dsp_subtractor'.
Generating RTLIL representation for module `\dsp_addsub'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\full_adder'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/clk_div2.v
Parsing Verilog input from `verilog/clk_div2.v' to AST representation.
Generating RTLIL representation for module `\clk_div2'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/clk_div3.v
Parsing Verilog input from `verilog/clk_div3.v' to AST representation.
Generating RTLIL representation for module `\clk_div3'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/dsp_adder.v
Parsing Verilog input from `verilog/dsp_adder.v' to AST representation.
Generating RTLIL representation for module `\adder_dsp'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Warning: wire '\clk' is assigned in a block at toplevel.v:92.3-92.14.
Successfully finished Verilog frontend.

23. Executing HIERARCHY pass (managing design hierarchy).

23.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Parameter 1 (\WIDTH) = 9

23.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=9'.
Parameter 1 (\WIDTH) = 11

23.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 11
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=11'.

23.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter

23.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Removing unused module `\clk_div3'.
Removing unused module `\clk_div2'.
Removing unused module `\adder'.
Removing unused module `\dsp_addsub'.
Removing unused module `\dsp_subtractor'.
Removing unused module `\RAM'.
Removing unused module `\csr_file'.
Removed 7 unused modules.
Warning: Resizing cell port cpu.mem_wb_reg.data_out from 85 bits to 117 bits.
Warning: Resizing cell port cpu.mem_wb_reg.data_in from 85 bits to 117 bits.
Warning: Resizing cell port cpu.ex_mem_reg.data_out from 121 bits to 155 bits.
Warning: Resizing cell port cpu.ex_mem_reg.data_in from 121 bits to 155 bits.

24. Executing PROC pass (convert processes to netlists).

24.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$301'.
Removing empty process `regfile.$proc$verilog/register_file.v:0$336'.
Cleaned up 0 empty switches.

24.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$295 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$259 in module data_mem.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$86 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$86 in module ALUControl.
Removed a total of 5 dead cases.

24.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 30 assignments to connections.

24.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$306'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$304'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$296'.
  Set init value: \imm = 0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$274'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$273'.
  Set init value: \state = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$112'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$87'.
  Set init value: \ALUCtl = 7'0000000
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$312'.
  Set init value: \outAddr = 0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$310'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$308'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

24.5. Executing PROC_ARST pass (detect async resets in processes).

24.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$306'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$305'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$304'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$303'.
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem.v:68$297'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$296'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
     1/1: $1\imm[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$274'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$273'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$259'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$190_EN[31:0]$262
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$190_DATA[31:0]$261
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$190_ADDR[31:0]$260
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$255'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$112'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:63$97'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:54$96'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$87'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$86'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]
Creating decoders for process `\top.$proc$toplevel.v:57$342'.
Creating decoders for process `\top.$proc$toplevel.v:56$341'.
Creating decoders for process `\top.$proc$toplevel.v:91$337'.
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$315'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$314_EN[31:0]$318
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$314_DATA[31:0]$317
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$314_ADDR[4:0]$316
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$312'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$311'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$310'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$309'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$308'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$307'.

24.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$86'.
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:57$342'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:56$341'.

24.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$305'.
  created $dff cell `$procdff$546' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$303'.
  created $dff cell `$procdff$547' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem.v:68$297'.
  created $dff cell `$procdff$548' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$549' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$550' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$551' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$552' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$553' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$554' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$555' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$556' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$557' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$190_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$558' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$190_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$559' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$190_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$259'.
  created $dff cell `$procdff$560' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$255'.
  created $dff cell `$procdff$561' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:63$97'.
  created $dff cell `$procdff$562' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:54$96'.
  created $dff cell `$procdff$563' with negative edge clock.
Creating register for signal `\top.\clk' using process `\top.$proc$toplevel.v:91$337'.
  created $dff cell `$procdff$564' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$565' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$566' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$567' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$568' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$569' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$570' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$571' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$314_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$572' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$314_DATA' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$573' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$314_EN' using process `\regfile.$proc$verilog/register_file.v:95$315'.
  created $dff cell `$procdff$574' with positive edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$311'.
  created $dff cell `$procdff$575' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$309'.
  created $dff cell `$procdff$576' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$307'.
  created $dff cell `$procdff$577' with positive edge clock.

24.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$306'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$305'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$304'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$303'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:68$297'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$296'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$295'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$274'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$273'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$259'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$259'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$255'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$255'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$112'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:63$97'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:63$97'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:54$96'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$87'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$86'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$86'.
Removing empty process `top.$proc$toplevel.v:57$342'.
Removing empty process `top.$proc$toplevel.v:56$341'.
Removing empty process `top.$proc$toplevel.v:91$337'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$315'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$315'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$312'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$311'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$310'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$309'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$308'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$307'.
Cleaned up 18 empty switches.

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module mux2to1.
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module imm_gen.
Optimizing module ForwardingUnit.
<suppressed ~4 debug messages>
Optimizing module adder_dsp.
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module sign_mask_gen.
Optimizing module cpu.
Optimizing module control.
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module branch_predictor.
Optimizing module branch_decision.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module full_adder.
Optimizing module top.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module program_counter.
Optimizing module dsp_adder.
Optimizing module mem_wb.
Optimizing module ex_mem.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\alu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\top'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\ex_mem'.
Removed a total of 90 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$473.
    dead port 2/2 on $mux $procmux$512.
    dead port 2/2 on $mux $procmux$471.
    dead port 2/2 on $mux $procmux$463.
    dead port 2/2 on $mux $procmux$498.
    dead port 2/2 on $mux $procmux$450.
    dead port 2/2 on $mux $procmux$448.
    dead port 2/2 on $mux $procmux$528.
    dead port 2/2 on $mux $procmux$434.
    dead port 2/2 on $mux $procmux$487.
    dead port 2/2 on $mux $procmux$432.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 12 multiplexer ports.
<suppressed ~44 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$348: { $procmux$354_CMP $procmux$353_CMP $auto$opt_reduce.cc:134:opt_mux$579 $procmux$350_CMP $procmux$349_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$355:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$355_Y
      New ports: A=1'0, B=1'1, Y=$procmux$355_Y [0]
      New connections: $procmux$355_Y [31:1] = { $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] $procmux$355_Y [0] }
    New ctrl vector for $pmux cell $procmux$390: { $procmux$401_CMP $procmux$398_CMP $auto$opt_reduce.cc:134:opt_mux$581 }
    New ctrl vector for $pmux cell $procmux$402: { $procmux$401_CMP $auto$opt_reduce.cc:134:opt_mux$583 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \cpu.
  Optimizing cells in module \control.
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$506: $auto$opt_reduce.cc:134:opt_mux$585
    New ctrl vector for $pmux cell $procmux$454: { $procmux$527_CMP $procmux$526_CMP $auto$opt_reduce.cc:134:opt_mux$587 $procmux$525_CMP $procmux$524_CMP $procmux$523_CMP $procmux$522_CMP }
    New ctrl vector for $pmux cell $procmux$531: { $auto$opt_reduce.cc:134:opt_mux$589 $procmux$537_CMP $procmux$536_CMP $procmux$535_CMP $procmux$534_CMP $procmux$533_CMP $procmux$532_CMP }
    New ctrl vector for $pmux cell $procmux$478: { $procmux$527_CMP $auto$opt_reduce.cc:134:opt_mux$591 $procmux$525_CMP $procmux$523_CMP $procmux$522_CMP $procmux$526_CMP $procmux$524_CMP }
    New ctrl vector for $pmux cell $procmux$494: $auto$opt_reduce.cc:134:opt_mux$593
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \alu.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \top.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$540:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$540_Y
      New ports: A=1'0, B=1'1, Y=$procmux$540_Y [0]
      New connections: $procmux$540_Y [31:1] = { $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] $procmux$540_Y [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \ex_mem.
Performed a total of 10 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\control'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\alu'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\top'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\ex_mem'.
Removed a total of 3 cells.

25.6. Executing OPT_RMDFF pass (remove dff with constant values).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Removed 0 unused cells and 297 unused wires.
<suppressed ~23 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.13. Executing OPT_RMDFF pass (remove dff with constant values).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Printing statistics.

=== $paramod\mux2to1\WIDTH=11 ===

   Number of wires:                  4
   Number of wire bits:             34
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== $paramod\mux2to1\WIDTH=9 ===

   Number of wires:                  4
   Number of wire bits:             28
   Number of public wires:           4
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== ALUControl ===

   Number of wires:                 35
   Number of wire bits:             98
   Number of public wires:           3
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $eq                            18
     $logic_not                      1
     $mux                            2
     $not                            1
     $pmux                           7
     $reduce_or                      4

=== ForwardingUnit ===

   Number of wires:                 23
   Number of wire bits:             39
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $eq                             4
     $logic_and                      6
     $mux                            4
     $ne                             1
     $reduce_bool                    2

=== adder_dsp ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== alu ===

   Number of wires:                 78
   Number of wire bits:           1262
   Number of public wires:          46
   Number of public wire bits:     610
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $add                            1
     $and                           10
     $eq                            17
     $logic_not                      2
     $logic_or                       1
     $mux                           14
     $not                            5
     $or                            18
     $reduce_bool                    1
     $shl                            1
     $shr                            1
     $sshr                           1
     $xor                            1
     full_adder                      1

=== branch_decision ===

   Number of wires:                 10
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            3
     $logic_not                      2
     $or                             1

=== branch_predictor ===

   Number of wires:                 21
   Number of wire bits:            116
   Number of public wires:          10
   Number of public wire bits:     104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $add                            1
     $and                            6
     $dff                            2
     $logic_not                      1
     $mux                            2
     $or                             4

=== control ===

   Number of wires:                 36
   Number of wire bits:             42
   Number of public wires:          12
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 35
     $and                           23
     $not                            7
     $or                             5

=== cpu ===

   Number of wires:                 73
   Number of wire bits:           1642
   Number of public wires:          69
   Number of public wire bits:    1574
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $or                             4
     $paramod\mux2to1\WIDTH=11       1
     $paramod\mux2to1\WIDTH=9        1
     ALUControl                      1
     ForwardingUnit                  1
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     dsp_adder                       2
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        18
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== data_mem ===

   Number of wires:                 97
   Number of wire bits:           1480
   Number of public wires:          48
   Number of public wire bits:     715
   Number of memories:               1
   Number of memory bits:         8512
   Number of processes:              0
   Number of cells:                 84
     $and                           13
     $dff                           13
     $eq                             4
     $logic_and                      1
     $logic_not                      1
     $logic_or                       1
     $meminit                        1
     $memrd                          1
     $memwr                          1
     $mux                           37
     $not                            4
     $or                             3
     $pmux                           2
     $reduce_or                      1
     $sub                            1

=== dsp_adder ===

   Number of wires:                  4
   Number of wire bits:            128
   Number of public wires:           4
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     adder_dsp                       1

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== full_adder ===

   Number of wires:                  5
   Number of wire bits:            129
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $add                            2

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== imm_gen ===

   Number of wires:                  9
   Number of wire bits:             71
   Number of public wires:           2
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $eq                             6
     $pmux                           1
     $reduce_or                      1

=== instruction_memory ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               1
   Number of memory bits:         8192
   Number of processes:              0
   Number of cells:                  3
     $dff                            1
     $meminit                        1
     $memrd                          1

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== program_counter ===

   Number of wires:                  3
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== regfile ===

   Number of wires:                 32
   Number of wire bits:            436
   Number of public wires:          15
   Number of public wire bits:     225
   Number of memories:               1
   Number of memory bits:         1024
   Number of processes:              0
   Number of cells:                 28
     $and                            4
     $dff                           10
     $eq                             2
     $logic_and                      1
     $meminit                        1
     $memrd                          2
     $memwr                          1
     $mux                            5
     $reduce_bool                    2

=== sign_mask_gen ===

   Number of wires:                  4
   Number of wire bits:              9
   Number of public wires:           2
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            3
     $xor                            1

=== top ===

   Number of wires:                 19
   Number of wire bits:            184
   Number of public wires:          18
   Number of public wire bits:     183
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $dff                            1
     $mux                            2
     $not                            1
     SB_HFOSC                        1
     SB_PLL40_CORE                   1
     cpu                             1
     data_mem                        1
     instruction_memory              1

=== design hierarchy ===

   top                               1
     cpu                             1
       $paramod\mux2to1\WIDTH=11      1
       $paramod\mux2to1\WIDTH=9      1
       ALUControl                    1
       ForwardingUnit                1
       alu                           1
         full_adder                  1
       branch_decision               1
       branch_predictor              1
       control                       1
       dsp_adder                     2
         adder_dsp                   1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      18
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1

   Number of wires:                557
   Number of wire bits:           8970
   Number of public wires:         360
   Number of public wire bits:    7068
   Number of memories:               3
   Number of memory bits:        17728
   Number of processes:              0
   Number of cells:                348
     $add                            4
     $and                           61
     $dff                           32
     $eq                            51
     $logic_and                      8
     $logic_not                      7
     $logic_or                       2
     $meminit                        3
     $memrd                          4
     $memwr                          2
     $mux                           86
     $ne                             1
     $not                           21
     $or                            35
     $pmux                          10
     $reduce_bool                    5
     $reduce_or                      6
     $shl                            1
     $shr                            1
     $sshr                           1
     $sub                            1
     $xor                            2
     SB_HFOSC                        1
     SB_MAC16                        2
     SB_PLL40_CORE                   1

27. Executing SYNTH_ICE40 pass.

27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

27.2. Executing HIERARCHY pass (managing design hierarchy).

27.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \program_counter
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \mux2to1
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

27.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \program_counter
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \mux2to1
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

27.3. Executing PROC pass (convert processes to netlists).

27.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

27.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

27.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

27.3.4. Executing PROC_INIT pass (extract init attributes).

27.3.5. Executing PROC_ARST pass (detect async resets in processes).

27.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

27.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

27.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

27.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

27.4. Executing FLATTEN pass (flatten design).
Using template instruction_memory for cells of type instruction_memory.
Using template data_mem for cells of type data_mem.
Using template cpu for cells of type cpu.
Using template mux2to1 for cells of type mux2to1.
Using template if_id for cells of type if_id.
Using template ALUControl for cells of type ALUControl.
Using template control for cells of type control.
Using template $paramod\mux2to1\WIDTH=11 for cells of type $paramod\mux2to1\WIDTH=11.
Using template imm_gen for cells of type imm_gen.
Using template branch_predictor for cells of type branch_predictor.
Using template regfile for cells of type regfile.
Using template sign_mask_gen for cells of type sign_mask_gen.
Using template id_ex for cells of type id_ex.
Using template mem_wb for cells of type mem_wb.
Using template ForwardingUnit for cells of type ForwardingUnit.
Using template dsp_adder for cells of type dsp_adder.
Using template alu for cells of type alu.
Using template $paramod\mux2to1\WIDTH=9 for cells of type $paramod\mux2to1\WIDTH=9.
Using template ex_mem for cells of type ex_mem.
Using template branch_decision for cells of type branch_decision.
Using template program_counter for cells of type program_counter.
Using template adder_dsp for cells of type adder_dsp.
Using template full_adder for cells of type full_adder.
<suppressed ~42 debug messages>
No more expansions possible.
Deleting now unused module $paramod\mux2to1\WIDTH=11.
Deleting now unused module $paramod\mux2to1\WIDTH=9.
Deleting now unused module ALUControl.
Deleting now unused module ForwardingUnit.
Deleting now unused module adder_dsp.
Deleting now unused module alu.
Deleting now unused module branch_decision.
Deleting now unused module branch_predictor.
Deleting now unused module control.
Deleting now unused module cpu.
Deleting now unused module data_mem.
Deleting now unused module dsp_adder.
Deleting now unused module ex_mem.
Deleting now unused module full_adder.
Deleting now unused module id_ex.
Deleting now unused module if_id.
Deleting now unused module imm_gen.
Deleting now unused module instruction_memory.
Deleting now unused module mem_wb.
Deleting now unused module mux2to1.
Deleting now unused module program_counter.
Deleting now unused module regfile.
Deleting now unused module sign_mask_gen.

27.5. Executing TRIBUF pass.

27.6. Executing DEMINOUT pass (demote inout ports to input or output).

27.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

27.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

27.10. Executing OPT pass (performing simple optimizations).

27.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

27.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

27.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

27.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

27.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.10.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

27.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

27.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

27.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.10.16. Finished OPT passes. (There is nothing left to do.)

27.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 23 address bits (of 32) from memory init port top.$techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$271 (data_mem_inst.data_block).
Removed top 23 address bits (of 32) from memory read port top.$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$266 (data_mem_inst.data_block).
Removed top 23 address bits (of 32) from memory write port top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$272 (data_mem_inst.data_block).
Removed top 24 address bits (of 32) from memory init port top.$techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem.v:0$300 (inst_mem.instruction_memory).
Removed top 24 address bits (of 32) from memory read port top.$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:69$298 (inst_mem.instruction_memory).
Removed top 27 address bits (of 32) from memory init port top.$techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$334 (processor.register_files.regfile).
Removed top 18 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$eq$verilog/data_mem.v:232$257 ($eq).
Removed top 23 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$558 ($dff).
Removed top 31 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$560 ($dff).
Removed cell top.$techmap\data_mem_inst.$procmux$357 ($mux).
Removed cell top.$techmap\data_mem_inst.$procmux$359 ($mux).
Removed top 31 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$398_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$403_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$404_CMP0 ($eq).
Removed top 19 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$270 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$270 ($sub).
Removed top 1 bits (of 10) from port A of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$270 ($sub).
Removed top 12 bits (of 13) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$270 ($sub).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$419 ($pmux).
Removed top 1 bits (of 2) from port B of cell top.$techmap\processor.alu_control.$procmux$422_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$445 ($pmux).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$468 ($pmux).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$478 ($pmux).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$484_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$494 ($mux).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$506 ($mux).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$509_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$526_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$533_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$534_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$535_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$536_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$538_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$539_CMP0 ($eq).
Removed top 1 bits (of 32) from mux cell top.$techmap\processor.immediate_generator.$procmux$348 ($pmux).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$351_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$352_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$353_CMP0 ($eq).
Removed top 31 bits (of 32) from FF cell top.$techmap\processor.register_files.$procdff$574 ($dff).
Removed cell top.$techmap\processor.register_files.$procmux$542 ($mux).
Removed cell top.$techmap\processor.register_files.$procmux$544 ($mux).
Removed top 44 bits (of 117) from FF cell top.$techmap\processor.mem_wb_reg.$procdff$576 ($dff).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:198$12 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:199$13 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:200$14 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:201$15 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:202$16 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:203$17 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:204$18 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:258$65 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:259$66 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$eq$verilog/alu.v:260$67 ($eq).
Removed top 31 bits (of 32) from mux cell top.$techmap\processor.alu_main.$ternary$verilog/alu.v:241$32 ($mux).
Removed top 31 bits (of 32) from mux cell top.$techmap\processor.alu_main.$ternary$verilog/alu.v:241$33 ($mux).
Removed top 46 bits (of 155) from FF cell top.$techmap\processor.ex_mem_reg.$procdff$577 ($dff).
Removed top 12 bits (of 178) from FF cell top.$techmap\processor.id_ex_reg.$procdff$546 ($dff).
Removed top 23 bits (of 32) from wire top.$techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$190_ADDR[31:0]$260.
Removed top 23 bits (of 32) from wire top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:283$190_ADDR.
Removed top 23 bits (of 32) from wire top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$267_Y.
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$4\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$5\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$6\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$8\ALUCtl[6:0].
Removed top 31 bits (of 32) from wire top.$techmap\processor.alu_main.$ternary$verilog/alu.v:241$32_Y.
Removed top 31 bits (of 32) from wire top.processor.alu_main.w_slt.
Removed top 12 bits (of 121) from wire top.processor.ex_mem_out.
Removed top 46 bits (of 155) from wire top.processor.ex_mem_reg.data_in.
Removed top 12 bits (of 178) from wire top.processor.id_ex_out.
Removed top 12 bits (of 85) from wire top.processor.mem_wb_out.
Removed top 44 bits (of 117) from wire top.processor.mem_wb_reg.data_in.

27.12. Executing PEEPOPT pass (run peephole optimizers).

27.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

27.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $techmap\processor.alu_main.$sshr$verilog/alu.v:243$36 ($sshr):
    Found 1 activation_patterns using ctrl signal \processor.alu_main.op_sra.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shr$verilog/alu.v:242$34 ($shr):
    Found 1 activation_patterns using ctrl signal \processor.alu_main.op_srl.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shl$verilog/alu.v:244$38 ($shl):
    Found 1 activation_patterns using ctrl signal \processor.alu_main.op_sll.
    No candidates found.
  Analyzing resource sharing options for $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$266 ($memrd):
    Found 1 activation_patterns using ctrl signal $techmap\data_mem_inst.$procmux$389_CMP.
    No candidates found.

27.15. Executing TECHMAP pass (map to technology primitives).

27.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

27.15.2. Continuing TECHMAP pass.
No more expansions possible.

27.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

27.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

27.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\processor.alu_main.$add$verilog/alu.v:256$60 ($add).
  creating $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$10 ($add).
  creating $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$9 ($add).
  creating $macc model for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:70$110 ($add).
  merging $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$9 into $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$10.
  creating $alu model for $macc $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:70$110.
  creating $alu model for $macc $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$10.
  creating $alu model for $macc $techmap\processor.alu_main.$add$verilog/alu.v:256$60.
  creating $alu cell for $techmap\processor.alu_main.$add$verilog/alu.v:256$60: $auto$alumacc.cc:485:replace_alu$950
  creating $alu cell for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:66$10: $auto$alumacc.cc:485:replace_alu$953
  creating $alu cell for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:70$110: $auto$alumacc.cc:485:replace_alu$956
  created 3 $alu and 0 $macc cells.

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.19.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \processor.id_ex_reg.data_out [177:166] = 12'xxxxxxxxxxxx to constant driver in module top.
Promoting init spec \processor.mem_wb_reg.data_out [84:73] = 12'xxxxxxxxxxxx to constant driver in module top.
Promoting init spec \processor.ex_mem_reg.data_out [120:109] = 12'xxxxxxxxxxxx to constant driver in module top.
Promoted 3 init specs to constant drivers.

27.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

27.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.19.9. Rerunning OPT passes. (Maybe there is more to do..)

27.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

27.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

27.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

27.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.19.16. Finished OPT passes. (There is nothing left to do.)

27.20. Executing FSM pass (extract and optimize FSM).

27.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.data_mem_inst.state as FSM state register:
    Register has an initialization value.

27.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.21.5. Finished fast OPT passes.

27.22. Executing MEMORY pass.

27.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$272' in module `\top': merged $dff to cell.
Checking cell `$techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$335' in module `\top': merged $dff to cell.
Checking cell `$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$266' in module `\top': merged data $dff with rd enable to cell.
Checking cell `$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:69$298' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$322' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$323' in module `\top': merged data $dff to cell.

27.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 13 unused wires.
<suppressed ~10 debug messages>

27.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\data_mem_inst.data_block' in module `\top':
  $techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$271 ($meminit)
  $techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$272 ($memwr)
  $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$266 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\inst_mem.instruction_memory' in module `\top':
  $techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem.v:0$300 ($meminit)
  $techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:69$298 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\processor.register_files.regfile' in module `\top':
  $techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$334 ($meminit)
  $techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$335 ($memwr)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$322 ($memrd)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$323 ($memrd)

27.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing top.data_mem_inst.data_block:
  Properties: ports=2 bits=8512 rports=1 wports=1 dbits=32 abits=9 words=266
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3936 efficiency=51
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=1968 efficiency=51
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3032 efficiency=25
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3564 efficiency=12
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=12, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=25, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=51, cells=4, acells=1
    Efficiency for rule 1.1: efficiency=51, cells=4, acells=2
    Selected rule 4.1 with efficiency 51.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_mem_inst.data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_mem_inst.data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_mem_inst.data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_mem_inst.data_block.3.0.0
Processing top.inst_mem.instruction_memory:
  Properties: ports=1 bits=8192 rports=1 wports=0 dbits=32 abits=8 words=256
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk_pll_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \clk_pll_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=25
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk_pll_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3072 efficiency=25
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1792 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \clk_pll_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=25
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1792 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=25
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1792 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=12, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=25, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=50, cells=4, acells=1
    Efficiency for rule 1.1: efficiency=100, cells=2, acells=1
    Selected rule 1.1 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk_pll_proc.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: inst_mem.instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: inst_mem.instruction_memory.1.0.0
Processing top.processor.register_files.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: processor.register_files.regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: processor.register_files.regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: processor.register_files.regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: processor.register_files.regfile.1.0.1

27.25. Executing TECHMAP pass (map to technology primitives).

27.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

27.25.2. Continuing TECHMAP pass.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$b50e2e7dcf5c1b4265a15554cdb462f13163f162\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$73604ec06a18702b3d50b003f675a84164dab2f9\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$dccd4860c525c45bc4a6d852e5e1bb723fecc798\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$e80654b3e4c497f14aeb6a81bd09ce2747c1e5ba\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$6cd6fdde58008442affdc6691bc938748dbbfe51\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$3ed7f1f48674aadcee711d42bcdcbf2e83b2acc5\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$fed3e771e88ed3fb27190182b187fa856a11abfd\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$2d59d0f98da661ca186ff53df6db565a339602b2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$564c877e7397cd934aeea7be88c12a462c84de66\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$ee365e53c589ebe31f8e82496cf52135bc95b2b9\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$8f341695f621d2336729f4496f2943367d9fd517\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$78d238d0e01dd7623c82168982898b571015ba56\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~480 debug messages>

27.26. Executing ICE40_BRAMINIT pass.

27.27. Executing OPT pass (performing simple optimizations).

27.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~81 debug messages>

27.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

27.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

27.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 251 unused wires.
<suppressed ~2 debug messages>

27.27.5. Finished fast OPT passes.

27.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

27.29. Executing OPT pass (performing simple optimizations).

27.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

27.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [15:8] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:8] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] \data_mem_inst.word_buf [15:8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [7:0] }, B={ \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [7], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] \data_mem_inst.word_buf [7:0] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [31:24] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:24] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] \data_mem_inst.word_buf [31:24] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [23:16] }, B={ \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [23], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] \data_mem_inst.word_buf [23:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [31:16] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] \data_mem_inst.word_buf [31:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [15:0] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] \data_mem_inst.word_buf [15:0] }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$445:
      Old ports: A=3'010, B=3'110, Y=$auto$wreduce.cc:460:run$942 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:460:run$942 [2]
      New connections: $auto$wreduce.cc:460:run$942 [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$454:
      Old ports: A={ 4'0000 $auto$wreduce.cc:460:run$942 [2:0] }, B={ 25'0000101000011100010000000 $auto$wreduce.cc:460:run$941 [2:0] 14'00000010000000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0]
      New ports: A={ 1'0 $auto$wreduce.cc:460:run$942 [2:0] }, B={ 13'0101011110000 $auto$wreduce.cc:460:run$941 [2:0] 8'00010000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0] [3:0]
      New connections: $techmap\processor.alu_control.$7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$468:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:460:run$941 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:460:run$941 [2] $auto$wreduce.cc:460:run$941 [0] }
      New connections: $auto$wreduce.cc:460:run$941 [1] = $auto$wreduce.cc:460:run$941 [0]
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$494:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$939 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$939 [0]
      New connections: $auto$wreduce.cc:460:run$939 [3:1] = { $auto$wreduce.cc:460:run$939 [0] $auto$wreduce.cc:460:run$939 [0] 1'1 }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$506:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$938 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$938 [0]
      New connections: $auto$wreduce.cc:460:run$938 [3:1] = { $auto$wreduce.cc:460:run$938 [0] $auto$wreduce.cc:460:run$938 [0] 1'1 }
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$521:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$techmap\processor.alu_control.$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $techmap\processor.alu_control.$2\ALUCtl[6:0] [6:4] $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] }
      New connections: $techmap\processor.alu_control.$2\ALUCtl[6:0] [3:1] = { $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] 2'11 }
    Consolidated identical input bits for $mux cell $techmap\processor.cont_mux.$ternary$verilog/mux2to1.v:51$344:
      Old ports: A={ \processor.control_unit.Jalr \processor.control_unit.ALUSrc \processor.control_unit.Lui \processor.control_unit.Auipc \processor.control_unit.Branch \processor.control_unit.MemRead \processor.control_unit.MemWrite 1'0 \processor.control_unit.RegWrite \processor.control_unit.MemtoReg \processor.control_unit.Jump }, B=11'00000000000, Y=\processor.cont_mux.out
      New ports: A={ \processor.control_unit.Jalr \processor.control_unit.ALUSrc \processor.control_unit.Lui \processor.control_unit.Auipc \processor.control_unit.Branch \processor.control_unit.MemRead \processor.control_unit.MemWrite \processor.control_unit.RegWrite \processor.control_unit.MemtoReg \processor.control_unit.Jump }, B=10'0000000000, Y={ \processor.cont_mux.out [10:4] \processor.cont_mux.out [2:0] }
      New connections: \processor.cont_mux.out [3] = 1'0
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$240:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y, Y=\data_mem_inst.out1
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$239_Y [8] \data_mem_inst.word_buf [7:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$237_Y [8] \data_mem_inst.word_buf [15:8] }, Y=\data_mem_inst.out1 [8:0]
      New connections: \data_mem_inst.out1 [31:9] = { \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$245:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y, Y=\data_mem_inst.out2
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$244_Y [8] \data_mem_inst.word_buf [23:16] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$242_Y [8] \data_mem_inst.word_buf [31:24] }, Y=\data_mem_inst.out2 [8:0]
      New connections: \data_mem_inst.out2 [31:9] = { \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$250:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y, Y=\data_mem_inst.out3
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$249_Y [16] \data_mem_inst.word_buf [15:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$247_Y [16] \data_mem_inst.word_buf [31:16] }, Y=\data_mem_inst.out3 [16:0]
      New connections: \data_mem_inst.out3 [31:17] = { \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:209$252:
      Old ports: A=\data_mem_inst.out1, B=\data_mem_inst.out2, Y=\data_mem_inst.out5
      New ports: A=\data_mem_inst.out1 [8:0], B=\data_mem_inst.out2 [8:0], Y=\data_mem_inst.out5 [8:0]
      New connections: \data_mem_inst.out5 [31:9] = { \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] }
  Optimizing cells in module \top.
Performed a total of 17 changes.

27.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

27.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

27.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

27.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.29.9. Rerunning OPT passes. (Maybe there is more to do..)

27.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

27.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

27.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

27.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.29.16. Finished OPT passes. (There is nothing left to do.)

27.30. Executing ICE40_WRAPCARRY pass (wrap carries).

27.31. Executing TECHMAP pass (map to technology primitives).

27.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

27.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$0c11a8b0f7bc0abe97ee32fac977a1bbaae6bdf7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1848 debug messages>

27.32. Executing OPT pass (performing simple optimizations).

27.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1088 debug messages>

27.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1530 debug messages>
Removed a total of 510 cells.

27.32.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$3130 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

27.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 235 unused cells and 608 unused wires.
<suppressed ~246 debug messages>

27.32.5. Rerunning OPT passes. (Removed registers in this run.)

27.32.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

27.32.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.32.8. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$6441 ($_DFF_P_) from module top.
Promoting init spec \processor.id_ex_reg.data_out [147] = 1'0 to constant driver in module top.
Promoting init spec \processor.mem_wb_reg.data_out [0] = 1'0 to constant driver in module top.
Promoting init spec \processor.mem_wb_reg.data_out [3] = 1'0 to constant driver in module top.
Promoted 3 init specs to constant drivers.
Replaced 1 DFF cells.

27.32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.32.10. Rerunning OPT passes. (Removed registers in this run.)

27.32.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~32 debug messages>

27.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.32.13. Executing OPT_RMDFF pass (remove dff with constant values).

27.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 32 unused cells and 0 unused wires.
<suppressed ~32 debug messages>

27.32.15. Finished fast OPT passes.

27.33. Executing ICE40_OPT pass (performing simple optimizations).

27.33.1. Running ICE40 specific optimizations.

27.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~80 debug messages>

27.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

27.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.33.6. Rerunning OPT passes. (Removed registers in this run.)

27.33.7. Running ICE40 specific optimizations.

27.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

27.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.33.12. Finished OPT passes. (There is nothing left to do.)

27.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1174 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [0] -> \data_mem_inst.read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1175 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [1] -> \data_mem_inst.read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1176 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [2] -> \data_mem_inst.read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1177 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [3] -> \data_mem_inst.read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1178 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [4] -> \data_mem_inst.read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1179 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [5] -> \data_mem_inst.read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1180 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [6] -> \data_mem_inst.read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1181 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [7] -> \data_mem_inst.read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1182 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [8] -> \data_mem_inst.read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1183 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [9] -> \data_mem_inst.read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1184 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [10] -> \data_mem_inst.read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1185 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [11] -> \data_mem_inst.read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1186 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [12] -> \data_mem_inst.read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1187 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [13] -> \data_mem_inst.read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1188 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [14] -> \data_mem_inst.read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1189 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [15] -> \data_mem_inst.read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1190 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [16] -> \data_mem_inst.read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1191 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [17] -> \data_mem_inst.read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1192 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [18] -> \data_mem_inst.read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1193 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [19] -> \data_mem_inst.read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1194 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [20] -> \data_mem_inst.read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1195 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [21] -> \data_mem_inst.read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1196 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [22] -> \data_mem_inst.read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1197 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [23] -> \data_mem_inst.read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1198 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [24] -> \data_mem_inst.read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1199 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [25] -> \data_mem_inst.read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1200 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [26] -> \data_mem_inst.read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1201 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [27] -> \data_mem_inst.read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1202 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [28] -> \data_mem_inst.read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1203 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [29] -> \data_mem_inst.read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1204 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [30] -> \data_mem_inst.read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1205 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [31] -> \data_mem_inst.read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1206 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$402.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1656_Y -> \data_mem_inst.clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1207 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [0] -> \data_mem_inst.state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1208 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [1] -> \data_mem_inst.state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1209 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [2] -> \data_mem_inst.state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1210 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [3] -> \data_mem_inst.state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1211 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [4] -> \data_mem_inst.state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1212 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [5] -> \data_mem_inst.state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1213 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [6] -> \data_mem_inst.state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1214 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [7] -> \data_mem_inst.state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1215 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [8] -> \data_mem_inst.state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1216 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [9] -> \data_mem_inst.state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1217 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [10] -> \data_mem_inst.state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1218 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [11] -> \data_mem_inst.state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1219 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [12] -> \data_mem_inst.state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1220 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [13] -> \data_mem_inst.state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1221 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [14] -> \data_mem_inst.state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1222 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [15] -> \data_mem_inst.state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1223 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [16] -> \data_mem_inst.state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1224 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [17] -> \data_mem_inst.state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1225 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [18] -> \data_mem_inst.state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1226 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [19] -> \data_mem_inst.state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1227 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [20] -> \data_mem_inst.state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1228 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [21] -> \data_mem_inst.state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1229 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [22] -> \data_mem_inst.state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1230 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [23] -> \data_mem_inst.state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1231 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [24] -> \data_mem_inst.state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1232 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [25] -> \data_mem_inst.state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1233 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [26] -> \data_mem_inst.state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1234 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [27] -> \data_mem_inst.state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1235 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [28] -> \data_mem_inst.state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1236 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [29] -> \data_mem_inst.state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1237 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [30] -> \data_mem_inst.state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1238 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$390.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1412_Y [31] -> \data_mem_inst.state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1239 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memread_buf[0:0] -> \data_mem_inst.memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1240 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memwrite_buf[0:0] -> \data_mem_inst.memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1241 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [0] -> \data_mem_inst.write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1242 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [1] -> \data_mem_inst.write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1243 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [2] -> \data_mem_inst.write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1244 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [3] -> \data_mem_inst.write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1245 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [4] -> \data_mem_inst.write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1246 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [5] -> \data_mem_inst.write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1247 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [6] -> \data_mem_inst.write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1248 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [7] -> \data_mem_inst.write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1249 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [8] -> \data_mem_inst.write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1250 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [9] -> \data_mem_inst.write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1251 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [10] -> \data_mem_inst.write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1252 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [11] -> \data_mem_inst.write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1253 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [12] -> \data_mem_inst.write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1254 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [13] -> \data_mem_inst.write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1255 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [14] -> \data_mem_inst.write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1256 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [15] -> \data_mem_inst.write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1257 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [16] -> \data_mem_inst.write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1258 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [17] -> \data_mem_inst.write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1259 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [18] -> \data_mem_inst.write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1260 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [19] -> \data_mem_inst.write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1261 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [20] -> \data_mem_inst.write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1262 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [21] -> \data_mem_inst.write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1263 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [22] -> \data_mem_inst.write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1264 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [23] -> \data_mem_inst.write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1265 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [24] -> \data_mem_inst.write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1266 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [25] -> \data_mem_inst.write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1267 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [26] -> \data_mem_inst.write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1268 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [27] -> \data_mem_inst.write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1269 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [28] -> \data_mem_inst.write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1270 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [29] -> \data_mem_inst.write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1271 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [30] -> \data_mem_inst.write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1272 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [31] -> \data_mem_inst.write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1273 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [0] -> \data_mem_inst.addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1274 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [1] -> \data_mem_inst.addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1275 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [2] -> \data_mem_inst.addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1276 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [3] -> \data_mem_inst.addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1277 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [4] -> \data_mem_inst.addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1278 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [5] -> \data_mem_inst.addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1279 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [6] -> \data_mem_inst.addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1280 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [7] -> \data_mem_inst.addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1281 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [8] -> \data_mem_inst.addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1282 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [9] -> \data_mem_inst.addr_buf [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1283 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [10] -> \data_mem_inst.addr_buf [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1306 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [1] -> \data_mem_inst.sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1307 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [2] -> \data_mem_inst.sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1308 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [3] -> \data_mem_inst.sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1309 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [0] -> \data_mem_inst.led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1310 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [1] -> \data_mem_inst.led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1311 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [2] -> \data_mem_inst.led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1312 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [3] -> \data_mem_inst.led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1313 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [4] -> \data_mem_inst.led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1314 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [5] -> \data_mem_inst.led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1315 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [6] -> \data_mem_inst.led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1316 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [7] -> \data_mem_inst.led_reg [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2853 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [0] -> \processor.branch_predictor_FSM.s [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2854 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [1] -> \processor.branch_predictor_FSM.s [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6681 to $_DFFE_PP_ for \processor.PC.inAddr [0] -> \processor.PC.outAddr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6682 to $_DFFE_PP_ for \processor.PC.inAddr [1] -> \processor.PC.outAddr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6683 to $_DFFE_PP_ for \processor.PC.inAddr [2] -> \processor.PC.outAddr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6684 to $_DFFE_PP_ for \processor.PC.inAddr [3] -> \processor.PC.outAddr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6685 to $_DFFE_PP_ for \processor.PC.inAddr [4] -> \processor.PC.outAddr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6686 to $_DFFE_PP_ for \processor.PC.inAddr [5] -> \processor.PC.outAddr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6687 to $_DFFE_PP_ for \processor.PC.inAddr [6] -> \processor.PC.outAddr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6688 to $_DFFE_PP_ for \processor.PC.inAddr [7] -> \processor.PC.outAddr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6689 to $_DFFE_PP_ for \processor.PC.inAddr [8] -> \processor.PC.outAddr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6690 to $_DFFE_PP_ for \processor.PC.inAddr [9] -> \processor.PC.outAddr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6691 to $_DFFE_PP_ for \processor.PC.inAddr [10] -> \processor.PC.outAddr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6692 to $_DFFE_PP_ for \processor.PC.inAddr [11] -> \processor.PC.outAddr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6693 to $_DFFE_PP_ for \processor.PC.inAddr [12] -> \processor.PC.outAddr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6694 to $_DFFE_PP_ for \processor.PC.inAddr [13] -> \processor.PC.outAddr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6695 to $_DFFE_PP_ for \processor.PC.inAddr [14] -> \processor.PC.outAddr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6696 to $_DFFE_PP_ for \processor.PC.inAddr [15] -> \processor.PC.outAddr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6697 to $_DFFE_PP_ for \processor.PC.inAddr [16] -> \processor.PC.outAddr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6698 to $_DFFE_PP_ for \processor.PC.inAddr [17] -> \processor.PC.outAddr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6699 to $_DFFE_PP_ for \processor.PC.inAddr [18] -> \processor.PC.outAddr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6700 to $_DFFE_PP_ for \processor.PC.inAddr [19] -> \processor.PC.outAddr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6701 to $_DFFE_PP_ for \processor.PC.inAddr [20] -> \processor.PC.outAddr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6702 to $_DFFE_PP_ for \processor.PC.inAddr [21] -> \processor.PC.outAddr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6703 to $_DFFE_PP_ for \processor.PC.inAddr [22] -> \processor.PC.outAddr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6704 to $_DFFE_PP_ for \processor.PC.inAddr [23] -> \processor.PC.outAddr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6705 to $_DFFE_PP_ for \processor.PC.inAddr [24] -> \processor.PC.outAddr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6706 to $_DFFE_PP_ for \processor.PC.inAddr [25] -> \processor.PC.outAddr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6707 to $_DFFE_PP_ for \processor.PC.inAddr [26] -> \processor.PC.outAddr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6708 to $_DFFE_PP_ for \processor.PC.inAddr [27] -> \processor.PC.outAddr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6709 to $_DFFE_PP_ for \processor.PC.inAddr [28] -> \processor.PC.outAddr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6710 to $_DFFE_PP_ for \processor.PC.inAddr [29] -> \processor.PC.outAddr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6711 to $_DFFE_PP_ for \processor.PC.inAddr [30] -> \processor.PC.outAddr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6712 to $_DFFE_PP_ for \processor.PC.inAddr [31] -> \processor.PC.outAddr [31].

27.35. Executing TECHMAP pass (map to technology primitives).

27.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

27.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~580 debug messages>

27.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~406 debug messages>

27.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).

27.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6509 (SB_DFF): \processor.ex_mem_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1236 (SB_DFFE): \data_mem_inst.state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFFE): \data_mem_inst.state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFFE): \data_mem_inst.state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1221 (SB_DFFE): \data_mem_inst.state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1222 (SB_DFFE): \data_mem_inst.state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1230 (SB_DFFE): \data_mem_inst.state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1209 (SB_DFFE): \data_mem_inst.state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFFE): \data_mem_inst.state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFFE): \data_mem_inst.clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3127 (SB_DFF): \processor.id_ex_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2855 (SB_DFFN): \processor.branch_predictor_FSM.branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1234 (SB_DFFE): \data_mem_inst.state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1238 (SB_DFFE): \data_mem_inst.state [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1223 (SB_DFFE): \data_mem_inst.state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1226 (SB_DFFE): \data_mem_inst.state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6438 (SB_DFF): \processor.ex_mem_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1225 (SB_DFFE): \data_mem_inst.state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1233 (SB_DFFE): \data_mem_inst.state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1207 (SB_DFFE): \data_mem_inst.state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1237 (SB_DFFE): \data_mem_inst.state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1232 (SB_DFFE): \data_mem_inst.state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1224 (SB_DFFE): \data_mem_inst.state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1227 (SB_DFFE): \data_mem_inst.state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFFE): \data_mem_inst.state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFFE): \data_mem_inst.state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1231 (SB_DFFE): \data_mem_inst.state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1220 (SB_DFFE): \data_mem_inst.state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2245 (SB_DFF): \processor.if_id_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFFE): \data_mem_inst.state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1235 (SB_DFFE): \data_mem_inst.state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFFE): \data_mem_inst.state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1208 (SB_DFFE): \data_mem_inst.state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1219 (SB_DFFE): \data_mem_inst.state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFFE): \data_mem_inst.state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6681 (SB_DFFE): \processor.PC.outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6682 (SB_DFFE): \processor.PC.outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6683 (SB_DFFE): \processor.PC.outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6684 (SB_DFFE): \processor.PC.outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6685 (SB_DFFE): \processor.PC.outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6686 (SB_DFFE): \processor.PC.outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6687 (SB_DFFE): \processor.PC.outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6688 (SB_DFFE): \processor.PC.outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6689 (SB_DFFE): \processor.PC.outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6690 (SB_DFFE): \processor.PC.outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6691 (SB_DFFE): \processor.PC.outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6692 (SB_DFFE): \processor.PC.outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6693 (SB_DFFE): \processor.PC.outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6694 (SB_DFFE): \processor.PC.outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6695 (SB_DFFE): \processor.PC.outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6696 (SB_DFFE): \processor.PC.outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6697 (SB_DFFE): \processor.PC.outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6698 (SB_DFFE): \processor.PC.outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6699 (SB_DFFE): \processor.PC.outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6700 (SB_DFFE): \processor.PC.outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6701 (SB_DFFE): \processor.PC.outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6702 (SB_DFFE): \processor.PC.outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6703 (SB_DFFE): \processor.PC.outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6704 (SB_DFFE): \processor.PC.outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6705 (SB_DFFE): \processor.PC.outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6706 (SB_DFFE): \processor.PC.outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6707 (SB_DFFE): \processor.PC.outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6708 (SB_DFFE): \processor.PC.outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6709 (SB_DFFE): \processor.PC.outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6710 (SB_DFFE): \processor.PC.outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6711 (SB_DFFE): \processor.PC.outAddr [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6712 (SB_DFFE): \processor.PC.outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2276 (SB_DFF): \processor.if_id_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2277 (SB_DFF): \processor.if_id_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2278 (SB_DFF): \processor.if_id_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2279 (SB_DFF): \processor.if_id_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2280 (SB_DFF): \processor.if_id_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2281 (SB_DFF): \processor.if_id_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2282 (SB_DFF): \processor.if_id_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2283 (SB_DFF): \processor.if_id_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2285 (SB_DFF): \processor.if_id_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2286 (SB_DFF): \processor.if_id_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2287 (SB_DFF): \processor.if_id_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2288 (SB_DFF): \processor.if_id_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2289 (SB_DFF): \processor.if_id_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2290 (SB_DFF): \processor.if_id_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2291 (SB_DFF): \processor.if_id_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2292 (SB_DFF): \processor.if_id_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2293 (SB_DFF): \processor.if_id_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2294 (SB_DFF): \processor.if_id_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2295 (SB_DFF): \processor.if_id_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2296 (SB_DFF): \processor.if_id_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2297 (SB_DFF): \processor.if_id_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2298 (SB_DFF): \processor.if_id_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2299 (SB_DFF): \processor.if_id_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2300 (SB_DFF): \processor.if_id_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2301 (SB_DFF): \processor.if_id_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2302 (SB_DFF): \processor.if_id_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2303 (SB_DFF): \processor.if_id_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2304 (SB_DFF): \processor.if_id_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2305 (SB_DFF): \processor.if_id_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2306 (SB_DFF): \processor.if_id_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2307 (SB_DFF): \processor.if_id_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2308 (SB_DFF): \processor.if_id_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6442 (SB_DFF): \processor.ex_mem_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1229 (SB_DFFE): \data_mem_inst.state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2854 (SB_DFFE): \processor.branch_predictor_FSM.s [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6542 (SB_DFF): \processor.ex_mem_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6543 (SB_DFF): \processor.ex_mem_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6544 (SB_DFF): \processor.ex_mem_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6545 (SB_DFF): \processor.ex_mem_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6546 (SB_DFF): \processor.ex_mem_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6440 (SB_DFF): \processor.ex_mem_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3128 (SB_DFF): \processor.id_ex_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3129 (SB_DFF): \processor.id_ex_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3131 (SB_DFF): \processor.id_ex_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3132 (SB_DFF): \processor.id_ex_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3133 (SB_DFF): \processor.id_ex_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3134 (SB_DFF): \processor.id_ex_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3135 (SB_DFF): \processor.id_ex_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3136 (SB_DFF): \processor.id_ex_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3137 (SB_DFF): \processor.id_ex_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3138 (SB_DFF): \processor.id_ex_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3139 (SB_DFF): \processor.id_ex_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3140 (SB_DFF): \processor.id_ex_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3141 (SB_DFF): \processor.id_ex_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3142 (SB_DFF): \processor.id_ex_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3143 (SB_DFF): \processor.id_ex_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3144 (SB_DFF): \processor.id_ex_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3145 (SB_DFF): \processor.id_ex_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3146 (SB_DFF): \processor.id_ex_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3147 (SB_DFF): \processor.id_ex_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3148 (SB_DFF): \processor.id_ex_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3149 (SB_DFF): \processor.id_ex_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3150 (SB_DFF): \processor.id_ex_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3151 (SB_DFF): \processor.id_ex_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3152 (SB_DFF): \processor.id_ex_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3153 (SB_DFF): \processor.id_ex_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3154 (SB_DFF): \processor.id_ex_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3155 (SB_DFF): \processor.id_ex_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3156 (SB_DFF): \processor.id_ex_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3157 (SB_DFF): \processor.id_ex_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3158 (SB_DFF): \processor.id_ex_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3159 (SB_DFF): \processor.id_ex_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3160 (SB_DFF): \processor.id_ex_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3161 (SB_DFF): \processor.id_ex_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3162 (SB_DFF): \processor.id_ex_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3163 (SB_DFF): \processor.id_ex_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3164 (SB_DFF): \processor.id_ex_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3165 (SB_DFF): \processor.id_ex_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3166 (SB_DFF): \processor.id_ex_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3167 (SB_DFF): \processor.id_ex_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3168 (SB_DFF): \processor.id_ex_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3169 (SB_DFF): \processor.id_ex_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3170 (SB_DFF): \processor.id_ex_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3171 (SB_DFF): \processor.id_ex_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3172 (SB_DFF): \processor.id_ex_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3173 (SB_DFF): \processor.id_ex_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3174 (SB_DFF): \processor.id_ex_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3175 (SB_DFF): \processor.id_ex_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3176 (SB_DFF): \processor.id_ex_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3177 (SB_DFF): \processor.id_ex_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3178 (SB_DFF): \processor.id_ex_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3179 (SB_DFF): \processor.id_ex_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3180 (SB_DFF): \processor.id_ex_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3181 (SB_DFF): \processor.id_ex_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3182 (SB_DFF): \processor.id_ex_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3183 (SB_DFF): \processor.id_ex_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3184 (SB_DFF): \processor.id_ex_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3185 (SB_DFF): \processor.id_ex_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3186 (SB_DFF): \processor.id_ex_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3187 (SB_DFF): \processor.id_ex_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3188 (SB_DFF): \processor.id_ex_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3189 (SB_DFF): \processor.id_ex_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3190 (SB_DFF): \processor.id_ex_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3191 (SB_DFF): \processor.id_ex_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3192 (SB_DFF): \processor.id_ex_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3193 (SB_DFF): \processor.id_ex_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3194 (SB_DFF): \processor.id_ex_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3195 (SB_DFF): \processor.id_ex_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3196 (SB_DFF): \processor.id_ex_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3197 (SB_DFF): \processor.id_ex_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3198 (SB_DFF): \processor.id_ex_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3199 (SB_DFF): \processor.id_ex_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3200 (SB_DFF): \processor.id_ex_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3201 (SB_DFF): \processor.id_ex_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3202 (SB_DFF): \processor.id_ex_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3203 (SB_DFF): \processor.id_ex_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3204 (SB_DFF): \processor.id_ex_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3205 (SB_DFF): \processor.id_ex_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3206 (SB_DFF): \processor.id_ex_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3207 (SB_DFF): \processor.id_ex_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3208 (SB_DFF): \processor.id_ex_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3209 (SB_DFF): \processor.id_ex_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3210 (SB_DFF): \processor.id_ex_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3211 (SB_DFF): \processor.id_ex_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3212 (SB_DFF): \processor.id_ex_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3213 (SB_DFF): \processor.id_ex_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3214 (SB_DFF): \processor.id_ex_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3215 (SB_DFF): \processor.id_ex_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3216 (SB_DFF): \processor.id_ex_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3217 (SB_DFF): \processor.id_ex_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3218 (SB_DFF): \processor.id_ex_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3219 (SB_DFF): \processor.id_ex_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3220 (SB_DFF): \processor.id_ex_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3221 (SB_DFF): \processor.id_ex_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3222 (SB_DFF): \processor.id_ex_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3223 (SB_DFF): \processor.id_ex_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3224 (SB_DFF): \processor.id_ex_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3225 (SB_DFF): \processor.id_ex_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3226 (SB_DFF): \processor.id_ex_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3227 (SB_DFF): \processor.id_ex_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3228 (SB_DFF): \processor.id_ex_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3229 (SB_DFF): \processor.id_ex_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3230 (SB_DFF): \processor.id_ex_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3231 (SB_DFF): \processor.id_ex_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3232 (SB_DFF): \processor.id_ex_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3233 (SB_DFF): \processor.id_ex_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3234 (SB_DFF): \processor.id_ex_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3235 (SB_DFF): \processor.id_ex_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3236 (SB_DFF): \processor.id_ex_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3237 (SB_DFF): \processor.id_ex_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3238 (SB_DFF): \processor.id_ex_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3239 (SB_DFF): \processor.id_ex_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3240 (SB_DFF): \processor.id_ex_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3241 (SB_DFF): \processor.id_ex_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3242 (SB_DFF): \processor.id_ex_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3243 (SB_DFF): \processor.id_ex_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3244 (SB_DFF): \processor.id_ex_reg.data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3245 (SB_DFF): \processor.id_ex_reg.data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3246 (SB_DFF): \processor.id_ex_reg.data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3247 (SB_DFF): \processor.id_ex_reg.data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3248 (SB_DFF): \processor.id_ex_reg.data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3249 (SB_DFF): \processor.id_ex_reg.data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3250 (SB_DFF): \processor.id_ex_reg.data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3251 (SB_DFF): \processor.id_ex_reg.data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3252 (SB_DFF): \processor.id_ex_reg.data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3253 (SB_DFF): \processor.id_ex_reg.data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3254 (SB_DFF): \processor.id_ex_reg.data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3255 (SB_DFF): \processor.id_ex_reg.data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3256 (SB_DFF): \processor.id_ex_reg.data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3257 (SB_DFF): \processor.id_ex_reg.data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3258 (SB_DFF): \processor.id_ex_reg.data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3259 (SB_DFF): \processor.id_ex_reg.data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3260 (SB_DFF): \processor.id_ex_reg.data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3261 (SB_DFF): \processor.id_ex_reg.data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3262 (SB_DFF): \processor.id_ex_reg.data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3263 (SB_DFF): \processor.id_ex_reg.data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3264 (SB_DFF): \processor.id_ex_reg.data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3265 (SB_DFF): \processor.id_ex_reg.data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3266 (SB_DFF): \processor.id_ex_reg.data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3267 (SB_DFF): \processor.id_ex_reg.data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3268 (SB_DFF): \processor.id_ex_reg.data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3269 (SB_DFF): \processor.id_ex_reg.data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3270 (SB_DFF): \processor.id_ex_reg.data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3271 (SB_DFF): \processor.id_ex_reg.data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3272 (SB_DFF): \processor.id_ex_reg.data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3273 (SB_DFF): \processor.id_ex_reg.data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3275 (SB_DFF): \processor.id_ex_reg.data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3276 (SB_DFF): \processor.id_ex_reg.data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2284 (SB_DFF): \processor.if_id_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3277 (SB_DFF): \processor.id_ex_reg.data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3283 (SB_DFF): \processor.id_ex_reg.data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3284 (SB_DFF): \processor.id_ex_reg.data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3285 (SB_DFF): \processor.id_ex_reg.data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3286 (SB_DFF): \processor.id_ex_reg.data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3287 (SB_DFF): \processor.id_ex_reg.data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3288 (SB_DFF): \processor.id_ex_reg.data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3289 (SB_DFF): \processor.id_ex_reg.data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3290 (SB_DFF): \processor.id_ex_reg.data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3291 (SB_DFF): \processor.id_ex_reg.data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6439 (SB_DFF): \processor.ex_mem_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3294 (SB_DFF): \processor.mem_wb_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3295 (SB_DFF): \processor.mem_wb_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3297 (SB_DFF): \processor.mem_wb_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3298 (SB_DFF): \processor.mem_wb_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3299 (SB_DFF): \processor.mem_wb_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3300 (SB_DFF): \processor.mem_wb_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3301 (SB_DFF): \processor.mem_wb_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3302 (SB_DFF): \processor.mem_wb_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3303 (SB_DFF): \processor.mem_wb_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3304 (SB_DFF): \processor.mem_wb_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3305 (SB_DFF): \processor.mem_wb_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3306 (SB_DFF): \processor.mem_wb_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3307 (SB_DFF): \processor.mem_wb_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3308 (SB_DFF): \processor.mem_wb_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3309 (SB_DFF): \processor.mem_wb_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3310 (SB_DFF): \processor.mem_wb_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3311 (SB_DFF): \processor.mem_wb_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3312 (SB_DFF): \processor.mem_wb_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3313 (SB_DFF): \processor.mem_wb_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3314 (SB_DFF): \processor.mem_wb_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3315 (SB_DFF): \processor.mem_wb_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3316 (SB_DFF): \processor.mem_wb_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3317 (SB_DFF): \processor.mem_wb_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3318 (SB_DFF): \processor.mem_wb_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3319 (SB_DFF): \processor.mem_wb_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3320 (SB_DFF): \processor.mem_wb_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3321 (SB_DFF): \processor.mem_wb_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3322 (SB_DFF): \processor.mem_wb_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3323 (SB_DFF): \processor.mem_wb_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3324 (SB_DFF): \processor.mem_wb_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3325 (SB_DFF): \processor.mem_wb_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3326 (SB_DFF): \processor.mem_wb_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3327 (SB_DFF): \processor.mem_wb_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3328 (SB_DFF): \processor.mem_wb_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3329 (SB_DFF): \processor.mem_wb_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3330 (SB_DFF): \processor.mem_wb_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3331 (SB_DFF): \processor.mem_wb_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3332 (SB_DFF): \processor.mem_wb_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3333 (SB_DFF): \processor.mem_wb_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3334 (SB_DFF): \processor.mem_wb_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3335 (SB_DFF): \processor.mem_wb_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3336 (SB_DFF): \processor.mem_wb_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3337 (SB_DFF): \processor.mem_wb_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3338 (SB_DFF): \processor.mem_wb_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3339 (SB_DFF): \processor.mem_wb_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3340 (SB_DFF): \processor.mem_wb_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3341 (SB_DFF): \processor.mem_wb_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3342 (SB_DFF): \processor.mem_wb_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3343 (SB_DFF): \processor.mem_wb_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3344 (SB_DFF): \processor.mem_wb_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3345 (SB_DFF): \processor.mem_wb_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3346 (SB_DFF): \processor.mem_wb_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3347 (SB_DFF): \processor.mem_wb_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3348 (SB_DFF): \processor.mem_wb_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3349 (SB_DFF): \processor.mem_wb_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3350 (SB_DFF): \processor.mem_wb_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3351 (SB_DFF): \processor.mem_wb_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3352 (SB_DFF): \processor.mem_wb_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3353 (SB_DFF): \processor.mem_wb_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3354 (SB_DFF): \processor.mem_wb_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3355 (SB_DFF): \processor.mem_wb_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3356 (SB_DFF): \processor.mem_wb_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3357 (SB_DFF): \processor.mem_wb_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3358 (SB_DFF): \processor.mem_wb_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3359 (SB_DFF): \processor.mem_wb_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3360 (SB_DFF): \processor.mem_wb_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3361 (SB_DFF): \processor.mem_wb_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3362 (SB_DFF): \processor.mem_wb_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3363 (SB_DFF): \processor.mem_wb_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3364 (SB_DFF): \processor.mem_wb_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFFE): \data_mem_inst.state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3292 (SB_DFF): \processor.id_ex_reg.data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2853 (SB_DFFE): \processor.branch_predictor_FSM.s [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3365 (SB_DFF): \processor.mem_wb_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6443 (SB_DFF): \processor.ex_mem_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6444 (SB_DFF): \processor.ex_mem_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6445 (SB_DFF): \processor.ex_mem_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6446 (SB_DFF): \processor.ex_mem_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6447 (SB_DFF): \processor.ex_mem_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6448 (SB_DFF): \processor.ex_mem_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6449 (SB_DFF): \processor.ex_mem_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6450 (SB_DFF): \processor.ex_mem_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6451 (SB_DFF): \processor.ex_mem_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6452 (SB_DFF): \processor.ex_mem_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6453 (SB_DFF): \processor.ex_mem_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6454 (SB_DFF): \processor.ex_mem_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6455 (SB_DFF): \processor.ex_mem_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6456 (SB_DFF): \processor.ex_mem_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6457 (SB_DFF): \processor.ex_mem_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6458 (SB_DFF): \processor.ex_mem_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6459 (SB_DFF): \processor.ex_mem_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6460 (SB_DFF): \processor.ex_mem_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6461 (SB_DFF): \processor.ex_mem_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6462 (SB_DFF): \processor.ex_mem_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6463 (SB_DFF): \processor.ex_mem_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6464 (SB_DFF): \processor.ex_mem_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6465 (SB_DFF): \processor.ex_mem_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6466 (SB_DFF): \processor.ex_mem_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6467 (SB_DFF): \processor.ex_mem_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6468 (SB_DFF): \processor.ex_mem_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6469 (SB_DFF): \processor.ex_mem_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6470 (SB_DFF): \processor.ex_mem_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6471 (SB_DFF): \processor.ex_mem_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6472 (SB_DFF): \processor.ex_mem_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6473 (SB_DFF): \processor.ex_mem_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6474 (SB_DFF): \processor.ex_mem_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6475 (SB_DFF): \processor.ex_mem_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6476 (SB_DFF): \processor.ex_mem_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6477 (SB_DFF): \processor.ex_mem_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6478 (SB_DFF): \processor.ex_mem_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6479 (SB_DFF): \processor.ex_mem_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6480 (SB_DFF): \processor.ex_mem_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6481 (SB_DFF): \processor.ex_mem_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6482 (SB_DFF): \processor.ex_mem_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6483 (SB_DFF): \processor.ex_mem_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6484 (SB_DFF): \processor.ex_mem_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6485 (SB_DFF): \processor.ex_mem_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6486 (SB_DFF): \processor.ex_mem_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6487 (SB_DFF): \processor.ex_mem_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6488 (SB_DFF): \processor.ex_mem_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6489 (SB_DFF): \processor.ex_mem_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6490 (SB_DFF): \processor.ex_mem_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6491 (SB_DFF): \processor.ex_mem_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6492 (SB_DFF): \processor.ex_mem_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6493 (SB_DFF): \processor.ex_mem_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6494 (SB_DFF): \processor.ex_mem_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6495 (SB_DFF): \processor.ex_mem_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6496 (SB_DFF): \processor.ex_mem_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6497 (SB_DFF): \processor.ex_mem_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6498 (SB_DFF): \processor.ex_mem_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6499 (SB_DFF): \processor.ex_mem_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6500 (SB_DFF): \processor.ex_mem_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6501 (SB_DFF): \processor.ex_mem_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6502 (SB_DFF): \processor.ex_mem_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6503 (SB_DFF): \processor.ex_mem_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6504 (SB_DFF): \processor.ex_mem_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6505 (SB_DFF): \processor.ex_mem_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6506 (SB_DFF): \processor.ex_mem_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6507 (SB_DFF): \processor.ex_mem_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6508 (SB_DFF): \processor.ex_mem_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3278 (SB_DFF): \processor.id_ex_reg.data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3279 (SB_DFF): \processor.id_ex_reg.data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3280 (SB_DFF): \processor.id_ex_reg.data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3281 (SB_DFF): \processor.id_ex_reg.data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3282 (SB_DFF): \processor.id_ex_reg.data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1228 (SB_DFFE): \data_mem_inst.state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2246 (SB_DFF): \processor.if_id_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2247 (SB_DFF): \processor.if_id_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2248 (SB_DFF): \processor.if_id_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2249 (SB_DFF): \processor.if_id_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2250 (SB_DFF): \processor.if_id_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2251 (SB_DFF): \processor.if_id_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2252 (SB_DFF): \processor.if_id_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2253 (SB_DFF): \processor.if_id_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2254 (SB_DFF): \processor.if_id_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2255 (SB_DFF): \processor.if_id_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2256 (SB_DFF): \processor.if_id_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2257 (SB_DFF): \processor.if_id_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2258 (SB_DFF): \processor.if_id_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2259 (SB_DFF): \processor.if_id_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2260 (SB_DFF): \processor.if_id_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2261 (SB_DFF): \processor.if_id_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2262 (SB_DFF): \processor.if_id_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2263 (SB_DFF): \processor.if_id_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2264 (SB_DFF): \processor.if_id_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2265 (SB_DFF): \processor.if_id_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2266 (SB_DFF): \processor.if_id_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2267 (SB_DFF): \processor.if_id_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2268 (SB_DFF): \processor.if_id_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2269 (SB_DFF): \processor.if_id_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2270 (SB_DFF): \processor.if_id_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2271 (SB_DFF): \processor.if_id_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2272 (SB_DFF): \processor.if_id_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2273 (SB_DFF): \processor.if_id_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2274 (SB_DFF): \processor.if_id_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2275 (SB_DFF): \processor.if_id_reg.data_out [30] = 0

27.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$2667 (A=\processor.control_unit.Jump, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3127 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6397 (A=\processor.id_ex_reg.data_out [0], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6438 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6402 (A=\processor.id_ex_reg.data_out [5], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$1239 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6401 (A=\processor.id_ex_reg.data_out [4], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$1240 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2176 (A=\inst_mem.out [0], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2277 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2177 (A=\inst_mem.out [1], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2278 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2178 (A=\inst_mem.out [2], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2279 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2179 (A=\inst_mem.out [3], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2280 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2180 (A=\inst_mem.out [4], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2281 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2181 (A=\inst_mem.out [5], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2282 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2196 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3009 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2182 (A=\inst_mem.out [6], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2283 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2184 (A=\inst_mem.out [8], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2285 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2185 (A=\inst_mem.out [9], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2286 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2186 (A=\inst_mem.out [10], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2287 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2187 (A=\inst_mem.out [11], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2288 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2188 (A=\inst_mem.out [12], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2289 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2189 (A=\inst_mem.out [13], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2290 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2190 (A=\inst_mem.out [14], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2291 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2191 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2292 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2192 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2293 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2193 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2294 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2194 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2295 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2195 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2296 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2196 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2297 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2197 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2298 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2198 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2299 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2199 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2300 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2200 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2301 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2201 (A=\inst_mem.out [25], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2302 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2202 (A=\inst_mem.out [26], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2303 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2203 (A=\inst_mem.out [27], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2304 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2204 (A=\inst_mem.out [28], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2305 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2205 (A=\inst_mem.out [29], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2306 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2206 (A=\inst_mem.out [30], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2307 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2207 (A=\inst_mem.out [31], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2308 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6403 (A=\processor.id_ex_reg.data_out [6], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6442 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2192 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3005 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2193 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3006 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2194 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3007 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2191 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3004 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2195 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3008 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2197 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3010 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2198 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3011 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2199 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3012 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6399 (A=\processor.id_ex_reg.data_out [2], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6440 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2668 (A=\processor.control_unit.MemtoReg, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3128 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2669 (A=\processor.control_unit.RegWrite, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3129 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2670 (A=\processor.control_unit.MemWrite, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3131 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2671 (A=\processor.control_unit.MemRead, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3132 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2672 (A=\processor.control_unit.Branch, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3133 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2673 (A=\processor.control_unit.Auipc, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3135 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2674 (A=\processor.control_unit.Lui, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3136 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2675 (A=\processor.control_unit.ALUSrc, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3137 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2676 (A=\processor.control_unit.Jalr, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3138 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7324 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$2484_Y, S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3267 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7325 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$2485_Y, S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3268 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7326 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$2486_Y, S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3269 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7327 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$2487_Y, S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3270 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7328 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7230 [2], S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3271 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7329 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7221 [2], S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3272 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7330 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7212 [2], S=$techmap$techmap\processor.alu_control.$procmux$531.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$2475_Y) into $auto$simplemap.cc:420:simplemap_dff$3273 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2183 (A=\inst_mem.out [7], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2284 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2200 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3013 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6398 (A=\processor.id_ex_reg.data_out [1], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6439 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6404 (A=\processor.id_ex_reg.data_out [7], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6443 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6405 (A=\processor.id_ex_reg.data_out [8], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6444 (SB_DFF).

27.40. Executing ICE40_OPT pass (performing simple optimizations).

27.40.1. Running ICE40 specific optimizations.

27.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~25 debug messages>

27.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~633 debug messages>
Removed a total of 211 cells.

27.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

27.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 44 unused cells and 2395 unused wires.
<suppressed ~45 debug messages>

27.40.6. Rerunning OPT passes. (Removed registers in this run.)

27.40.7. Running ICE40 specific optimizations.

27.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~43 debug messages>

27.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

27.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.40.12. Rerunning OPT passes. (Removed registers in this run.)

27.40.13. Running ICE40 specific optimizations.

27.40.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

27.40.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

27.40.16. Executing OPT_RMDFF pass (remove dff with constant values).

27.40.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27.40.18. Finished OPT passes. (There is nothing left to do.)

27.41. Executing TECHMAP pass (map to technology primitives).

27.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

27.41.2. Continuing TECHMAP pass.
No more expansions possible.

27.42. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_FF_'.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Successfully finished Verilog frontend.

27.43. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

27.44. Executing ABC9 pass.

27.44.1. Executing ABC9_OPS pass (helper functions for ABC9).

27.44.2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

27.44.3. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~1231 debug messages>

27.44.4. Executing ABC9_OPS pass (helper functions for ABC9).

27.44.5. Executing ABC9_OPS pass (helper functions for ABC9).

27.44.6. Executing FLATTEN pass (flatten design).
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
<suppressed ~7 debug messages>
No more expansions possible.

27.44.7. Executing TECHMAP pass (map to technology primitives).

27.44.7.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.44.7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
No more expansions possible.
<suppressed ~8 debug messages>

27.44.8. Executing OPT pass (performing simple optimizations).

27.44.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.
<suppressed ~4 debug messages>

27.44.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

27.44.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.44.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

27.44.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

27.44.8.6. Executing OPT_RMDFF pass (remove dff with constant values).

27.44.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

27.44.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

27.44.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.44.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.44.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

27.44.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

27.44.8.13. Executing OPT_RMDFF pass (remove dff with constant values).

27.44.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..

27.44.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

27.44.8.16. Finished OPT passes. (There is nothing left to do.)

27.44.9. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 2566 cells with 15541 new cells, skipped 2337 cells.
  replaced 3 cell types:
     807 $_OR_
      69 $_XOR_
    1690 $_MUX_
  not replaced 14 cell types:
     149 $_NOT_
     303 $_AND_
      61 SB_DFFSR
     153 SB_DFFE
     359 SB_DFF
       1 SB_DFFN
      10 SB_RAM40_4K
       2 SB_MAC16
       1 SB_HFOSC
       1 SB_PLL40_CORE
       2 SB_DFFESR
       4 SB_DFFSS
      64 $__ICE40_CARRY_WRAPPER
    1227 $__ABC9_DELAY
Module top$holes: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

27.44.9.1. Executing ABC9_OPS pass (helper functions for ABC9).

27.44.9.2. Executing ABC9_OPS pass (helper functions for ABC9).

27.44.9.3. Executing XAIGER backend.
<suppressed ~753 debug messages>
Extracted 6387 AND gates and 18700 wires from module `top' to a netlist network with 774 inputs and 1343 outputs.

27.44.9.4. Executing ABC9_EXE pass (technology mapping using ABC9).

27.44.9.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    774/   1343  and =    4950  lev =   42 (2.52)  mem = 0.13 MB  box = 1291  bb = 1227
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    774/   1343  and =    6791  lev =   54 (2.04)  mem = 0.16 MB  ch =  949  box = 1291  bb = 1227
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    6791.  Ch =   859.  Total mem =    1.62 MB. Peak cut mem =    0.13 MB.
ABC: P:  Del = 10359.00.  Ar =    1777.0.  Edge =     6210.  Cut =    46049.  T =     0.01 sec
ABC: P:  Del = 10359.00.  Ar =    1707.0.  Edge =     6311.  Cut =    43460.  T =     0.01 sec
ABC: P:  Del = 10359.00.  Ar =    1527.0.  Edge =     4946.  Cut =    46846.  T =     0.01 sec
ABC: F:  Del = 10359.00.  Ar =    1447.0.  Edge =     4691.  Cut =    43191.  T =     0.01 sec
ABC: A:  Del = 10359.00.  Ar =    1418.0.  Edge =     4521.  Cut =    42229.  T =     0.01 sec
ABC: A:  Del = 10359.00.  Ar =    1414.0.  Edge =     4515.  Cut =    42557.  T =     0.01 sec
ABC: Total time =     0.06 sec
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    774/   1343  and =    4081  lev =   36 (2.03)  mem = 0.12 MB  box = 1291  bb = 1227
ABC: Mapping (K=4)  :  lut =   1413  edge =    4500  lev =   16 (1.11)  levB =   42  mem = 0.06 MB
ABC: LUT = 1413 : 2=142 10.0 %  3=868 61.4 %  4=403 28.5 %  Ave = 3.18
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 1.94 seconds, total: 1.94 seconds

27.44.9.6. Executing AIGER frontend.
<suppressed ~4247 debug messages>
Removed 6054 unused cells and 11549 unused wires.

27.44.9.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:     1415
ABC RESULTS:   $__ICE40_CARRY_WRAPPER cells:       64
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:      743
Removing temp directory.

27.45. Executing ICE40_WRAPCARRY pass (wrap carries).

27.46. Executing TECHMAP pass (map to technology primitives).

27.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

27.46.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 226 unused cells and 19653 unused wires.

27.47. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:     1480
  1-LUT                2
  2-LUT              143
  3-LUT              932
  4-LUT              403

Eliminating LUTs.
Number of LUTs:     1480
  1-LUT                2
  2-LUT              143
  3-LUT              932
  4-LUT              403

Combining LUTs.
Number of LUTs:     1475
  1-LUT                2
  2-LUT              138
  3-LUT              927
  4-LUT              408

Eliminated 0 LUTs.
Combined 5 LUTs.
<suppressed ~7508 debug messages>

27.48. Executing TECHMAP pass (map to technology primitives).

27.48.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

27.48.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010000100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11011000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110010101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001000101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011100010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100101101111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010000110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000010101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010110101111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100000100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
No more expansions possible.
<suppressed ~3490 debug messages>
Removed 0 unused cells and 2955 unused wires.

27.49. Executing AUTONAME pass.
Renamed 14044 objects in module top (44 iterations).
<suppressed ~3624 debug messages>

27.50. Executing HIERARCHY pass (managing design hierarchy).

27.50.1. Analyzing design hierarchy..
Top module:  \top

27.50.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

27.51. Printing statistics.

=== top ===

   Number of wires:               1677
   Number of wire bits:           5502
   Number of public wires:        1677
   Number of public wire bits:    5502
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2131
     SB_CARRY                       62
     SB_DFF                        359
     SB_DFFE                       153
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                       61
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1475
     SB_MAC16                        2
     SB_PLL40_CORE                   1
     SB_RAM40_4K                    10

27.52. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.processor.immediate_generator.imm has an unprocessed 'init' attribute.
found and reported 1 problems.

28. Printing statistics.

=== top ===

   Number of wires:               1677
   Number of wire bits:           5502
   Number of public wires:        1677
   Number of public wire bits:    5502
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2131
     SB_CARRY                       62
     SB_DFF                        359
     SB_DFFE                       153
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                       61
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1475
     SB_MAC16                        2
     SB_PLL40_CORE                   1
     SB_RAM40_4K                    10

29. Executing JSON backend.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 441240d0ff, CPU: user 4.14s system 0.25s, MEM: 122.81 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 17% 28x opt_clean (0 sec), 16% 32x opt_expr (0 sec), ...
