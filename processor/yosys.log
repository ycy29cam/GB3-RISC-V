
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/new_sail.ys' --

1. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/RAM.v
Parsing Verilog input from `verilog/RAM.v' to AST representation.
Generating RTLIL representation for module `\ice40_ram40_4k'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\dsp_adder'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\full_adder'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Warning: wire '\unsigned_lt' is assigned in a block at verilog/alu.v:162.3-162.67.
Note: Assuming pure combinatorial block at verilog/alu.v:92.2-159.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
verilog/alu.v:162: Warning: Identifier `\unsigned_lt' is implicitly declared.
Note: Assuming pure combinatorial block at verilog/alu.v:161.2-173.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/dsp_adder.v
Parsing Verilog input from `verilog/dsp_adder.v' to AST representation.
Generating RTLIL representation for module `\adder_dsp'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

21. Executing HIERARCHY pass (managing design hierarchy).

21.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Parameter 1 (\WIDTH) = 9

21.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=9'.
Parameter 1 (\WIDTH) = 5

21.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 5
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=5'.
Parameter 1 (\WIDTH) = 5
Found cached RTLIL representation for module `$paramod\mux2to1\WIDTH=5'.
Parameter 1 (\WIDTH) = 11

21.4. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 11
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=11'.

21.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         $paramod\mux2to1\WIDTH=5
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter

21.6. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         $paramod\mux2to1\WIDTH=5
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Removing unused module `\adder'.
Removing unused module `\ice40_ram40_4k'.
Removed 2 unused modules.

22. Executing PROC pass (convert processes to netlists).

22.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$294'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$259'.
Cleaned up 0 empty switches.

22.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$253 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$203 in module data_mem.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$40 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$40 in module ALUControl.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:161$27 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:92$16 in module alu.
Removed a total of 5 dead cases.

22.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 35 assignments to connections.

22.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$270'.
  Set init value: \outAddr = 0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$268'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$266'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$264'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$262'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$254'.
  Set init value: \imm = 0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$218'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$217'.
  Set init value: \state = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$66'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$41'.
  Set init value: \ALUCtl = 7'0000000
Found init rule in `\alu.$proc$verilog/alu.v:0$39'.
  Set init value: \ALUOut = 0
  Set init value: \Branch_Enable = 1'0

22.5. Executing PROC_ARST pass (detect async resets in processes).

22.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$toplevel.v:52$297'.
Creating decoders for process `\top.$proc$toplevel.v:51$296'.
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$273'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$272_EN[31:0]$276
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$272_DATA[31:0]$275
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$272_ADDR[4:0]$274
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$270'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$269'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$268'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$267'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$266'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$265'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$264'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$263'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$262'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$261'.
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem.v:74$255'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$254'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$253'.
     1/1: $1\imm[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$218'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$217'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$203'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$134_EN[31:0]$206
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$134_DATA[31:0]$205
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$134_ADDR[31:0]$204
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$199'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$66'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$51'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:92$50'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$41'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$40'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:0$39'.
Creating decoders for process `\alu.$proc$verilog/alu.v:161$27'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:92$16'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\csr_file.$proc$verilog/CSR.v:57$2'.
     1/3: $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5
     2/3: $0$memwr$\csr_file$verilog/CSR.v:59$1_DATA[31:0]$4
     3/3: $0$memwr$\csr_file$verilog/CSR.v:59$1_ADDR[11:0]$3

22.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:52$297'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:51$296'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$253'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$40'.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:161$27'.
No latch inferred for signal `\alu.\unsigned_lt' from process `\alu.$proc$verilog/alu.v:161$27'.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:92$16'.

22.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$528' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$529' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$530' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$531' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$532' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$533' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$534' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$272_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$535' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$272_DATA' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$536' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$272_EN' using process `\regfile.$proc$verilog/register_file.v:95$273'.
  created $dff cell `$procdff$537' with positive edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$269'.
  created $dff cell `$procdff$538' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$267'.
  created $dff cell `$procdff$539' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$265'.
  created $dff cell `$procdff$540' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$263'.
  created $dff cell `$procdff$541' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$261'.
  created $dff cell `$procdff$542' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem.v:74$255'.
  created $dff cell `$procdff$543' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$544' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$545' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$546' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$547' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$548' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$549' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$550' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$551' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$552' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$134_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$553' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$134_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$554' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$134_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$203'.
  created $dff cell `$procdff$555' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$199'.
  created $dff cell `$procdff$556' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$51'.
  created $dff cell `$procdff$557' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:92$50'.
  created $dff cell `$procdff$558' with negative edge clock.
Creating register for signal `\csr_file.\rdVal_CSR' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$559' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_ADDR' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$560' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_DATA' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$561' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_EN' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$562' with positive edge clock.

22.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$toplevel.v:52$297'.
Removing empty process `top.$proc$toplevel.v:51$296'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$273'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$273'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$270'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$269'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$268'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$267'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$266'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$265'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$264'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$263'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$262'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$261'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:74$255'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$254'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$253'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$253'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$218'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$217'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$203'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$203'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$199'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$199'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$66'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:101$51'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$51'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:92$50'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$41'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$40'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$40'.
Removing empty process `alu.$proc$verilog/alu.v:0$39'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:161$27'.
Removing empty process `alu.$proc$verilog/alu.v:161$27'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:92$16'.
Removing empty process `alu.$proc$verilog/alu.v:92$16'.
Found and cleaned up 1 empty switch in `\csr_file.$proc$verilog/CSR.v:57$2'.
Removing empty process `csr_file.$proc$verilog/CSR.v:57$2'.
Cleaned up 21 empty switches.

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module top.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module program_counter.
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module mux2to1.
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module imm_gen.
Optimizing module ForwardingUnit.
<suppressed ~8 debug messages>
Optimizing module adder_dsp.
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module sign_mask_gen.
Optimizing module cpu.
Optimizing module control.
Optimizing module branch_predictor.
Optimizing module branch_decision.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module full_adder.
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module dsp_adder.
Optimizing module $paramod\mux2to1\WIDTH=5.
Optimizing module csr_file.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\top'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\alu'.
<suppressed ~15 debug messages>
Finding identical cells in module `\full_adder'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=5'.
Finding identical cells in module `\csr_file'.
Removed a total of 93 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$433.
    dead port 2/2 on $mux $procmux$472.
    dead port 2/2 on $mux $procmux$431.
    dead port 2/2 on $mux $procmux$423.
    dead port 2/2 on $mux $procmux$458.
    dead port 2/2 on $mux $procmux$410.
    dead port 2/2 on $mux $procmux$408.
    dead port 2/2 on $mux $procmux$488.
    dead port 2/2 on $mux $procmux$394.
    dead port 2/2 on $mux $procmux$447.
    dead port 2/2 on $mux $procmux$392.
    dead port 2/2 on $mux $procmux$383.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~37 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \top.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$301:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$301_Y
      New ports: A=1'0, B=1'1, Y=$procmux$301_Y [0]
      New connections: $procmux$301_Y [31:1] = { $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] $procmux$301_Y [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$308: { $procmux$314_CMP $procmux$313_CMP $auto$opt_reduce.cc:134:opt_mux$564 $procmux$310_CMP $procmux$309_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$315:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$315_Y
      New ports: A=1'0, B=1'1, Y=$procmux$315_Y [0]
      New connections: $procmux$315_Y [31:1] = { $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] $procmux$315_Y [0] }
    New ctrl vector for $pmux cell $procmux$350: { $procmux$361_CMP $procmux$358_CMP $auto$opt_reduce.cc:134:opt_mux$566 }
    New ctrl vector for $pmux cell $procmux$362: { $procmux$361_CMP $auto$opt_reduce.cc:134:opt_mux$568 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \cpu.
  Optimizing cells in module \control.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$466: $auto$opt_reduce.cc:134:opt_mux$570
    New ctrl vector for $pmux cell $procmux$414: { $procmux$487_CMP $procmux$486_CMP $auto$opt_reduce.cc:134:opt_mux$572 $procmux$485_CMP $procmux$484_CMP $procmux$483_CMP $procmux$482_CMP }
    New ctrl vector for $pmux cell $procmux$491: { $auto$opt_reduce.cc:134:opt_mux$574 $procmux$497_CMP $procmux$496_CMP $procmux$495_CMP $procmux$494_CMP $procmux$493_CMP $procmux$492_CMP }
    New ctrl vector for $pmux cell $procmux$438: { $procmux$487_CMP $auto$opt_reduce.cc:134:opt_mux$576 $procmux$485_CMP $procmux$483_CMP $procmux$482_CMP $procmux$486_CMP $procmux$484_CMP }
    New ctrl vector for $pmux cell $procmux$454: $auto$opt_reduce.cc:134:opt_mux$578
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$509: { $procmux$521_CMP $auto$opt_reduce.cc:134:opt_mux$582 $procmux$517_CMP $procmux$516_CMP $procmux$515_CMP $procmux$514_CMP $procmux$513_CMP $procmux$512_CMP $auto$opt_reduce.cc:134:opt_mux$580 $procmux$510_CMP }
  Optimizing cells in module \alu.
  Optimizing cells in module \full_adder.
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module $paramod\mux2to1\WIDTH=5.
  Optimizing cells in module \csr_file.
    Consolidated identical input bits for $mux cell $procmux$522:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$522_Y
      New ports: A=1'0, B=1'1, Y=$procmux$522_Y [0]
      New connections: $procmux$522_Y [31:1] = { $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] $procmux$522_Y [0] }
  Optimizing cells in module \csr_file.
Performed a total of 12 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\top'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\control'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\alu'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=5'.
Finding identical cells in module `\csr_file'.
Removed a total of 3 cells.

23.6. Executing OPT_RMDFF pass (remove dff with constant values).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=5..
Finding unused cells or wires in module \csr_file..
Removed 0 unused cells and 283 unused wires.
<suppressed ~25 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=5.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=5.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=5'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

23.13. Executing OPT_RMDFF pass (remove dff with constant values).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=5..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=5.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Printing statistics.

=== $paramod\mux2to1\WIDTH=11 ===

   Number of wires:                  4
   Number of wire bits:             34
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== $paramod\mux2to1\WIDTH=5 ===

   Number of wires:                  4
   Number of wire bits:             16
   Number of public wires:           4
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== $paramod\mux2to1\WIDTH=9 ===

   Number of wires:                  4
   Number of wire bits:             28
   Number of public wires:           4
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== ALUControl ===

   Number of wires:                 35
   Number of wire bits:             98
   Number of public wires:           3
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $eq                            18
     $logic_not                      1
     $mux                            2
     $not                            1
     $pmux                           7
     $reduce_or                      4

=== ForwardingUnit ===

   Number of wires:                 38
   Number of wire bits:             87
   Number of public wires:          15
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $eq                             6
     $logic_and                     11
     $logic_or                       2
     $mux                            4
     $ne                             2
     $reduce_bool                    2

=== adder_dsp ===

   Number of wires:                  7
   Number of wire bits:            131
   Number of public wires:           7
   Number of public wire bits:     131
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== alu ===

   Number of wires:                 47
   Number of wire bits:            518
   Number of public wires:           9
   Number of public wire bits:     170
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $add                            1
     $and                            4
     $eq                            17
     $logic_not                      3
     $logic_or                       1
     $mux                            2
     $not                            5
     $or                             2
     $pmux                           2
     $reduce_or                      2
     $shl                            1
     $shr                            1
     $sshr                           1
     $xor                            1
     full_adder                      1

=== branch_decision ===

   Number of wires:                 10
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            3
     $logic_not                      2
     $or                             1

=== branch_predictor ===

   Number of wires:                 21
   Number of wire bits:            116
   Number of public wires:          10
   Number of public wire bits:     104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $add                            1
     $and                            6
     $dff                            2
     $logic_not                      1
     $mux                            2
     $or                             4

=== control ===

   Number of wires:                 37
   Number of wire bits:             43
   Number of public wires:          13
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $and                           24
     $not                            7
     $or                             5

=== cpu ===

   Number of wires:                 74
   Number of wire bits:           1676
   Number of public wires:          72
   Number of public wire bits:    1674
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $and                            1
     $or                             4
     $paramod\mux2to1\WIDTH=11       1
     $paramod\mux2to1\WIDTH=5        2
     $paramod\mux2to1\WIDTH=9        1
     ALUControl                      1
     ForwardingUnit                  1
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     csr_file                        1
     dsp_adder                       2
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        20
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== csr_file ===

   Number of wires:                 13
   Number of wire bits:            274
   Number of public wires:           6
   Number of public wire bits:      90
   Number of memories:               1
   Number of memory bits:        32768
   Number of processes:              0
   Number of cells:                  9
     $dff                            4
     $memrd                          1
     $memwr                          1
     $mux                            3

=== data_mem ===

   Number of wires:                 97
   Number of wire bits:           1480
   Number of public wires:          48
   Number of public wire bits:     715
   Number of memories:               1
   Number of memory bits:         6912
   Number of processes:              0
   Number of cells:                 84
     $and                           13
     $dff                           13
     $eq                             4
     $logic_and                      1
     $logic_not                      1
     $logic_or                       1
     $meminit                        1
     $memrd                          1
     $memwr                          1
     $mux                           37
     $not                            4
     $or                             3
     $pmux                           2
     $reduce_or                      1
     $sub                            1

=== dsp_adder ===

   Number of wires:                  4
   Number of wire bits:            128
   Number of public wires:           4
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     adder_dsp                       1

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== full_adder ===

   Number of wires:                  5
   Number of wire bits:            129
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $add                            2

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== imm_gen ===

   Number of wires:                  9
   Number of wire bits:             71
   Number of public wires:           2
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $eq                             6
     $pmux                           1
     $reduce_or                      1

=== instruction_memory ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               1
   Number of memory bits:       131072
   Number of processes:              0
   Number of cells:                  3
     $dff                            1
     $meminit                        1
     $memrd                          1

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mux                            1

=== program_counter ===

   Number of wires:                  3
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== regfile ===

   Number of wires:                 32
   Number of wire bits:            436
   Number of public wires:          15
   Number of public wire bits:     225
   Number of memories:               1
   Number of memory bits:         1024
   Number of processes:              0
   Number of cells:                 28
     $and                            4
     $dff                           10
     $eq                             2
     $logic_and                      1
     $meminit                        1
     $memrd                          2
     $memwr                          1
     $mux                            5
     $reduce_bool                    2

=== sign_mask_gen ===

   Number of wires:                  4
   Number of wire bits:              9
   Number of public wires:           2
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            3
     $xor                            1

=== top ===

   Number of wires:                 14
   Number of wire bits:            179
   Number of public wires:          14
   Number of public wire bits:     179
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $mux                            1
     SB_HFOSC                        1
     cpu                             1
     data_mem                        1
     instruction_memory              1

=== design hierarchy ===

   top                               1
     cpu                             1
       $paramod\mux2to1\WIDTH=11      1
       $paramod\mux2to1\WIDTH=5      2
       $paramod\mux2to1\WIDTH=9      1
       ALUControl                    1
       ForwardingUnit                1
       alu                           1
         full_adder                  1
       branch_decision               1
       branch_predictor              1
       control                       1
       csr_file                      1
       dsp_adder                     2
         adder_dsp                   1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      20
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1

   Number of wires:                573
   Number of wire bits:           8872
   Number of public wires:         356
   Number of public wire bits:    7147
   Number of memories:               4
   Number of memory bits:       171776
   Number of processes:              0
   Number of cells:                339
     $add                            4
     $and                           57
     $dff                           35
     $eq                            53
     $logic_and                     13
     $logic_not                      8
     $logic_or                       4
     $meminit                        3
     $memrd                          5
     $memwr                          3
     $mux                           80
     $ne                             2
     $not                           20
     $or                            19
     $pmux                          12
     $reduce_bool                    4
     $reduce_or                      8
     $shl                            1
     $shr                            1
     $sshr                           1
     $sub                            1
     $xor                            2
     SB_HFOSC                        1
     SB_MAC16                        2

25. Executing SYNTH_ICE40 pass.

25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

25.2. Executing HIERARCHY pass (managing design hierarchy).

25.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         $paramod\mux2to1\WIDTH=5
Used module:         \mux2to1
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

25.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         $paramod\mux2to1\WIDTH=5
Used module:         \mux2to1
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

25.3. Executing PROC pass (convert processes to netlists).

25.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

25.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

25.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

25.3.4. Executing PROC_INIT pass (extract init attributes).

25.3.5. Executing PROC_ARST pass (detect async resets in processes).

25.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

25.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

25.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

25.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

25.4. Executing FLATTEN pass (flatten design).
Using template instruction_memory for cells of type instruction_memory.
Using template data_mem for cells of type data_mem.
Using template cpu for cells of type cpu.
Using template mux2to1 for cells of type mux2to1.
Using template branch_decision for cells of type branch_decision.
Using template control for cells of type control.
Using template $paramod\mux2to1\WIDTH=11 for cells of type $paramod\mux2to1\WIDTH=11.
Using template imm_gen for cells of type imm_gen.
Using template branch_predictor for cells of type branch_predictor.
Using template dsp_adder for cells of type dsp_adder.
Using template program_counter for cells of type program_counter.
Using template if_id for cells of type if_id.
Using template $paramod\mux2to1\WIDTH=5 for cells of type $paramod\mux2to1\WIDTH=5.
Using template regfile for cells of type regfile.
Using template ALUControl for cells of type ALUControl.
Using template sign_mask_gen for cells of type sign_mask_gen.
Using template id_ex for cells of type id_ex.
Using template ForwardingUnit for cells of type ForwardingUnit.
Using template alu for cells of type alu.
Using template $paramod\mux2to1\WIDTH=9 for cells of type $paramod\mux2to1\WIDTH=9.
Using template ex_mem for cells of type ex_mem.
Using template mem_wb for cells of type mem_wb.
Using template csr_file for cells of type csr_file.
Using template adder_dsp for cells of type adder_dsp.
Using template full_adder for cells of type full_adder.
<suppressed ~47 debug messages>
No more expansions possible.
Deleting now unused module $paramod\mux2to1\WIDTH=11.
Deleting now unused module $paramod\mux2to1\WIDTH=5.
Deleting now unused module $paramod\mux2to1\WIDTH=9.
Deleting now unused module ALUControl.
Deleting now unused module ForwardingUnit.
Deleting now unused module adder_dsp.
Deleting now unused module alu.
Deleting now unused module branch_decision.
Deleting now unused module branch_predictor.
Deleting now unused module control.
Deleting now unused module cpu.
Deleting now unused module csr_file.
Deleting now unused module data_mem.
Deleting now unused module dsp_adder.
Deleting now unused module ex_mem.
Deleting now unused module full_adder.
Deleting now unused module id_ex.
Deleting now unused module if_id.
Deleting now unused module imm_gen.
Deleting now unused module instruction_memory.
Deleting now unused module mem_wb.
Deleting now unused module mux2to1.
Deleting now unused module program_counter.
Deleting now unused module regfile.
Deleting now unused module sign_mask_gen.

25.5. Executing TRIBUF pass.

25.6. Executing DEMINOUT pass (demote inout ports to input or output).

25.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.9. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.\inst_mem.clk is used but has no driver.
found and reported 1 problems.

25.10. Executing OPT pass (performing simple optimizations).

25.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

25.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

25.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

25.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

25.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.10.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

25.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

25.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.10.16. Finished OPT passes. (There is nothing left to do.)

25.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 24 address bits (of 32) from memory init port top.$techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$215 (data_mem_inst.data_block).
Removed top 24 address bits (of 32) from memory read port top.$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$210 (data_mem_inst.data_block).
Removed top 24 address bits (of 32) from memory write port top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$216 (data_mem_inst.data_block).
Removed top 20 address bits (of 32) from memory init port top.$techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem.v:0$258 (inst_mem.instruction_memory).
Removed top 20 address bits (of 32) from memory read port top.$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:75$256 (inst_mem.instruction_memory).
Removed top 2 address bits (of 12) from memory read port top.$techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$6 (processor.ControlAndStatus_registers.csr_file).
Removed top 2 address bits (of 12) from memory write port top.$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$7 (processor.ControlAndStatus_registers.csr_file).
Removed top 27 address bits (of 32) from memory init port top.$techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$292 (processor.register_files.regfile).
Removed top 18 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$eq$verilog/data_mem.v:232$201 ($eq).
Removed top 24 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$553 ($dff).
Removed top 31 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$555 ($dff).
Removed cell top.$techmap\data_mem_inst.$procmux$317 ($mux).
Removed cell top.$techmap\data_mem_inst.$procmux$319 ($mux).
Removed top 31 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$358_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$363_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$364_CMP0 ($eq).
Removed top 19 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$214 ($sub).
Removed top 24 bits (of 32) from port Y of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$214 ($sub).
Removed top 2 bits (of 10) from port A of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$214 ($sub).
Removed top 12 bits (of 13) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:283$214 ($sub).
Removed top 1 bits (of 32) from mux cell top.$techmap\processor.immediate_generator.$procmux$308 ($pmux).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$311_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$312_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$313_CMP0 ($eq).
Removed top 31 bits (of 32) from FF cell top.$techmap\processor.register_files.$procdff$537 ($dff).
Removed cell top.$techmap\processor.register_files.$procmux$303 ($mux).
Removed cell top.$techmap\processor.register_files.$procmux$305 ($mux).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$379 ($pmux).
Removed top 1 bits (of 2) from port B of cell top.$techmap\processor.alu_control.$procmux$382_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$405 ($pmux).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$428 ($pmux).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$438 ($pmux).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$444_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$454 ($mux).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$466 ($mux).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$469_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$486_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$493_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$494_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$495_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$496_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$498_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$499_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$505_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$506_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$507_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$514_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$515_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$516_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$517_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$518_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$519_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$520_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell top.$techmap\processor.alu_main.$ternary$verilog/alu.v:117$19 ($mux).
Removed top 2 bits (of 12) from FF cell top.$techmap\processor.ControlAndStatus_registers.$procdff$560 ($dff).
Removed top 31 bits (of 32) from FF cell top.$techmap\processor.ControlAndStatus_registers.$procdff$562 ($dff).
Removed cell top.$techmap\processor.ControlAndStatus_registers.$procmux$524 ($mux).
Removed cell top.$techmap\processor.ControlAndStatus_registers.$procmux$526 ($mux).
Removed top 24 bits (of 32) from wire top.$techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$134_ADDR[31:0]$204.
Removed top 24 bits (of 32) from wire top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:283$134_ADDR.
Removed top 24 bits (of 32) from wire top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$211_Y.
Removed top 2 bits (of 12) from wire top.$techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$1_ADDR[11:0]$3.
Removed top 2 bits (of 12) from wire top.$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:59$1_ADDR.
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$4\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$5\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$6\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$8\ALUCtl[6:0].
Removed top 31 bits (of 32) from wire top.$techmap\processor.alu_main.$ternary$verilog/alu.v:117$19_Y.
Removed top 3 bits (of 32) from wire top.processor.RegB_mux.out.

25.12. Executing PEEPOPT pass (run peephole optimizers).

25.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

25.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $techmap\processor.alu_main.$sshr$verilog/alu.v:127$21 ($sshr):
    Found 7 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$515_CMP $techmap\processor.alu_main.$procmux$507_CMP $techmap\processor.alu_main.$procmux$506_CMP $techmap\processor.alu_main.$procmux$505_CMP $techmap\processor.alu_main.$procmux$504_CMP $techmap\processor.alu_main.$procmux$503_CMP $techmap\processor.alu_main.$procmux$502_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shr$verilog/alu.v:122$20 ($shr):
    Found 7 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$516_CMP $techmap\processor.alu_main.$procmux$507_CMP $techmap\processor.alu_main.$procmux$506_CMP $techmap\processor.alu_main.$procmux$505_CMP $techmap\processor.alu_main.$procmux$504_CMP $techmap\processor.alu_main.$procmux$503_CMP $techmap\processor.alu_main.$procmux$502_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shl$verilog/alu.v:132$22 ($shl):
    Found 7 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$514_CMP $techmap\processor.alu_main.$procmux$507_CMP $techmap\processor.alu_main.$procmux$506_CMP $techmap\processor.alu_main.$procmux$505_CMP $techmap\processor.alu_main.$procmux$504_CMP $techmap\processor.alu_main.$procmux$503_CMP $techmap\processor.alu_main.$procmux$502_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$210 ($memrd):
    Found 1 activation_patterns using ctrl signal $techmap\data_mem_inst.$procmux$349_CMP.
    No candidates found.

25.15. Executing TECHMAP pass (map to technology primitives).

25.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

25.15.2. Continuing TECHMAP pass.
No more expansions possible.

25.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

25.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

25.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\processor.alu_main.$add$verilog/alu.v:162$29 ($add).
  creating $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$10 ($add).
  creating $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$9 ($add).
  creating $macc model for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$64 ($add).
  merging $macc model for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$9 into $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$10.
  creating $alu model for $macc $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$64.
  creating $alu model for $macc $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$10.
  creating $alu model for $macc $techmap\processor.alu_main.$add$verilog/alu.v:162$29.
  creating $alu cell for $techmap\processor.alu_main.$add$verilog/alu.v:162$29: $auto$alumacc.cc:485:replace_alu$936
  creating $alu cell for $techmap\processor.alu_main.alu_full_adder.$add$verilog/adder.v:34$10: $auto$alumacc.cc:485:replace_alu$939
  creating $alu cell for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$64: $auto$alumacc.cc:485:replace_alu$942
  created 3 $alu and 0 $macc cells.

25.19. Executing OPT pass (performing simple optimizations).

25.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

25.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

25.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

25.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

25.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.19.9. Rerunning OPT passes. (Maybe there is more to do..)

25.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

25.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

25.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.19.16. Finished OPT passes. (There is nothing left to do.)

25.20. Executing FSM pass (extract and optimize FSM).

25.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.data_mem_inst.state as FSM state register:
    Register has an initialization value.

25.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25.21. Executing OPT pass (performing simple optimizations).

25.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

25.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.21.5. Finished fast OPT passes.

25.22. Executing MEMORY pass.

25.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

25.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$216' in module `\top': merged $dff to cell.
Checking cell `$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$7' in module `\top': merged $dff to cell.
Checking cell `$techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$293' in module `\top': merged $dff to cell.
Checking cell `$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$210' in module `\top': merged data $dff with rd enable to cell.
Checking cell `$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:75$256' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$6' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$280' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$281' in module `\top': merged data $dff to cell.

25.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 13 unused cells and 18 unused wires.
<suppressed ~14 debug messages>

25.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

25.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\data_mem_inst.data_block' in module `\top':
  $techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$215 ($meminit)
  $techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$216 ($memwr)
  $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$210 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\inst_mem.instruction_memory' in module `\top':
  $techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem.v:0$258 ($meminit)
  $techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem.v:75$256 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\processor.ControlAndStatus_registers.csr_file' in module `\top':
  $techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$7 ($memwr)
  $techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$6 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\processor.register_files.regfile' in module `\top':
  $techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$292 ($meminit)
  $techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$293 ($memwr)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$280 ($memrd)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$281 ($memrd)

25.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing top.data_mem_inst.data_block:
  Properties: ports=2 bits=6912 rports=1 wports=1 dbits=32 abits=8 words=216
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=40 dwaste=0 bwaste=640 waste=640 efficiency=84
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=640 efficiency=84
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=40 dwaste=0 bwaste=640 waste=640 efficiency=84
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=40 dwaste=0 bwaste=640 waste=640 efficiency=84
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=296 dwaste=0 bwaste=2368 waste=2368 efficiency=42
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2368 efficiency=42
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=808 dwaste=0 bwaste=3232 waste=3232 efficiency=21
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3232 efficiency=21
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1832 dwaste=0 bwaste=3664 waste=3664 efficiency=10
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3664 efficiency=10
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=296 dwaste=0 bwaste=2368 waste=2368 efficiency=42
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=808 dwaste=0 bwaste=3232 waste=3232 efficiency=21
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1832 dwaste=0 bwaste=3664 waste=3664 efficiency=10
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=296 dwaste=0 bwaste=2368 waste=2368 efficiency=42
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=808 dwaste=0 bwaste=3232 waste=3232 efficiency=21
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1832 dwaste=0 bwaste=3664 waste=3664 efficiency=10
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=10, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=21, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=42, cells=4, acells=1
    Efficiency for rule 1.1: efficiency=84, cells=2, acells=1
    Selected rule 1.1 with efficiency 84.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: data_mem_inst.data_block.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: data_mem_inst.data_block.1.0.0
Processing top.inst_mem.instruction_memory:
  Properties: ports=1 bits=131072 rports=1 wports=0 dbits=32 abits=12 words=4096
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \inst_mem.clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \inst_mem.clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \inst_mem.clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \inst_mem.clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=100, cells=32, acells=2
    Efficiency for rule 4.2: efficiency=100, cells=32, acells=4
    Efficiency for rule 4.1: efficiency=100, cells=32, acells=8
    Efficiency for rule 1.1: efficiency=100, cells=32, acells=16
    Selected rule 4.3 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \inst_mem.clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: inst_mem.instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 1 0>: inst_mem.instruction_memory.0.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: inst_mem.instruction_memory.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 1 0>: inst_mem.instruction_memory.1.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: inst_mem.instruction_memory.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 1 0>: inst_mem.instruction_memory.2.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: inst_mem.instruction_memory.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 1 0>: inst_mem.instruction_memory.3.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: inst_mem.instruction_memory.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 1 0>: inst_mem.instruction_memory.4.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: inst_mem.instruction_memory.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 1 0>: inst_mem.instruction_memory.5.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: inst_mem.instruction_memory.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 1 0>: inst_mem.instruction_memory.6.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: inst_mem.instruction_memory.7.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 1 0>: inst_mem.instruction_memory.7.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <8 0 0>: inst_mem.instruction_memory.8.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <8 1 0>: inst_mem.instruction_memory.8.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <9 0 0>: inst_mem.instruction_memory.9.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <9 1 0>: inst_mem.instruction_memory.9.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <10 0 0>: inst_mem.instruction_memory.10.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <10 1 0>: inst_mem.instruction_memory.10.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <11 0 0>: inst_mem.instruction_memory.11.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <11 1 0>: inst_mem.instruction_memory.11.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <12 0 0>: inst_mem.instruction_memory.12.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <12 1 0>: inst_mem.instruction_memory.12.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <13 0 0>: inst_mem.instruction_memory.13.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <13 1 0>: inst_mem.instruction_memory.13.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <14 0 0>: inst_mem.instruction_memory.14.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <14 1 0>: inst_mem.instruction_memory.14.1.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <15 0 0>: inst_mem.instruction_memory.15.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <15 1 0>: inst_mem.instruction_memory.15.1.0
Processing top.processor.ControlAndStatus_registers.csr_file:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: processor.ControlAndStatus_registers.csr_file.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: processor.ControlAndStatus_registers.csr_file.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: processor.ControlAndStatus_registers.csr_file.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: processor.ControlAndStatus_registers.csr_file.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: processor.ControlAndStatus_registers.csr_file.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: processor.ControlAndStatus_registers.csr_file.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: processor.ControlAndStatus_registers.csr_file.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: processor.ControlAndStatus_registers.csr_file.7.0.0
Processing top.processor.register_files.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: processor.register_files.regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: processor.register_files.regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: processor.register_files.regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: processor.register_files.regfile.1.0.1

25.25. Executing TECHMAP pass (map to technology primitives).

25.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

25.25.2. Continuing TECHMAP pass.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$19014fbdeda7ad4511817c32d2214212bc662a43\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$9e064f6e37aeb78e10c9bd19fb19ea0c425ea38c\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$70cfed7981be005f738366a184388daf208df0e1\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$cb5345b460b37a4a6a32745dac538f3f1be7a27a\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$e1c188e45ff4f1128864c637c460014ad8c3bf9e\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ce696dfe425ed69a6b4c636cbb431d1935004f32\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod\$__ICE40_RAM4K_M123\CFG_ABITS=10\CFG_DBITS=4\CLKPOL2=1\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$45ddf41466473d30a07597a8ecae3b8de4357dcd\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ff1028bcc1e4481e37d217039a7a22c36b224dc4\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$3d79d7681a7e03afcc4bfa4d43260bd4643bf415\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$c245ef8563b49ff5ccfd6556c0b38b4d70e4cb54\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$13da8648c92f0edb98de645c11965f77215ef06c\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$cc6ca150d79f920c790a7cdaafa4ba68c8f43516\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ba7fdc647d328b13830c1f81f29663fbf1e255b3\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ce35a28a501a8187327abdfc9e2c147dce1ac398\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$fd8cf84ef68584f63209683faf8a99dfb812be65\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$6b051920fb4087fbafa36d6b09c18600f80b0783\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$4023338899669acae12388d2b32e558bd212f520\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$0471dfd982f304ef9ed347df254619283e70aa45\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$1ff212df0864cb0b963343713225e42104bdf9cd\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$c580e88c60026da015257f05680f05599f0d3ee1\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$e960588dacff89b8f882c5a0277b8c8d527c9965\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$407658fdd751d3fea5e72d69c75d486567c56ba7\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$f455b86be4d5dc82ea14ad7ad9195510308552ee\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$842c49ca823cc037e14a0b9d25436be45104a880\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$a0a5f11473711f71da631b7270a26679a2fecb27\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$c8beb8be00ba5eb380c2302171f25af4d43debb5\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$8d3fa604ad979764d1d2c333168e9a4f104106db\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$96823fdd89e3a83a62d678f60f00339379e9310e\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$6a2e7c1984fefe5c6d878f4573b410dcbb402eab\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$a4d13595d3bd59293a01971d31f772285093a2d7\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$1f32ba3e434849de813055c19f11ae008841de37\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$d2d1989d9615287c0f409d1d5eef41718e6508e3\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$07906d03d793d4a430ef09a042bbace83e24dff2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$9039a8480ea3a239a452be7a016baa3c0409fbdc\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$ac97a470b573fe66fe0aa79cb57ea5d0bbe8b709\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$753bf6071d9890713f1463a9adb683684993e6b7\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$3f6daa14f9108e2ccd476b312073e0e929fda9bc\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$660e62b5541f5f3b6d63d08fd7a55b2ac79e2259\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$6a3ace86f5629c7dd30b3d99f1431781a335c2a0\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~1472 debug messages>

25.26. Executing ICE40_BRAMINIT pass.

25.27. Executing OPT pass (performing simple optimizations).

25.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~386 debug messages>

25.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

25.27.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$memory_bram.cc:1042:replace_cell$1072 ($dff) from module top.
Removing $auto$memory_bram.cc:1042:replace_cell$1135 ($dff) from module top.
Replaced 2 DFF cells.

25.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1211 unused wires.
<suppressed ~2 debug messages>

25.27.5. Rerunning OPT passes. (Removed registers in this run.)

25.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~16 debug messages>

25.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.27.8. Executing OPT_RMDFF pass (remove dff with constant values).

25.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 17 unused cells and 49 unused wires.
<suppressed ~18 debug messages>

25.27.10. Finished fast OPT passes.

25.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

25.29. Executing OPT pass (performing simple optimizations).

25.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

25.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [15:8] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:8] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] \data_mem_inst.word_buf [15:8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [7:0] }, B={ \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [7], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] \data_mem_inst.word_buf [7:0] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [31:24] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:24] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] \data_mem_inst.word_buf [31:24] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [23:16] }, B={ \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [23], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] \data_mem_inst.word_buf [23:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [31:16] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] \data_mem_inst.word_buf [31:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [15:0] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] \data_mem_inst.word_buf [15:0] }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$405:
      Old ports: A=3'010, B=3'110, Y=$auto$wreduce.cc:460:run$933 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:460:run$933 [2]
      New connections: $auto$wreduce.cc:460:run$933 [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$414:
      Old ports: A={ 4'0000 $auto$wreduce.cc:460:run$933 [2:0] }, B={ 25'0000101000011100010000000 $auto$wreduce.cc:460:run$932 [2:0] 14'00000010000000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0]
      New ports: A={ 1'0 $auto$wreduce.cc:460:run$933 [2:0] }, B={ 13'0101011110000 $auto$wreduce.cc:460:run$932 [2:0] 8'00010000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0] [3:0]
      New connections: $techmap\processor.alu_control.$7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$428:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:460:run$932 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:460:run$932 [2] $auto$wreduce.cc:460:run$932 [0] }
      New connections: $auto$wreduce.cc:460:run$932 [1] = $auto$wreduce.cc:460:run$932 [0]
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$454:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$930 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$930 [0]
      New connections: $auto$wreduce.cc:460:run$930 [3:1] = { $auto$wreduce.cc:460:run$930 [0] $auto$wreduce.cc:460:run$930 [0] 1'1 }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$466:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$929 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$929 [0]
      New connections: $auto$wreduce.cc:460:run$929 [3:1] = { $auto$wreduce.cc:460:run$929 [0] $auto$wreduce.cc:460:run$929 [0] 1'1 }
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$481:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$techmap\processor.alu_control.$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $techmap\processor.alu_control.$2\ALUCtl[6:0] [6:4] $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] }
      New connections: $techmap\processor.alu_control.$2\ALUCtl[6:0] [3:1] = { $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$184:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y, Y=\data_mem_inst.out1
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$183_Y [8] \data_mem_inst.word_buf [7:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$181_Y [8] \data_mem_inst.word_buf [15:8] }, Y=\data_mem_inst.out1 [8:0]
      New connections: \data_mem_inst.out1 [31:9] = { \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$189:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y, Y=\data_mem_inst.out2
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$188_Y [8] \data_mem_inst.word_buf [23:16] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$186_Y [8] \data_mem_inst.word_buf [31:24] }, Y=\data_mem_inst.out2 [8:0]
      New connections: \data_mem_inst.out2 [31:9] = { \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$194:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y, Y=\data_mem_inst.out3
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$193_Y [16] \data_mem_inst.word_buf [15:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$191_Y [16] \data_mem_inst.word_buf [31:16] }, Y=\data_mem_inst.out3 [16:0]
      New connections: \data_mem_inst.out3 [31:17] = { \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:209$196:
      Old ports: A=\data_mem_inst.out1, B=\data_mem_inst.out2, Y=\data_mem_inst.out5
      New ports: A=\data_mem_inst.out1 [8:0], B=\data_mem_inst.out2 [8:0], Y=\data_mem_inst.out5 [8:0]
      New connections: \data_mem_inst.out5 [31:9] = { \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] }
  Optimizing cells in module \top.
Performed a total of 16 changes.

25.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

25.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

25.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

25.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.29.9. Rerunning OPT passes. (Maybe there is more to do..)

25.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

25.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

25.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

25.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.29.16. Finished OPT passes. (There is nothing left to do.)

25.30. Executing ICE40_WRAPCARRY pass (wrap carries).

25.31. Executing TECHMAP pass (map to technology primitives).

25.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

25.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

25.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
No more expansions possible.
<suppressed ~1914 debug messages>

25.32. Executing OPT pass (performing simple optimizations).

25.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~799 debug messages>

25.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1365 debug messages>
Removed a total of 455 cells.

25.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

25.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 228 unused cells and 678 unused wires.
<suppressed ~229 debug messages>

25.32.5. Finished fast OPT passes.

25.33. Executing ICE40_OPT pass (performing simple optimizations).

25.33.1. Running ICE40 specific optimizations.

25.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~86 debug messages>

25.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

25.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.33.6. Rerunning OPT passes. (Removed registers in this run.)

25.33.7. Running ICE40 specific optimizations.

25.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

25.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.33.12. Finished OPT passes. (There is nothing left to do.)

25.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1549 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [0] -> \data_mem_inst.read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1550 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [1] -> \data_mem_inst.read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1551 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [2] -> \data_mem_inst.read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1552 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [3] -> \data_mem_inst.read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1553 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [4] -> \data_mem_inst.read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1554 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [5] -> \data_mem_inst.read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1555 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [6] -> \data_mem_inst.read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1556 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [7] -> \data_mem_inst.read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1557 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [8] -> \data_mem_inst.read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1558 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [9] -> \data_mem_inst.read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1559 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [10] -> \data_mem_inst.read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1560 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [11] -> \data_mem_inst.read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1561 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [12] -> \data_mem_inst.read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1562 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [13] -> \data_mem_inst.read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1563 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [14] -> \data_mem_inst.read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1564 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [15] -> \data_mem_inst.read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1565 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [16] -> \data_mem_inst.read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1566 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [17] -> \data_mem_inst.read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1567 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [18] -> \data_mem_inst.read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1568 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [19] -> \data_mem_inst.read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1569 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [20] -> \data_mem_inst.read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1570 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [21] -> \data_mem_inst.read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1571 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [22] -> \data_mem_inst.read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1572 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [23] -> \data_mem_inst.read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1573 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [24] -> \data_mem_inst.read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1574 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [25] -> \data_mem_inst.read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1575 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [26] -> \data_mem_inst.read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1576 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [27] -> \data_mem_inst.read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1577 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [28] -> \data_mem_inst.read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1578 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [29] -> \data_mem_inst.read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1579 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [30] -> \data_mem_inst.read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1580 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [31] -> \data_mem_inst.read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1581 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$362.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$2031_Y -> \data_mem_inst.clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1582 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [0] -> \data_mem_inst.state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1583 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [1] -> \data_mem_inst.state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1584 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [2] -> \data_mem_inst.state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1585 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [3] -> \data_mem_inst.state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1586 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [4] -> \data_mem_inst.state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1587 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [5] -> \data_mem_inst.state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1588 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [6] -> \data_mem_inst.state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1589 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [7] -> \data_mem_inst.state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1590 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [8] -> \data_mem_inst.state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1591 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [9] -> \data_mem_inst.state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1592 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [10] -> \data_mem_inst.state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1593 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [11] -> \data_mem_inst.state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1594 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [12] -> \data_mem_inst.state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1595 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [13] -> \data_mem_inst.state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1596 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [14] -> \data_mem_inst.state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1597 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [15] -> \data_mem_inst.state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1598 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [16] -> \data_mem_inst.state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1599 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [17] -> \data_mem_inst.state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1600 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [18] -> \data_mem_inst.state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1601 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [19] -> \data_mem_inst.state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1602 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [20] -> \data_mem_inst.state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1603 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [21] -> \data_mem_inst.state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1604 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [22] -> \data_mem_inst.state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1605 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [23] -> \data_mem_inst.state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1606 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [24] -> \data_mem_inst.state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1607 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [25] -> \data_mem_inst.state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1608 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [26] -> \data_mem_inst.state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1609 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [27] -> \data_mem_inst.state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1610 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [28] -> \data_mem_inst.state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1611 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [29] -> \data_mem_inst.state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1612 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [30] -> \data_mem_inst.state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1613 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$350.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1787_Y [31] -> \data_mem_inst.state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1614 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memread_buf[0:0] -> \data_mem_inst.memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1615 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memwrite_buf[0:0] -> \data_mem_inst.memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1616 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [0] -> \data_mem_inst.write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1617 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [1] -> \data_mem_inst.write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1618 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [2] -> \data_mem_inst.write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1619 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [3] -> \data_mem_inst.write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1620 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [4] -> \data_mem_inst.write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1621 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [5] -> \data_mem_inst.write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1622 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [6] -> \data_mem_inst.write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1623 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [7] -> \data_mem_inst.write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1624 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [8] -> \data_mem_inst.write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1625 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [9] -> \data_mem_inst.write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1626 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [10] -> \data_mem_inst.write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1627 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [11] -> \data_mem_inst.write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1628 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [12] -> \data_mem_inst.write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1629 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [13] -> \data_mem_inst.write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1630 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [14] -> \data_mem_inst.write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1631 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [15] -> \data_mem_inst.write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1632 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [16] -> \data_mem_inst.write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1633 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [17] -> \data_mem_inst.write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1634 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [18] -> \data_mem_inst.write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1635 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [19] -> \data_mem_inst.write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1636 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [20] -> \data_mem_inst.write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1637 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [21] -> \data_mem_inst.write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1638 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [22] -> \data_mem_inst.write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1639 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [23] -> \data_mem_inst.write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1640 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [24] -> \data_mem_inst.write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1641 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [25] -> \data_mem_inst.write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1642 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [26] -> \data_mem_inst.write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1643 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [27] -> \data_mem_inst.write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1644 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [28] -> \data_mem_inst.write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1645 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [29] -> \data_mem_inst.write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1646 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [30] -> \data_mem_inst.write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1647 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [31] -> \data_mem_inst.write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1648 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [0] -> \data_mem_inst.addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1649 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [1] -> \data_mem_inst.addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1650 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [2] -> \data_mem_inst.addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1651 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [3] -> \data_mem_inst.addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1652 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [4] -> \data_mem_inst.addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1653 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [5] -> \data_mem_inst.addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1654 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [6] -> \data_mem_inst.addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1655 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [7] -> \data_mem_inst.addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1656 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [8] -> \data_mem_inst.addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1657 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [9] -> \data_mem_inst.addr_buf [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1681 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [1] -> \data_mem_inst.sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1682 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [2] -> \data_mem_inst.sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1683 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [3] -> \data_mem_inst.sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1684 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [0] -> \data_mem_inst.led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1685 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [1] -> \data_mem_inst.led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1686 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [2] -> \data_mem_inst.led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1687 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [3] -> \data_mem_inst.led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1688 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [4] -> \data_mem_inst.led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1689 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [5] -> \data_mem_inst.led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1690 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [6] -> \data_mem_inst.led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1691 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [7] -> \data_mem_inst.led_reg [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2814 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [0] -> \processor.branch_predictor_FSM.s [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2815 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [1] -> \processor.branch_predictor_FSM.s [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2947 to $_DFFE_PP_ for \processor.PC.inAddr [0] -> \processor.PC.outAddr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2948 to $_DFFE_PP_ for \processor.PC.inAddr [1] -> \processor.PC.outAddr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2949 to $_DFFE_PP_ for \processor.PC.inAddr [2] -> \processor.PC.outAddr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2950 to $_DFFE_PP_ for \processor.PC.inAddr [3] -> \processor.PC.outAddr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2951 to $_DFFE_PP_ for \processor.PC.inAddr [4] -> \processor.PC.outAddr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2952 to $_DFFE_PP_ for \processor.PC.inAddr [5] -> \processor.PC.outAddr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2953 to $_DFFE_PP_ for \processor.PC.inAddr [6] -> \processor.PC.outAddr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2954 to $_DFFE_PP_ for \processor.PC.inAddr [7] -> \processor.PC.outAddr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2955 to $_DFFE_PP_ for \processor.PC.inAddr [8] -> \processor.PC.outAddr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2956 to $_DFFE_PP_ for \processor.PC.inAddr [9] -> \processor.PC.outAddr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2957 to $_DFFE_PP_ for \processor.PC.inAddr [10] -> \processor.PC.outAddr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2958 to $_DFFE_PP_ for \processor.PC.inAddr [11] -> \processor.PC.outAddr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2959 to $_DFFE_PP_ for \processor.PC.inAddr [12] -> \processor.PC.outAddr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2960 to $_DFFE_PP_ for \processor.PC.inAddr [13] -> \processor.PC.outAddr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2961 to $_DFFE_PP_ for \processor.PC.inAddr [14] -> \processor.PC.outAddr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2962 to $_DFFE_PP_ for \processor.PC.inAddr [15] -> \processor.PC.outAddr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2963 to $_DFFE_PP_ for \processor.PC.inAddr [16] -> \processor.PC.outAddr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2964 to $_DFFE_PP_ for \processor.PC.inAddr [17] -> \processor.PC.outAddr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2965 to $_DFFE_PP_ for \processor.PC.inAddr [18] -> \processor.PC.outAddr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2966 to $_DFFE_PP_ for \processor.PC.inAddr [19] -> \processor.PC.outAddr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2967 to $_DFFE_PP_ for \processor.PC.inAddr [20] -> \processor.PC.outAddr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2968 to $_DFFE_PP_ for \processor.PC.inAddr [21] -> \processor.PC.outAddr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2969 to $_DFFE_PP_ for \processor.PC.inAddr [22] -> \processor.PC.outAddr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2970 to $_DFFE_PP_ for \processor.PC.inAddr [23] -> \processor.PC.outAddr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2971 to $_DFFE_PP_ for \processor.PC.inAddr [24] -> \processor.PC.outAddr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2972 to $_DFFE_PP_ for \processor.PC.inAddr [25] -> \processor.PC.outAddr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2973 to $_DFFE_PP_ for \processor.PC.inAddr [26] -> \processor.PC.outAddr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2974 to $_DFFE_PP_ for \processor.PC.inAddr [27] -> \processor.PC.outAddr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2975 to $_DFFE_PP_ for \processor.PC.inAddr [28] -> \processor.PC.outAddr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2976 to $_DFFE_PP_ for \processor.PC.inAddr [29] -> \processor.PC.outAddr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2977 to $_DFFE_PP_ for \processor.PC.inAddr [30] -> \processor.PC.outAddr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2978 to $_DFFE_PP_ for \processor.PC.inAddr [31] -> \processor.PC.outAddr [31].

25.35. Executing TECHMAP pass (map to technology primitives).

25.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

25.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~680 debug messages>

25.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~404 debug messages>

25.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).

25.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6697 (SB_DFF): \processor.mem_wb_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1585 (SB_DFFE): \data_mem_inst.state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1586 (SB_DFFE): \data_mem_inst.state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1601 (SB_DFFE): \data_mem_inst.state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1587 (SB_DFFE): \data_mem_inst.state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1591 (SB_DFFE): \data_mem_inst.state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1588 (SB_DFFE): \data_mem_inst.state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1590 (SB_DFFE): \data_mem_inst.state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1581 (SB_DFFE): \data_mem_inst.clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1599 (SB_DFFE): \data_mem_inst.state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1609 (SB_DFFE): \data_mem_inst.state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6426 (SB_DFF): \processor.ex_mem_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1589 (SB_DFFE): \data_mem_inst.state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1597 (SB_DFFE): \data_mem_inst.state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1598 (SB_DFFE): \data_mem_inst.state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1600 (SB_DFFE): \data_mem_inst.state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1608 (SB_DFFE): \data_mem_inst.state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1611 (SB_DFFE): \data_mem_inst.state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1592 (SB_DFFE): \data_mem_inst.state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1583 (SB_DFFE): \data_mem_inst.state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1593 (SB_DFFE): \data_mem_inst.state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1594 (SB_DFFE): \data_mem_inst.state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1610 (SB_DFFE): \data_mem_inst.state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1612 (SB_DFFE): \data_mem_inst.state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1584 (SB_DFFE): \data_mem_inst.state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1603 (SB_DFFE): \data_mem_inst.state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1595 (SB_DFFE): \data_mem_inst.state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1604 (SB_DFFE): \data_mem_inst.state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1582 (SB_DFFE): \data_mem_inst.state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1602 (SB_DFFE): \data_mem_inst.state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1605 (SB_DFFE): \data_mem_inst.state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1596 (SB_DFFE): \data_mem_inst.state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1606 (SB_DFFE): \data_mem_inst.state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1607 (SB_DFFE): \data_mem_inst.state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1613 (SB_DFFE): \data_mem_inst.state [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6432 (SB_DFF): \processor.ex_mem_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2816 (SB_DFFN): \processor.branch_predictor_FSM.branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2815 (SB_DFFE): \processor.branch_predictor_FSM.s [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2948 (SB_DFFE): \processor.PC.outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2949 (SB_DFFE): \processor.PC.outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2950 (SB_DFFE): \processor.PC.outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2951 (SB_DFFE): \processor.PC.outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2952 (SB_DFFE): \processor.PC.outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2953 (SB_DFFE): \processor.PC.outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2954 (SB_DFFE): \processor.PC.outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2955 (SB_DFFE): \processor.PC.outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2956 (SB_DFFE): \processor.PC.outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2957 (SB_DFFE): \processor.PC.outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2958 (SB_DFFE): \processor.PC.outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2959 (SB_DFFE): \processor.PC.outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2960 (SB_DFFE): \processor.PC.outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2961 (SB_DFFE): \processor.PC.outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2962 (SB_DFFE): \processor.PC.outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2963 (SB_DFFE): \processor.PC.outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2964 (SB_DFFE): \processor.PC.outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2965 (SB_DFFE): \processor.PC.outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2966 (SB_DFFE): \processor.PC.outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2967 (SB_DFFE): \processor.PC.outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2968 (SB_DFFE): \processor.PC.outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2969 (SB_DFFE): \processor.PC.outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2970 (SB_DFFE): \processor.PC.outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2971 (SB_DFFE): \processor.PC.outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2972 (SB_DFFE): \processor.PC.outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2973 (SB_DFFE): \processor.PC.outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2974 (SB_DFFE): \processor.PC.outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2975 (SB_DFFE): \processor.PC.outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2976 (SB_DFFE): \processor.PC.outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2977 (SB_DFFE): \processor.PC.outAddr [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2947 (SB_DFFE): \processor.PC.outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2978 (SB_DFFE): \processor.PC.outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2980 (SB_DFF): \processor.if_id_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2981 (SB_DFF): \processor.if_id_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2982 (SB_DFF): \processor.if_id_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2983 (SB_DFF): \processor.if_id_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2984 (SB_DFF): \processor.if_id_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2985 (SB_DFF): \processor.if_id_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2986 (SB_DFF): \processor.if_id_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2987 (SB_DFF): \processor.if_id_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2988 (SB_DFF): \processor.if_id_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2989 (SB_DFF): \processor.if_id_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2990 (SB_DFF): \processor.if_id_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2991 (SB_DFF): \processor.if_id_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2992 (SB_DFF): \processor.if_id_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2993 (SB_DFF): \processor.if_id_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2994 (SB_DFF): \processor.if_id_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2995 (SB_DFF): \processor.if_id_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2996 (SB_DFF): \processor.if_id_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2997 (SB_DFF): \processor.if_id_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2998 (SB_DFF): \processor.if_id_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2999 (SB_DFF): \processor.if_id_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3000 (SB_DFF): \processor.if_id_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3001 (SB_DFF): \processor.if_id_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3002 (SB_DFF): \processor.if_id_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3003 (SB_DFF): \processor.if_id_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3004 (SB_DFF): \processor.if_id_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3005 (SB_DFF): \processor.if_id_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3006 (SB_DFF): \processor.if_id_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3007 (SB_DFF): \processor.if_id_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3008 (SB_DFF): \processor.if_id_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3009 (SB_DFF): \processor.if_id_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3010 (SB_DFF): \processor.if_id_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3011 (SB_DFF): \processor.if_id_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3012 (SB_DFF): \processor.if_id_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3013 (SB_DFF): \processor.if_id_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3014 (SB_DFF): \processor.if_id_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3015 (SB_DFF): \processor.if_id_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3016 (SB_DFF): \processor.if_id_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3017 (SB_DFF): \processor.if_id_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3019 (SB_DFF): \processor.if_id_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3020 (SB_DFF): \processor.if_id_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3021 (SB_DFF): \processor.if_id_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3022 (SB_DFF): \processor.if_id_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3023 (SB_DFF): \processor.if_id_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3024 (SB_DFF): \processor.if_id_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3025 (SB_DFF): \processor.if_id_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3026 (SB_DFF): \processor.if_id_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3027 (SB_DFF): \processor.if_id_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3028 (SB_DFF): \processor.if_id_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3029 (SB_DFF): \processor.if_id_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3030 (SB_DFF): \processor.if_id_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3031 (SB_DFF): \processor.if_id_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3032 (SB_DFF): \processor.if_id_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3033 (SB_DFF): \processor.if_id_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3034 (SB_DFF): \processor.if_id_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3035 (SB_DFF): \processor.if_id_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3036 (SB_DFF): \processor.if_id_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3037 (SB_DFF): \processor.if_id_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3038 (SB_DFF): \processor.if_id_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3039 (SB_DFF): \processor.if_id_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3040 (SB_DFF): \processor.if_id_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3041 (SB_DFF): \processor.if_id_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2979 (SB_DFF): \processor.if_id_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3042 (SB_DFF): \processor.if_id_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6564 (SB_DFF): \processor.ex_mem_reg.data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6565 (SB_DFF): \processor.ex_mem_reg.data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6566 (SB_DFF): \processor.ex_mem_reg.data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6567 (SB_DFF): \processor.ex_mem_reg.data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6568 (SB_DFF): \processor.ex_mem_reg.data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6428 (SB_DFF): \processor.ex_mem_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3738 (SB_DFF): \processor.id_ex_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3739 (SB_DFF): \processor.id_ex_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3740 (SB_DFF): \processor.id_ex_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3741 (SB_DFF): \processor.id_ex_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3742 (SB_DFF): \processor.id_ex_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3743 (SB_DFF): \processor.id_ex_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3744 (SB_DFF): \processor.id_ex_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3745 (SB_DFF): \processor.id_ex_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3746 (SB_DFF): \processor.id_ex_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3747 (SB_DFF): \processor.id_ex_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3748 (SB_DFF): \processor.id_ex_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3749 (SB_DFF): \processor.id_ex_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3750 (SB_DFF): \processor.id_ex_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3751 (SB_DFF): \processor.id_ex_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3752 (SB_DFF): \processor.id_ex_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3753 (SB_DFF): \processor.id_ex_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3754 (SB_DFF): \processor.id_ex_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3755 (SB_DFF): \processor.id_ex_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3756 (SB_DFF): \processor.id_ex_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3757 (SB_DFF): \processor.id_ex_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3758 (SB_DFF): \processor.id_ex_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3759 (SB_DFF): \processor.id_ex_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3760 (SB_DFF): \processor.id_ex_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3761 (SB_DFF): \processor.id_ex_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3762 (SB_DFF): \processor.id_ex_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3763 (SB_DFF): \processor.id_ex_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3764 (SB_DFF): \processor.id_ex_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3765 (SB_DFF): \processor.id_ex_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3766 (SB_DFF): \processor.id_ex_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3767 (SB_DFF): \processor.id_ex_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3768 (SB_DFF): \processor.id_ex_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3769 (SB_DFF): \processor.id_ex_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3770 (SB_DFF): \processor.id_ex_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3771 (SB_DFF): \processor.id_ex_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3772 (SB_DFF): \processor.id_ex_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3773 (SB_DFF): \processor.id_ex_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3774 (SB_DFF): \processor.id_ex_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3775 (SB_DFF): \processor.id_ex_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3776 (SB_DFF): \processor.id_ex_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3777 (SB_DFF): \processor.id_ex_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3778 (SB_DFF): \processor.id_ex_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3779 (SB_DFF): \processor.id_ex_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3780 (SB_DFF): \processor.id_ex_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3781 (SB_DFF): \processor.id_ex_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3782 (SB_DFF): \processor.id_ex_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3783 (SB_DFF): \processor.id_ex_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3784 (SB_DFF): \processor.id_ex_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3785 (SB_DFF): \processor.id_ex_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3786 (SB_DFF): \processor.id_ex_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3787 (SB_DFF): \processor.id_ex_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3788 (SB_DFF): \processor.id_ex_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3789 (SB_DFF): \processor.id_ex_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3790 (SB_DFF): \processor.id_ex_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3791 (SB_DFF): \processor.id_ex_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3792 (SB_DFF): \processor.id_ex_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3793 (SB_DFF): \processor.id_ex_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3794 (SB_DFF): \processor.id_ex_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3795 (SB_DFF): \processor.id_ex_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3796 (SB_DFF): \processor.id_ex_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3797 (SB_DFF): \processor.id_ex_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3798 (SB_DFF): \processor.id_ex_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3799 (SB_DFF): \processor.id_ex_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3800 (SB_DFF): \processor.id_ex_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3801 (SB_DFF): \processor.id_ex_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3802 (SB_DFF): \processor.id_ex_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3803 (SB_DFF): \processor.id_ex_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3804 (SB_DFF): \processor.id_ex_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3805 (SB_DFF): \processor.id_ex_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3806 (SB_DFF): \processor.id_ex_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3807 (SB_DFF): \processor.id_ex_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3808 (SB_DFF): \processor.id_ex_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3809 (SB_DFF): \processor.id_ex_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3810 (SB_DFF): \processor.id_ex_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3811 (SB_DFF): \processor.id_ex_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3812 (SB_DFF): \processor.id_ex_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3813 (SB_DFF): \processor.id_ex_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3814 (SB_DFF): \processor.id_ex_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3815 (SB_DFF): \processor.id_ex_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3816 (SB_DFF): \processor.id_ex_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3817 (SB_DFF): \processor.id_ex_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3818 (SB_DFF): \processor.id_ex_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3819 (SB_DFF): \processor.id_ex_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3820 (SB_DFF): \processor.id_ex_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3821 (SB_DFF): \processor.id_ex_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3822 (SB_DFF): \processor.id_ex_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3823 (SB_DFF): \processor.id_ex_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3824 (SB_DFF): \processor.id_ex_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3825 (SB_DFF): \processor.id_ex_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3826 (SB_DFF): \processor.id_ex_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3827 (SB_DFF): \processor.id_ex_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3828 (SB_DFF): \processor.id_ex_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3829 (SB_DFF): \processor.id_ex_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3830 (SB_DFF): \processor.id_ex_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3831 (SB_DFF): \processor.id_ex_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3832 (SB_DFF): \processor.id_ex_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3833 (SB_DFF): \processor.id_ex_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3834 (SB_DFF): \processor.id_ex_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3835 (SB_DFF): \processor.id_ex_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3836 (SB_DFF): \processor.id_ex_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3837 (SB_DFF): \processor.id_ex_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3838 (SB_DFF): \processor.id_ex_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3839 (SB_DFF): \processor.id_ex_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3840 (SB_DFF): \processor.id_ex_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3841 (SB_DFF): \processor.id_ex_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3842 (SB_DFF): \processor.id_ex_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3843 (SB_DFF): \processor.id_ex_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3844 (SB_DFF): \processor.id_ex_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3845 (SB_DFF): \processor.id_ex_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3846 (SB_DFF): \processor.id_ex_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3847 (SB_DFF): \processor.id_ex_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3848 (SB_DFF): \processor.id_ex_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3849 (SB_DFF): \processor.id_ex_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3850 (SB_DFF): \processor.id_ex_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3851 (SB_DFF): \processor.id_ex_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3852 (SB_DFF): \processor.id_ex_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3853 (SB_DFF): \processor.id_ex_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3854 (SB_DFF): \processor.id_ex_reg.data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3855 (SB_DFF): \processor.id_ex_reg.data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3856 (SB_DFF): \processor.id_ex_reg.data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3857 (SB_DFF): \processor.id_ex_reg.data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3858 (SB_DFF): \processor.id_ex_reg.data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3859 (SB_DFF): \processor.id_ex_reg.data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3860 (SB_DFF): \processor.id_ex_reg.data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3861 (SB_DFF): \processor.id_ex_reg.data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3862 (SB_DFF): \processor.id_ex_reg.data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3863 (SB_DFF): \processor.id_ex_reg.data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3864 (SB_DFF): \processor.id_ex_reg.data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3865 (SB_DFF): \processor.id_ex_reg.data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3866 (SB_DFF): \processor.id_ex_reg.data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3867 (SB_DFF): \processor.id_ex_reg.data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3868 (SB_DFF): \processor.id_ex_reg.data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3869 (SB_DFF): \processor.id_ex_reg.data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3870 (SB_DFF): \processor.id_ex_reg.data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3871 (SB_DFF): \processor.id_ex_reg.data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3872 (SB_DFF): \processor.id_ex_reg.data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3873 (SB_DFF): \processor.id_ex_reg.data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3874 (SB_DFF): \processor.id_ex_reg.data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3875 (SB_DFF): \processor.id_ex_reg.data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3876 (SB_DFF): \processor.id_ex_reg.data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3877 (SB_DFF): \processor.id_ex_reg.data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3878 (SB_DFF): \processor.id_ex_reg.data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3879 (SB_DFF): \processor.id_ex_reg.data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3880 (SB_DFF): \processor.id_ex_reg.data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3881 (SB_DFF): \processor.id_ex_reg.data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3882 (SB_DFF): \processor.id_ex_reg.data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3883 (SB_DFF): \processor.id_ex_reg.data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3885 (SB_DFF): \processor.id_ex_reg.data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3886 (SB_DFF): \processor.id_ex_reg.data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3018 (SB_DFF): \processor.if_id_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3887 (SB_DFF): \processor.id_ex_reg.data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3893 (SB_DFF): \processor.id_ex_reg.data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3894 (SB_DFF): \processor.id_ex_reg.data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3895 (SB_DFF): \processor.id_ex_reg.data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3896 (SB_DFF): \processor.id_ex_reg.data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3897 (SB_DFF): \processor.id_ex_reg.data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3898 (SB_DFF): \processor.id_ex_reg.data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3899 (SB_DFF): \processor.id_ex_reg.data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3900 (SB_DFF): \processor.id_ex_reg.data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3901 (SB_DFF): \processor.id_ex_reg.data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3902 (SB_DFF): \processor.id_ex_reg.data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3903 (SB_DFF): \processor.id_ex_reg.data_out [166] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3904 (SB_DFF): \processor.id_ex_reg.data_out [167] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3905 (SB_DFF): \processor.id_ex_reg.data_out [168] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3906 (SB_DFF): \processor.id_ex_reg.data_out [169] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3907 (SB_DFF): \processor.id_ex_reg.data_out [170] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3908 (SB_DFF): \processor.id_ex_reg.data_out [171] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3909 (SB_DFF): \processor.id_ex_reg.data_out [172] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3910 (SB_DFF): \processor.id_ex_reg.data_out [173] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3911 (SB_DFF): \processor.id_ex_reg.data_out [174] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3912 (SB_DFF): \processor.id_ex_reg.data_out [175] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3737 (SB_DFF): \processor.id_ex_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3913 (SB_DFF): \processor.id_ex_reg.data_out [176] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6427 (SB_DFF): \processor.ex_mem_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2814 (SB_DFFE): \processor.branch_predictor_FSM.s [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6429 (SB_DFF): \processor.ex_mem_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6433 (SB_DFF): \processor.ex_mem_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6434 (SB_DFF): \processor.ex_mem_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6467 (SB_DFF): \processor.ex_mem_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6468 (SB_DFF): \processor.ex_mem_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6469 (SB_DFF): \processor.ex_mem_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6470 (SB_DFF): \processor.ex_mem_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6471 (SB_DFF): \processor.ex_mem_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6472 (SB_DFF): \processor.ex_mem_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6473 (SB_DFF): \processor.ex_mem_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6474 (SB_DFF): \processor.ex_mem_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6475 (SB_DFF): \processor.ex_mem_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6476 (SB_DFF): \processor.ex_mem_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6477 (SB_DFF): \processor.ex_mem_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6478 (SB_DFF): \processor.ex_mem_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6479 (SB_DFF): \processor.ex_mem_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6480 (SB_DFF): \processor.ex_mem_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6481 (SB_DFF): \processor.ex_mem_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6482 (SB_DFF): \processor.ex_mem_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6483 (SB_DFF): \processor.ex_mem_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6484 (SB_DFF): \processor.ex_mem_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6485 (SB_DFF): \processor.ex_mem_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6486 (SB_DFF): \processor.ex_mem_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6487 (SB_DFF): \processor.ex_mem_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6488 (SB_DFF): \processor.ex_mem_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6489 (SB_DFF): \processor.ex_mem_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6490 (SB_DFF): \processor.ex_mem_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6491 (SB_DFF): \processor.ex_mem_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6492 (SB_DFF): \processor.ex_mem_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6493 (SB_DFF): \processor.ex_mem_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6494 (SB_DFF): \processor.ex_mem_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6495 (SB_DFF): \processor.ex_mem_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6496 (SB_DFF): \processor.ex_mem_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6497 (SB_DFF): \processor.ex_mem_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6498 (SB_DFF): \processor.ex_mem_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6499 (SB_DFF): \processor.ex_mem_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6500 (SB_DFF): \processor.ex_mem_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6501 (SB_DFF): \processor.ex_mem_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6502 (SB_DFF): \processor.ex_mem_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6503 (SB_DFF): \processor.ex_mem_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6504 (SB_DFF): \processor.ex_mem_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6505 (SB_DFF): \processor.ex_mem_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6506 (SB_DFF): \processor.ex_mem_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6507 (SB_DFF): \processor.ex_mem_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6508 (SB_DFF): \processor.ex_mem_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6509 (SB_DFF): \processor.ex_mem_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6510 (SB_DFF): \processor.ex_mem_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6511 (SB_DFF): \processor.ex_mem_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6512 (SB_DFF): \processor.ex_mem_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6513 (SB_DFF): \processor.ex_mem_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6514 (SB_DFF): \processor.ex_mem_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6515 (SB_DFF): \processor.ex_mem_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6516 (SB_DFF): \processor.ex_mem_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6517 (SB_DFF): \processor.ex_mem_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6518 (SB_DFF): \processor.ex_mem_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6519 (SB_DFF): \processor.ex_mem_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6520 (SB_DFF): \processor.ex_mem_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6521 (SB_DFF): \processor.ex_mem_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6522 (SB_DFF): \processor.ex_mem_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6523 (SB_DFF): \processor.ex_mem_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6524 (SB_DFF): \processor.ex_mem_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6525 (SB_DFF): \processor.ex_mem_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6526 (SB_DFF): \processor.ex_mem_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6527 (SB_DFF): \processor.ex_mem_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6528 (SB_DFF): \processor.ex_mem_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6529 (SB_DFF): \processor.ex_mem_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6530 (SB_DFF): \processor.ex_mem_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6531 (SB_DFF): \processor.ex_mem_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6532 (SB_DFF): \processor.ex_mem_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6533 (SB_DFF): \processor.ex_mem_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6534 (SB_DFF): \processor.ex_mem_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6535 (SB_DFF): \processor.ex_mem_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6536 (SB_DFF): \processor.ex_mem_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6537 (SB_DFF): \processor.ex_mem_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6538 (SB_DFF): \processor.ex_mem_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6539 (SB_DFF): \processor.ex_mem_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6540 (SB_DFF): \processor.ex_mem_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6541 (SB_DFF): \processor.ex_mem_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6542 (SB_DFF): \processor.ex_mem_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6543 (SB_DFF): \processor.ex_mem_reg.data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6544 (SB_DFF): \processor.ex_mem_reg.data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6545 (SB_DFF): \processor.ex_mem_reg.data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6546 (SB_DFF): \processor.ex_mem_reg.data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6547 (SB_DFF): \processor.ex_mem_reg.data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6548 (SB_DFF): \processor.ex_mem_reg.data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6549 (SB_DFF): \processor.ex_mem_reg.data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6550 (SB_DFF): \processor.ex_mem_reg.data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6551 (SB_DFF): \processor.ex_mem_reg.data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6552 (SB_DFF): \processor.ex_mem_reg.data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6553 (SB_DFF): \processor.ex_mem_reg.data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6554 (SB_DFF): \processor.ex_mem_reg.data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6555 (SB_DFF): \processor.ex_mem_reg.data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6556 (SB_DFF): \processor.ex_mem_reg.data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6557 (SB_DFF): \processor.ex_mem_reg.data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6558 (SB_DFF): \processor.ex_mem_reg.data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6559 (SB_DFF): \processor.ex_mem_reg.data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6560 (SB_DFF): \processor.ex_mem_reg.data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6561 (SB_DFF): \processor.ex_mem_reg.data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6562 (SB_DFF): \processor.ex_mem_reg.data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3888 (SB_DFF): \processor.id_ex_reg.data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3889 (SB_DFF): \processor.id_ex_reg.data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3890 (SB_DFF): \processor.id_ex_reg.data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3891 (SB_DFF): \processor.id_ex_reg.data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3892 (SB_DFF): \processor.id_ex_reg.data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6563 (SB_DFF): \processor.ex_mem_reg.data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6569 (SB_DFF): \processor.ex_mem_reg.data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6570 (SB_DFF): \processor.ex_mem_reg.data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6571 (SB_DFF): \processor.ex_mem_reg.data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6572 (SB_DFF): \processor.ex_mem_reg.data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6573 (SB_DFF): \processor.ex_mem_reg.data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6574 (SB_DFF): \processor.ex_mem_reg.data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6575 (SB_DFF): \processor.ex_mem_reg.data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6576 (SB_DFF): \processor.ex_mem_reg.data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6577 (SB_DFF): \processor.ex_mem_reg.data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6578 (SB_DFF): \processor.ex_mem_reg.data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6579 (SB_DFF): \processor.ex_mem_reg.data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6580 (SB_DFF): \processor.ex_mem_reg.data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6582 (SB_DFF): \processor.mem_wb_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6583 (SB_DFF): \processor.mem_wb_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6584 (SB_DFF): \processor.mem_wb_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6585 (SB_DFF): \processor.mem_wb_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6586 (SB_DFF): \processor.mem_wb_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6587 (SB_DFF): \processor.mem_wb_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6588 (SB_DFF): \processor.mem_wb_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6589 (SB_DFF): \processor.mem_wb_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6590 (SB_DFF): \processor.mem_wb_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6591 (SB_DFF): \processor.mem_wb_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6592 (SB_DFF): \processor.mem_wb_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6593 (SB_DFF): \processor.mem_wb_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6594 (SB_DFF): \processor.mem_wb_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6595 (SB_DFF): \processor.mem_wb_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6596 (SB_DFF): \processor.mem_wb_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6597 (SB_DFF): \processor.mem_wb_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6598 (SB_DFF): \processor.mem_wb_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6599 (SB_DFF): \processor.mem_wb_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6600 (SB_DFF): \processor.mem_wb_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6601 (SB_DFF): \processor.mem_wb_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6602 (SB_DFF): \processor.mem_wb_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6603 (SB_DFF): \processor.mem_wb_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6604 (SB_DFF): \processor.mem_wb_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6605 (SB_DFF): \processor.mem_wb_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6606 (SB_DFF): \processor.mem_wb_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6607 (SB_DFF): \processor.mem_wb_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6608 (SB_DFF): \processor.mem_wb_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6609 (SB_DFF): \processor.mem_wb_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6610 (SB_DFF): \processor.mem_wb_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6611 (SB_DFF): \processor.mem_wb_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6612 (SB_DFF): \processor.mem_wb_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6613 (SB_DFF): \processor.mem_wb_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6614 (SB_DFF): \processor.mem_wb_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6615 (SB_DFF): \processor.mem_wb_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6616 (SB_DFF): \processor.mem_wb_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6617 (SB_DFF): \processor.mem_wb_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6618 (SB_DFF): \processor.mem_wb_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6619 (SB_DFF): \processor.mem_wb_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6620 (SB_DFF): \processor.mem_wb_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6621 (SB_DFF): \processor.mem_wb_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6622 (SB_DFF): \processor.mem_wb_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6623 (SB_DFF): \processor.mem_wb_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6624 (SB_DFF): \processor.mem_wb_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6625 (SB_DFF): \processor.mem_wb_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6626 (SB_DFF): \processor.mem_wb_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6627 (SB_DFF): \processor.mem_wb_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6628 (SB_DFF): \processor.mem_wb_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6629 (SB_DFF): \processor.mem_wb_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6630 (SB_DFF): \processor.mem_wb_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6631 (SB_DFF): \processor.mem_wb_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6632 (SB_DFF): \processor.mem_wb_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6633 (SB_DFF): \processor.mem_wb_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6634 (SB_DFF): \processor.mem_wb_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6635 (SB_DFF): \processor.mem_wb_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6636 (SB_DFF): \processor.mem_wb_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6637 (SB_DFF): \processor.mem_wb_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6638 (SB_DFF): \processor.mem_wb_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6639 (SB_DFF): \processor.mem_wb_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6640 (SB_DFF): \processor.mem_wb_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6641 (SB_DFF): \processor.mem_wb_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6642 (SB_DFF): \processor.mem_wb_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6643 (SB_DFF): \processor.mem_wb_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6644 (SB_DFF): \processor.mem_wb_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6645 (SB_DFF): \processor.mem_wb_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6646 (SB_DFF): \processor.mem_wb_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6647 (SB_DFF): \processor.mem_wb_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6648 (SB_DFF): \processor.mem_wb_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6649 (SB_DFF): \processor.mem_wb_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6650 (SB_DFF): \processor.mem_wb_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6651 (SB_DFF): \processor.mem_wb_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6652 (SB_DFF): \processor.mem_wb_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6653 (SB_DFF): \processor.mem_wb_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6654 (SB_DFF): \processor.mem_wb_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6655 (SB_DFF): \processor.mem_wb_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6656 (SB_DFF): \processor.mem_wb_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6657 (SB_DFF): \processor.mem_wb_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6658 (SB_DFF): \processor.mem_wb_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6659 (SB_DFF): \processor.mem_wb_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6660 (SB_DFF): \processor.mem_wb_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6661 (SB_DFF): \processor.mem_wb_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6662 (SB_DFF): \processor.mem_wb_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6663 (SB_DFF): \processor.mem_wb_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6664 (SB_DFF): \processor.mem_wb_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6665 (SB_DFF): \processor.mem_wb_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6666 (SB_DFF): \processor.mem_wb_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6667 (SB_DFF): \processor.mem_wb_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6668 (SB_DFF): \processor.mem_wb_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6669 (SB_DFF): \processor.mem_wb_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6670 (SB_DFF): \processor.mem_wb_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6671 (SB_DFF): \processor.mem_wb_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6672 (SB_DFF): \processor.mem_wb_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6673 (SB_DFF): \processor.mem_wb_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6674 (SB_DFF): \processor.mem_wb_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6675 (SB_DFF): \processor.mem_wb_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6676 (SB_DFF): \processor.mem_wb_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6677 (SB_DFF): \processor.mem_wb_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6678 (SB_DFF): \processor.mem_wb_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6679 (SB_DFF): \processor.mem_wb_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6680 (SB_DFF): \processor.mem_wb_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6681 (SB_DFF): \processor.mem_wb_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6682 (SB_DFF): \processor.mem_wb_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6683 (SB_DFF): \processor.mem_wb_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6684 (SB_DFF): \processor.mem_wb_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6685 (SB_DFF): \processor.mem_wb_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6686 (SB_DFF): \processor.mem_wb_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6687 (SB_DFF): \processor.mem_wb_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6688 (SB_DFF): \processor.mem_wb_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6689 (SB_DFF): \processor.mem_wb_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6690 (SB_DFF): \processor.mem_wb_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6691 (SB_DFF): \processor.mem_wb_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6692 (SB_DFF): \processor.mem_wb_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6693 (SB_DFF): \processor.mem_wb_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6694 (SB_DFF): \processor.mem_wb_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6695 (SB_DFF): \processor.mem_wb_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6696 (SB_DFF): \processor.mem_wb_reg.data_out [115] = 0

25.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$6385 (A=\processor.id_ex_reg.data_out [0], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6426 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6390 (A=\processor.id_ex_reg.data_out [5], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$1614 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6389 (A=\processor.id_ex_reg.data_out [4], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$1615 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6391 (A=\processor.id_ex_reg.data_out [6], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6432 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2551 (A=\inst_mem.out [0], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3011 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2552 (A=\inst_mem.out [1], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3012 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2553 (A=\inst_mem.out [2], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3013 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2554 (A=\inst_mem.out [3], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3014 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2555 (A=\inst_mem.out [4], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3015 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2556 (A=\inst_mem.out [5], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3016 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2571 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2557 (A=\inst_mem.out [6], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3017 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2559 (A=\inst_mem.out [8], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3019 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2560 (A=\inst_mem.out [9], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3020 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2561 (A=\inst_mem.out [10], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3021 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2562 (A=\inst_mem.out [11], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3022 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2563 (A=\inst_mem.out [12], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3023 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2564 (A=\inst_mem.out [13], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3024 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2565 (A=\inst_mem.out [14], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3025 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2566 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3026 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2567 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3027 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2568 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3028 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2569 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3029 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2570 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3030 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2571 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3031 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2572 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3032 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2573 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3033 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2574 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3034 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2575 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3035 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2576 (A=\inst_mem.out [25], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3036 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2577 (A=\inst_mem.out [26], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3037 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2578 (A=\inst_mem.out [27], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3038 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2579 (A=\inst_mem.out [28], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3039 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2580 (A=\inst_mem.out [29], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3040 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2581 (A=\inst_mem.out [30], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3041 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2582 (A=\inst_mem.out [31], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3042 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2567 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3225 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2568 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3226 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2569 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2566 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2570 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2572 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3230 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2573 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3231 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2574 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3232 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6387 (A=\processor.id_ex_reg.data_out [2], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6428 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2627 (A=\processor.control_unit.MemtoReg, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3738 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2628 (A=\processor.control_unit.RegWrite, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3739 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2629 (A=\processor.CSRR_signal, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3740 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2630 (A=\processor.control_unit.MemWrite, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3741 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2631 (A=\processor.control_unit.MemRead, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3742 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2632 (A=\processor.control_unit.Branch, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3743 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2633 (A=\processor.control_unit.Auipc, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3745 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2634 (A=\processor.control_unit.Lui, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3746 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2635 (A=\processor.control_unit.ALUSrc, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3747 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2636 (A=\processor.control_unit.Jalr, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3748 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2593 (A=\processor.RegA_mux.input0 [5], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3786 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2594 (A=\processor.RegA_mux.input0 [6], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3787 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2595 (A=\processor.RegA_mux.input0 [7], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3788 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2596 (A=\processor.RegA_mux.input0 [8], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3789 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2597 (A=\processor.RegA_mux.input0 [9], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3790 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2598 (A=\processor.RegA_mux.input0 [10], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3791 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2599 (A=\processor.RegA_mux.input0 [11], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3792 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2600 (A=\processor.RegA_mux.input0 [12], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3793 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2601 (A=\processor.RegA_mux.input0 [13], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3794 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2602 (A=\processor.RegA_mux.input0 [14], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3795 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2603 (A=\processor.RegA_mux.input0 [15], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3796 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2604 (A=\processor.RegA_mux.input0 [16], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3797 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2605 (A=\processor.RegA_mux.input0 [17], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3798 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2606 (A=\processor.RegA_mux.input0 [18], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3799 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2607 (A=\processor.RegA_mux.input0 [19], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3800 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2608 (A=\processor.RegA_mux.input0 [20], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3801 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2609 (A=\processor.RegA_mux.input0 [21], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3802 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2610 (A=\processor.RegA_mux.input0 [22], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3803 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2611 (A=\processor.RegA_mux.input0 [23], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3804 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2612 (A=\processor.RegA_mux.input0 [24], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3805 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2613 (A=\processor.RegA_mux.input0 [25], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3806 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2614 (A=\processor.RegA_mux.input0 [26], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3807 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2615 (A=\processor.RegA_mux.input0 [27], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3808 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2616 (A=\processor.RegA_mux.input0 [28], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3809 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2617 (A=\processor.RegA_mux.input0 [29], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3810 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2618 (A=\processor.RegA_mux.input0 [30], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3811 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2619 (A=\processor.RegA_mux.input0 [31], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3812 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7728 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3548_Y, S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3877 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7729 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3549_Y, S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3878 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7730 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3550_Y, S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3879 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7731 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3551_Y, S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3880 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7732 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7634 [2], S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3881 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7733 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7625 [2], S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3882 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7734 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7616 [2], S=$techmap$techmap\processor.alu_control.$procmux$491.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3539_Y) into $auto$simplemap.cc:420:simplemap_dff$3883 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2558 (A=\inst_mem.out [7], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3018 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2575 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3233 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3043 (A=\processor.if_id_reg.data_out [47], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3893 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3044 (A=\processor.if_id_reg.data_out [48], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3894 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3045 (A=\processor.if_id_reg.data_out [49], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3895 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3046 (A=\processor.if_id_reg.data_out [50], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3896 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3047 (A=\processor.if_id_reg.data_out [51], B=1'0, S=\processor.CSRRI_signal) into $auto$simplemap.cc:420:simplemap_dff$3897 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3336 (A=\processor.if_id_reg.data_out [52], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3898 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3337 (A=\processor.if_id_reg.data_out [53], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3899 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3338 (A=\processor.if_id_reg.data_out [54], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3900 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3339 (A=\processor.if_id_reg.data_out [55], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3901 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3340 (A=\processor.if_id_reg.data_out [56], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3902 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2626 (A=\processor.control_unit.Jump, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3737 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6386 (A=\processor.id_ex_reg.data_out [1], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6427 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6388 (A=\processor.id_ex_reg.data_out [3], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6429 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6392 (A=\processor.id_ex_reg.data_out [7], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6433 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6393 (A=\processor.id_ex_reg.data_out [8], B=1'0, S=\processor.branch_decide.Branch_Jump_Trigger) into $auto$simplemap.cc:420:simplemap_dff$6434 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$8635 (A=1'0, B=$techmap$techmap\processor.alu_main.$procmux$501.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$6071_Y, S=$techmap$techmap\processor.alu_main.$procmux$501.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$6063_Y) into $auto$simplemap.cc:420:simplemap_dff$6499 (SB_DFF).

25.40. Executing ICE40_OPT pass (performing simple optimizations).

25.40.1. Running ICE40 specific optimizations.

25.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~55 debug messages>

25.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~627 debug messages>
Removed a total of 209 cells.

25.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

25.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 79 unused cells and 2695 unused wires.
<suppressed ~84 debug messages>

25.40.6. Rerunning OPT passes. (Removed registers in this run.)

25.40.7. Running ICE40 specific optimizations.

25.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~80 debug messages>

25.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

25.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.40.12. Rerunning OPT passes. (Removed registers in this run.)

25.40.13. Running ICE40 specific optimizations.

25.40.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

25.40.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

25.40.16. Executing OPT_RMDFF pass (remove dff with constant values).

25.40.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

25.40.18. Finished OPT passes. (There is nothing left to do.)

25.41. Executing TECHMAP pass (map to technology primitives).

25.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

25.41.2. Continuing TECHMAP pass.
No more expansions possible.

25.42. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_FF_'.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Successfully finished Verilog frontend.

25.43. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

25.44. Executing ABC9 pass.

25.44.1. Executing ABC9_OPS pass (helper functions for ABC9).

25.44.2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

25.44.3. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2531 debug messages>

25.44.4. Executing ABC9_OPS pass (helper functions for ABC9).

25.44.5. Executing ABC9_OPS pass (helper functions for ABC9).

25.44.6. Executing FLATTEN pass (flatten design).
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
<suppressed ~7 debug messages>
No more expansions possible.

25.44.7. Executing TECHMAP pass (map to technology primitives).

25.44.7.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

25.44.7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
No more expansions possible.
<suppressed ~8 debug messages>

25.44.8. Executing OPT pass (performing simple optimizations).

25.44.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.
<suppressed ~4 debug messages>

25.44.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

25.44.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.44.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

25.44.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

25.44.8.6. Executing OPT_RMDFF pass (remove dff with constant values).

25.44.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

25.44.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

25.44.8.9. Rerunning OPT passes. (Maybe there is more to do..)

25.44.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.44.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

25.44.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

25.44.8.13. Executing OPT_RMDFF pass (remove dff with constant values).

25.44.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..

25.44.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

25.44.8.16. Finished OPT passes. (There is nothing left to do.)

25.44.9. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 2362 cells with 14152 new cells, skipped 4094 cells.
  replaced 3 cell types:
     794 $_OR_
     105 $_XOR_
    1463 $_MUX_
  not replaced 13 cell types:
     161 $_NOT_
     629 $_AND_
       1 SB_DFFN
      30 SB_RAM40_4K
       2 SB_MAC16
       1 SB_HFOSC
       2 SB_DFFESR
       4 SB_DFFSS
     101 SB_DFFSR
     152 SB_DFFE
     420 SB_DFF
      64 $__ICE40_CARRY_WRAPPER
    2527 $__ABC9_DELAY
Module top$holes: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

25.44.9.1. Executing ABC9_OPS pass (helper functions for ABC9).

25.44.9.2. Executing ABC9_OPS pass (helper functions for ABC9).

25.44.9.3. Executing XAIGER backend.
<suppressed ~1173 debug messages>
Extracted 6127 AND gates and 19202 wires from module `top' to a netlist network with 905 inputs and 2640 outputs.

25.44.9.4. Executing ABC9_EXE pass (technology mapping using ABC9).

25.44.9.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    905/   2640  and =    5330  lev =   38 (1.65)  mem = 0.20 MB  box = 2591  bb = 2527
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    905/   2640  and =    7538  lev =   56 (1.37)  mem = 0.23 MB  ch = 1015  box = 2591  bb = 2527
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    7538.  Ch =   916.  Total mem =    2.28 MB. Peak cut mem =    0.14 MB.
ABC: P:  Del = 11233.00.  Ar =    2075.0.  Edge =     7375.  Cut =    49293.  T =     0.01 sec
ABC: P:  Del = 11233.00.  Ar =    2000.0.  Edge =     7356.  Cut =    46153.  T =     0.01 sec
ABC: P:  Del = 11233.00.  Ar =    1798.0.  Edge =     5950.  Cut =    54424.  T =     0.01 sec
ABC: F:  Del = 11233.00.  Ar =    1663.0.  Edge =     5497.  Cut =    50008.  T =     0.01 sec
ABC: A:  Del = 11233.00.  Ar =    1589.0.  Edge =     5058.  Cut =    51269.  T =     0.02 sec
ABC: A:  Del = 11233.00.  Ar =    1572.0.  Edge =     5034.  Cut =    48124.  T =     0.01 sec
ABC: Total time =     0.08 sec
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    905/   2640  and =    4558  lev =   40 (1.40)  mem = 0.19 MB  box = 2591  bb = 2527
ABC: Mapping (K=4)  :  lut =   1571  edge =    5016  lev =   19 (0.78)  levB =   44  mem = 0.08 MB
ABC: LUT = 1571 : 2=202 12.9 %  3=864 55.0 %  4=505 32.1 %  Ave = 3.19
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 2.49 seconds, total: 2.49 seconds

25.44.9.6. Executing AIGER frontend.
<suppressed ~7103 debug messages>
Removed 6926 unused cells and 17529 unused wires.

25.44.9.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:     1572
ABC RESULTS:   $__ICE40_CARRY_WRAPPER cells:       64
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:     1040
Removing temp directory.

25.45. Executing ICE40_WRAPCARRY pass (wrap carries).

25.46. Executing TECHMAP pass (map to technology primitives).

25.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

25.46.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 207 unused cells and 19275 unused wires.

25.47. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:     1638
  1-LUT                1
  2-LUT              204
  3-LUT              928
  4-LUT              505

Eliminating LUTs.
Number of LUTs:     1638
  1-LUT                1
  2-LUT              204
  3-LUT              928
  4-LUT              505

Combining LUTs.
Number of LUTs:     1636
  1-LUT                1
  2-LUT              202
  3-LUT              926
  4-LUT              507

Eliminated 0 LUTs.
Combined 2 LUTs.
<suppressed ~8551 debug messages>

25.48. Executing TECHMAP pass (map to technology primitives).

25.48.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

25.48.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001101000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010111100100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010010100100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001101010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010000100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110010101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010000110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11011000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010011110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00100111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100101101111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000010100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000010101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010001010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100010100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001000101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000001010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111100101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111011101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100000100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011100010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110001010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101110000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010111111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111101 for cells of type $lut.
No more expansions possible.
<suppressed ~4327 debug messages>
Removed 0 unused cells and 3274 unused wires.

25.49. Executing AUTONAME pass.
Renamed 15672 objects in module top (46 iterations).
<suppressed ~4067 debug messages>

25.50. Executing HIERARCHY pass (managing design hierarchy).

25.50.1. Analyzing design hierarchy..
Top module:  \top

25.50.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

25.51. Printing statistics.

=== top ===

   Number of wires:               1883
   Number of wire bits:           6625
   Number of public wires:        1883
   Number of public wire bits:    6625
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2411
     SB_CARRY                       62
     SB_DFF                        420
     SB_DFFE                       152
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                      101
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1636
     SB_MAC16                        2
     SB_RAM40_4K                    30

25.52. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.processor.alu_main.ALUOut has an unprocessed 'init' attribute.
Warning: Wire top.processor.immediate_generator.imm has an unprocessed 'init' attribute.
found and reported 2 problems.

26. Printing statistics.

=== top ===

   Number of wires:               1883
   Number of wire bits:           6625
   Number of public wires:        1883
   Number of public wire bits:    6625
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2411
     SB_CARRY                       62
     SB_DFF                        420
     SB_DFFE                       152
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                      101
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1636
     SB_MAC16                        2
     SB_RAM40_4K                    30

27. Executing JSON backend.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 9fcef61de3, CPU: user 5.33s system 0.61s, MEM: 339.47 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 28% 8x techmap (1 sec), 14% 27x opt_clean (0 sec), ...
