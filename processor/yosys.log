
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/sail.ys' --

1. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/RAM.v
Parsing Verilog input from `verilog/RAM.v' to AST representation.
Generating RTLIL representation for module `\RAM'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\dsp_adder'.
Generating RTLIL representation for module `\dsp_subtractor'.
Generating RTLIL representation for module `\dsp_addsub'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\full_adder'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/dsp_adder.v
Parsing Verilog input from `verilog/dsp_adder.v' to AST representation.
Generating RTLIL representation for module `\adder_dsp'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

21. Executing SYNTH_ICE40 pass.

21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

21.2. Executing HIERARCHY pass (managing design hierarchy).

21.2.1. Finding top of design hierarchy..
root of   4 design levels: top                 
root of   0 design levels: regfile             
root of   0 design levels: program_counter     
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: mux2to1             
root of   0 design levels: instruction_memory  
root of   0 design levels: imm_gen             
root of   0 design levels: ForwardingUnit      
root of   1 design levels: adder_dsp           
root of   0 design levels: data_mem            
root of   0 design levels: sign_mask_gen       
root of   3 design levels: cpu                 
root of   0 design levels: control             
root of   0 design levels: branch_predictor    
root of   0 design levels: branch_decision     
root of   0 design levels: ALUControl          
root of   1 design levels: alu                 
root of   0 design levels: full_adder          
root of   0 design levels: adder               
root of   2 design levels: dsp_addsub          
root of   2 design levels: dsp_subtractor      
root of   2 design levels: dsp_adder           
root of   1 design levels: RAM                 
Automatically selected top as design top module.

21.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Parameter 1 (\WIDTH) = 9

21.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=9'.
Parameter 1 (\WIDTH) = 11

21.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\WIDTH) = 11
Generating RTLIL representation for module `$paramod\mux2to1\WIDTH=11'.

21.2.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter

21.2.6. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \full_adder
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \id_ex
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Removing unused module `\adder'.
Removing unused module `\dsp_addsub'.
Removing unused module `\dsp_subtractor'.
Removing unused module `\RAM'.
Removed 4 unused modules.
Warning: Resizing cell port cpu.mem_wb_reg.data_out from 85 bits to 117 bits.
Warning: Resizing cell port cpu.mem_wb_reg.data_in from 85 bits to 117 bits.
Warning: Resizing cell port cpu.ex_mem_reg.data_out from 121 bits to 155 bits.
Warning: Resizing cell port cpu.ex_mem_reg.data_in from 121 bits to 155 bits.

21.3. Executing PROC pass (convert processes to netlists).

21.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$315'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$280'.
Cleaned up 0 empty switches.

21.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$275 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$240 in module data_mem.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$79 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$79 in module ALUControl.
Removed a total of 5 dead cases.

21.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 28 assignments to connections.

21.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$291'.
  Set init value: \outAddr = 0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$289'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$287'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$285'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$283'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$276'.
  Set init value: \imm = 0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$254'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$253'.
  Set init value: \state = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$105'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$80'.
  Set init value: \ALUCtl = 7'0000000

21.3.5. Executing PROC_ARST pass (detect async resets in processes).

21.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$toplevel.v:11$318'.
Creating decoders for process `\top.$proc$toplevel.v:10$317'.
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$294'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$293_DATA[31:0]$296
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$293_ADDR[4:0]$295
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$291'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$290'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$289'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$288'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$287'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$286'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$285'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$284'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$283'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$282'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$276'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$275'.
     1/1: $1\imm[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$254'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$253'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$240'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$171_DATA[31:0]$242
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$171_ADDR[31:0]$241
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$236'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$105'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:63$90'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:54$89'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$80'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$79'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]

21.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:11$318'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:10$317'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$275'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$79'.

21.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$862' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$863' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$864' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$865' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$866' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$867' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$868' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$293_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$869' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$293_DATA' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$870' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$293_EN' using process `\regfile.$proc$verilog/register_file.v:95$294'.
  created $dff cell `$procdff$871' with positive edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$290'.
  created $dff cell `$procdff$872' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$288'.
  created $dff cell `$procdff$873' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$286'.
  created $dff cell `$procdff$874' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$284'.
  created $dff cell `$procdff$875' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$282'.
  created $dff cell `$procdff$876' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$877' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$878' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$879' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$880' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$881' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$882' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$883' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$884' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$885' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$171_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$886' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$171_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$887' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$171_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$240'.
  created $dff cell `$procdff$888' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$236'.
  created $dff cell `$procdff$889' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:63$90'.
  created $dff cell `$procdff$890' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:54$89'.
  created $dff cell `$procdff$891' with negative edge clock.

21.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$toplevel.v:11$318'.
Removing empty process `top.$proc$toplevel.v:10$317'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$294'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$294'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$291'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$290'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$289'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$288'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$287'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$286'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$285'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$284'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$283'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$282'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$276'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$275'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$275'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$254'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$253'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$240'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$240'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$236'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$236'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$105'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:63$90'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:63$90'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:54$89'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$80'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$79'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$79'.
Cleaned up 18 empty switches.

21.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module program_counter.
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module mux2to1.
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module imm_gen.
Optimizing module ForwardingUnit.
<suppressed ~4 debug messages>
Optimizing module adder_dsp.
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module sign_mask_gen.
Optimizing module cpu.
Optimizing module control.
Optimizing module branch_predictor.
Optimizing module branch_decision.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module full_adder.
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module dsp_adder.

21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \dsp_adder..
Removed 0 unused cells and 190 unused wires.
<suppressed ~23 debug messages>

21.6. Executing CHECK pass (checking for obvious problems).
checking module $paramod\mux2to1\WIDTH=11..
checking module $paramod\mux2to1\WIDTH=9..
checking module ALUControl..
checking module ForwardingUnit..
checking module adder_dsp..
checking module alu..
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module data_mem..
checking module dsp_adder..
checking module ex_mem..
checking module full_adder..
checking module id_ex..
checking module if_id..
checking module imm_gen..
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 0 problems.

21.7. Executing OPT pass (performing simple optimizations).

21.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 90 cells.

21.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$754.
    dead port 2/2 on $mux $procmux$756.
    dead port 2/2 on $mux $procmux$770.
    dead port 2/2 on $mux $procmux$809.
    dead port 2/2 on $mux $procmux$772.
    dead port 2/2 on $mux $procmux$820.
    dead port 2/2 on $mux $procmux$834.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$745.
    dead port 2/2 on $mux $procmux$850.
    dead port 2/2 on $mux $procmux$793.
    dead port 2/2 on $mux $procmux$795.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~43 debug messages>

21.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$776: { $procmux$771_CMP $procmux$783_CMP $auto$opt_reduce.cc:134:opt_mux$893 $procmux$780_CMP $procmux$755_CMP $procmux$778_CMP $procmux$777_CMP }
    New ctrl vector for $pmux cell $procmux$828: $auto$opt_reduce.cc:134:opt_mux$895
    New ctrl vector for $pmux cell $procmux$853: { $auto$opt_reduce.cc:134:opt_mux$897 $procmux$851_CMP $procmux$835_CMP $procmux$821_CMP $procmux$796_CMP $procmux$757_CMP $procmux$746_CMP }
    New ctrl vector for $pmux cell $procmux$816: $auto$opt_reduce.cc:134:opt_mux$899
    New ctrl vector for $pmux cell $procmux$800: { $procmux$771_CMP $auto$opt_reduce.cc:134:opt_mux$901 $procmux$780_CMP $procmux$778_CMP $procmux$777_CMP $procmux$783_CMP $procmux$755_CMP }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$677:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [31:1] = { $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] $0$memwr$\data_block$verilog/data_mem.v:283$171_EN[31:0]$243 [0] }
    New ctrl vector for $pmux cell $procmux$712: { $procmux$687_CMP $procmux$711_CMP $auto$opt_reduce.cc:134:opt_mux$903 }
    New ctrl vector for $pmux cell $procmux$724: { $procmux$687_CMP $auto$opt_reduce.cc:134:opt_mux$905 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$670: { $procmux$676_CMP $procmux$675_CMP $auto$opt_reduce.cc:134:opt_mux$907 $procmux$672_CMP $procmux$671_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$663:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0]
      New connections: $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [31:1] = { $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] $0$memwr$\regfile$verilog/register_file.v:97$293_EN[31:0]$297 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 10 changes.

21.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

21.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

21.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 105 unused wires.
<suppressed ~8 debug messages>

21.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.7.9. Rerunning OPT passes. (Maybe there is more to do..)

21.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

21.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

21.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

21.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.7.16. Finished OPT passes. (There is nothing left to do.)

21.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$741 ($pmux).
Removed top 1 bits (of 2) from port B of cell ALUControl.$procmux$744_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$757_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$767 ($pmux).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$781_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$782_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$783_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$790 ($pmux).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$796_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$800 ($pmux).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$816 ($mux).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$821_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$828 ($mux).
Removed top 5 bits (of 7) from port B of cell ALUControl.$procmux$835_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$860_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$861_CMP0 ($eq).
Removed top 4 bits (of 7) from wire ALUControl.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$4\ALUCtl[6:0].
Removed top 3 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:198$5 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:199$6 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:200$7 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:201$8 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:202$9 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:203$10 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$eq$verilog/alu.v:204$11 ($eq).
Removed top 31 bits (of 32) from mux cell alu.$ternary$verilog/alu.v:241$25 ($mux).
Removed top 31 bits (of 32) from mux cell alu.$ternary$verilog/alu.v:241$26 ($mux).
Removed top 31 bits (of 32) from port B of cell alu.$or$verilog/alu.v:251$44 ($or).
Removed top 2 bits (of 3) from port B of cell alu.$eq$verilog/alu.v:258$58 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$eq$verilog/alu.v:259$59 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$eq$verilog/alu.v:260$60 ($eq).
Removed top 31 bits (of 32) from wire alu.$ternary$verilog/alu.v:241$25_Y.
Removed top 31 bits (of 32) from wire alu.w_slt.
Removed top 23 address bits (of 32) from memory read port data_mem.$memrd$\data_block$verilog/data_mem.v:261$247 (data_block).
Removed top 23 address bits (of 32) from memory write port data_mem.$memwr$\data_block$verilog/data_mem.v:0$252 (data_block).
Removed top 18 bits (of 32) from port B of cell data_mem.$eq$verilog/data_mem.v:232$238 ($eq).
Removed top 19 bits (of 32) from port B of cell data_mem.$sub$verilog/data_mem.v:261$248 ($sub).
Removed top 18 bits (of 32) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$248 ($sub).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$678_CMP0 ($eq).
Removed cell data_mem.$procmux$679 ($mux).
Removed cell data_mem.$procmux$681 ($mux).
Removed top 31 bits (of 32) from port B of cell data_mem.$procmux$711_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$714_CMP0 ($eq).
Removed top 18 bits (of 32) from FF cell data_mem.$procdff$886 ($dff).
Removed top 31 bits (of 32) from FF cell data_mem.$procdff$888 ($dff).
Removed top 5 bits (of 14) from FF cell data_mem.$procdff$886 ($dff).
Removed top 5 bits (of 14) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$248 ($sub).
Removed top 1 bits (of 10) from port A of cell data_mem.$sub$verilog/data_mem.v:261$248 ($sub).
Removed top 12 bits (of 13) from port B of cell data_mem.$sub$verilog/data_mem.v:261$248 ($sub).
Removed top 23 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:283$171_ADDR[31:0]$241.
Removed top 23 bits (of 32) from wire data_mem.$memwr$\data_block$verilog/data_mem.v:283$171_ADDR.
Removed top 23 bits (of 32) from wire data_mem.$sub$verilog/data_mem.v:261$248_Y.
Removed top 1 bits (of 32) from mux cell imm_gen.$procmux$670 ($pmux).
Removed top 3 bits (of 4) from port B of cell imm_gen.$procmux$673_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$674_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$675_CMP0 ($eq).
Removed top 24 address bits (of 32) from memory init port instruction_memory.$meminit$\instruction_memory$verilog/instruction_mem.v:0$279 (instruction_memory).
Removed top 24 address bits (of 32) from memory read port instruction_memory.$memrd$\instruction_memory$verilog/instruction_mem.v:67$277 (instruction_memory).
Removed top 27 address bits (of 32) from memory init port regfile.$meminit$\regfile$verilog/register_file.v:0$313 (regfile).
Removed cell regfile.$procmux$665 ($mux).
Removed cell regfile.$procmux$667 ($mux).
Removed top 31 bits (of 32) from FF cell regfile.$procdff$871 ($dff).

21.9. Executing PEEPOPT pass (run peephole optimizers).

21.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~4 debug messages>

21.11. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$verilog/alu.v:243$29 ($sshr):
    Found 1 activation_patterns using ctrl signal \op_sra.
    No candidates found.
  Analyzing resource sharing options for $shr$verilog/alu.v:242$27 ($shr):
    Found 1 activation_patterns using ctrl signal \op_srl.
    No candidates found.
  Analyzing resource sharing options for $shl$verilog/alu.v:244$31 ($shl):
    Found 1 activation_patterns using ctrl signal \op_sll.
    No candidates found.

21.12. Executing TECHMAP pass (map to technology primitives).

21.12.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

21.12.2. Continuing TECHMAP pass.
No more expansions possible.

21.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

21.15. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\mux2to1\WIDTH=11:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\WIDTH=9:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module adder_dsp:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$verilog/alu.v:256$53 ($add).
  creating $alu model for $macc $add$verilog/alu.v:256$53.
  creating $alu cell for $add$verilog/alu.v:256$53: $auto$alumacc.cc:485:replace_alu$916
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_decision:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_predictor:
  creating $macc model for $add$verilog/branch_predictor.v:70$103 ($add).
  creating $alu model for $macc $add$verilog/branch_predictor.v:70$103.
  creating $alu cell for $add$verilog/branch_predictor.v:70$103: $auto$alumacc.cc:485:replace_alu$919
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dsp_adder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ex_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module full_adder:
  creating $macc model for $add$verilog/adder.v:66$2 ($add).
  creating $macc model for $add$verilog/adder.v:66$3 ($add).
  merging $macc model for $add$verilog/adder.v:66$2 into $add$verilog/adder.v:66$3.
  creating $alu model for $macc $add$verilog/adder.v:66$3.
  creating $alu cell for $add$verilog/adder.v:66$3: $auto$alumacc.cc:485:replace_alu$922
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module id_ex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module if_id:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_memory:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mem_wb:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sign_mask_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

21.16. Executing OPT pass (performing simple optimizations).

21.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~6 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

21.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

21.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

21.16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.16.6. Executing OPT_RMDFF pass (remove dff with constant values).

21.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

21.16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.16.9. Rerunning OPT passes. (Maybe there is more to do..)

21.16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

21.16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

21.16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.16.13. Executing OPT_RMDFF pass (remove dff with constant values).

21.16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.16.16. Finished OPT passes. (There is nothing left to do.)

21.17. Executing FSM pass (extract and optimize FSM).

21.17.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking data_mem.state as FSM state register:
    Register has an initialization value.

21.17.2. Executing FSM_EXTRACT pass (extracting FSM from design).

21.17.3. Executing FSM_OPT pass (simple optimizations of FSMs).

21.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.17.5. Executing FSM_OPT pass (simple optimizations of FSMs).

21.17.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

21.17.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

21.17.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

21.18. Executing OPT pass (performing simple optimizations).

21.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

21.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.18.5. Finished fast OPT passes.

21.19. Executing MEMORY pass.

21.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

21.19.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\data_block$verilog/data_mem.v:0$252' in module `\data_mem': merged $dff to cell.
Checking cell `$memrd$\data_block$verilog/data_mem.v:261$247' in module `\data_mem': merged data $dff with rd enable to cell.
Checking cell `$memrd$\instruction_memory$verilog/instruction_mem.v:67$277' in module `\instruction_memory': no (compatible) $dff found.
Checking cell `$memwr$\regfile$verilog/register_file.v:0$314' in module `\regfile': merged $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:104$301' in module `\regfile': merged data $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:105$302' in module `\regfile': merged data $dff to cell.

21.19.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 8 unused cells and 11 unused wires.
<suppressed ~10 debug messages>

21.19.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

21.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.19.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\data_block' in module `\data_mem':
  $memwr$\data_block$verilog/data_mem.v:0$252 ($memwr)
  $memrd$\data_block$verilog/data_mem.v:261$247 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\instruction_memory' in module `\instruction_memory':
  $meminit$\instruction_memory$verilog/instruction_mem.v:0$279 ($meminit)
  $memrd$\instruction_memory$verilog/instruction_mem.v:67$277 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\regfile':
  $meminit$\regfile$verilog/register_file.v:0$313 ($meminit)
  $memwr$\regfile$verilog/register_file.v:0$314 ($memwr)
  $memrd$\regfile$verilog/register_file.v:104$301 ($memrd)
  $memrd$\regfile$verilog/register_file.v:105$302 ($memrd)

21.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing data_mem.data_block:
  Properties: ports=2 bits=8512 rports=1 wports=1 dbits=32 abits=9 words=266
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3936 efficiency=51
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=246 dwaste=0 bwaste=3936 waste=3936 efficiency=51
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=1968 efficiency=51
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3032 efficiency=25
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3564 efficiency=12
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=246 dwaste=0 bwaste=1968 waste=1968 efficiency=51
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=758 dwaste=0 bwaste=3032 waste=3032 efficiency=25
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1782 dwaste=0 bwaste=3564 waste=3564 efficiency=12
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=12, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=25, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=51, cells=4, acells=1
    Efficiency for rule 1.1: efficiency=51, cells=4, acells=2
    Selected rule 4.1 with efficiency 51.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_block.3.0.0
Processing instruction_memory.instruction_memory:
  Properties: ports=1 bits=5696 rports=1 wports=0 dbits=32 abits=8 words=178
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=78 dwaste=0 bwaste=1248 waste=1248 efficiency=69
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=334 dwaste=0 bwaste=2672 waste=2672 efficiency=34
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=846 dwaste=0 bwaste=3384 waste=3384 efficiency=17
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1870 dwaste=0 bwaste=3740 waste=3740 efficiency=8
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  No acceptable bram resources found.
Processing regfile.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1

21.22. Executing TECHMAP pass (map to technology primitives).

21.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

21.22.2. Continuing TECHMAP pass.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod\$__ICE40_RAM4K_M123\CFG_ABITS=9\CFG_DBITS=8\CLKPOL2=1\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$66c3fa288a62dc560ce3ddd26d81551ab195105f\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~146 debug messages>

21.23. Executing ICE40_BRAMINIT pass.

21.24. Executing OPT pass (performing simple optimizations).

21.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
<suppressed ~4 debug messages>
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
<suppressed ~6 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~42 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
<suppressed ~17 debug messages>
Optimizing module sign_mask_gen.
Optimizing module top.

21.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

21.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

21.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 201 unused wires.
<suppressed ~5 debug messages>

21.24.5. Finished fast OPT passes.

21.25. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \instruction_memory in module \instruction_memory:
  created 178 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 255 $mux cells.
  write interface: 0 write mux blocks.

21.26. Executing OPT pass (performing simple optimizations).

21.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~152 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

21.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$767:
      Old ports: A=3'010, B=3'110, Y=$8\ALUCtl[6:0] [2:0]
      New ports: A=1'0, B=1'1, Y=$8\ALUCtl[6:0] [2]
      New connections: $8\ALUCtl[6:0] [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $procmux$776:
      Old ports: A={ 4'0000 $8\ALUCtl[6:0] [2:0] }, B={ 25'0000101000011100010000000 $6\ALUCtl[6:0] [2:0] 14'00000010000000 }, Y=$7\ALUCtl[6:0]
      New ports: A={ 1'0 $8\ALUCtl[6:0] [2:0] }, B={ 13'0101011110000 $6\ALUCtl[6:0] [2:0] 8'00010000 }, Y=$7\ALUCtl[6:0] [3:0]
      New connections: $7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $procmux$790:
      Old ports: A=3'011, B=3'100, Y=$6\ALUCtl[6:0] [2:0]
      New ports: A=2'01, B=2'10, Y={ $6\ALUCtl[6:0] [2] $6\ALUCtl[6:0] [0] }
      New connections: $6\ALUCtl[6:0] [1] = $6\ALUCtl[6:0] [0]
    Consolidated identical input bits for $mux cell $procmux$816:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUCtl[6:0] [0]
      New connections: $4\ALUCtl[6:0] [3:1] = { $4\ALUCtl[6:0] [0] $4\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$828:
      Old ports: A=4'1111, B=4'0010, Y=$3\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$3\ALUCtl[6:0] [0]
      New connections: $3\ALUCtl[6:0] [3:1] = { $3\ALUCtl[6:0] [0] $3\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $procmux$843:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $2\ALUCtl[6:0] [6:4] $2\ALUCtl[6:0] [0] }
      New connections: $2\ALUCtl[6:0] [3:1] = { $2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$218:
      Old ports: A={ 24'000000000000000000000000 \word_buf [15:8] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:8] }, Y=$ternary$verilog/data_mem.v:204$218_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:204$218_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$218_Y [31:9] $ternary$verilog/data_mem.v:204$218_Y [7:0] } = { $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] $ternary$verilog/data_mem.v:204$218_Y [8] \word_buf [15:8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$220:
      Old ports: A={ 24'000000000000000000000000 \word_buf [7:0] }, B={ \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7:0] }, Y=$ternary$verilog/data_mem.v:204$220_Y
      New ports: A=1'0, B=\word_buf [7], Y=$ternary$verilog/data_mem.v:204$220_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$220_Y [31:9] $ternary$verilog/data_mem.v:204$220_Y [7:0] } = { $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] $ternary$verilog/data_mem.v:204$220_Y [8] \word_buf [7:0] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$223:
      Old ports: A={ 24'000000000000000000000000 \word_buf [31:24] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:24] }, Y=$ternary$verilog/data_mem.v:205$223_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:205$223_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$223_Y [31:9] $ternary$verilog/data_mem.v:205$223_Y [7:0] } = { $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] $ternary$verilog/data_mem.v:205$223_Y [8] \word_buf [31:24] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$225:
      Old ports: A={ 24'000000000000000000000000 \word_buf [23:16] }, B={ \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23:16] }, Y=$ternary$verilog/data_mem.v:205$225_Y
      New ports: A=1'0, B=\word_buf [23], Y=$ternary$verilog/data_mem.v:205$225_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$225_Y [31:9] $ternary$verilog/data_mem.v:205$225_Y [7:0] } = { $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] $ternary$verilog/data_mem.v:205$225_Y [8] \word_buf [23:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$228:
      Old ports: A={ 16'0000000000000000 \word_buf [31:16] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:16] }, Y=$ternary$verilog/data_mem.v:206$228_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:206$228_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$228_Y [31:17] $ternary$verilog/data_mem.v:206$228_Y [15:0] } = { $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] $ternary$verilog/data_mem.v:206$228_Y [16] \word_buf [31:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$230:
      Old ports: A={ 16'0000000000000000 \word_buf [15:0] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:0] }, Y=$ternary$verilog/data_mem.v:206$230_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:206$230_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$230_Y [31:17] $ternary$verilog/data_mem.v:206$230_Y [15:0] } = { $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] $ternary$verilog/data_mem.v:206$230_Y [16] \word_buf [15:0] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$221:
      Old ports: A=$ternary$verilog/data_mem.v:204$220_Y, B=$ternary$verilog/data_mem.v:204$218_Y, Y=\out1
      New ports: A={ $ternary$verilog/data_mem.v:204$220_Y [8] \word_buf [7:0] }, B={ $ternary$verilog/data_mem.v:204$218_Y [8] \word_buf [15:8] }, Y=\out1 [8:0]
      New connections: \out1 [31:9] = { \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$226:
      Old ports: A=$ternary$verilog/data_mem.v:205$225_Y, B=$ternary$verilog/data_mem.v:205$223_Y, Y=\out2
      New ports: A={ $ternary$verilog/data_mem.v:205$225_Y [8] \word_buf [23:16] }, B={ $ternary$verilog/data_mem.v:205$223_Y [8] \word_buf [31:24] }, Y=\out2 [8:0]
      New connections: \out2 [31:9] = { \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$231:
      Old ports: A=$ternary$verilog/data_mem.v:206$230_Y, B=$ternary$verilog/data_mem.v:206$228_Y, Y=\out3
      New ports: A={ $ternary$verilog/data_mem.v:206$230_Y [16] \word_buf [15:0] }, B={ $ternary$verilog/data_mem.v:206$228_Y [16] \word_buf [31:16] }, Y=\out3 [16:0]
      New connections: \out3 [31:17] = { \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:209$233:
      Old ports: A=\out1, B=\out2, Y=\out5
      New ports: A=\out1 [8:0], B=\out2 [8:0], Y=\out5 [8:0]
      New connections: \out5 [31:9] = { \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 16 changes.

21.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~6 debug messages>
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

21.26.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\instruction_memory[177]$1326 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[176]$1324 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[175]$1322 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[174]$1320 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[173]$1318 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[172]$1316 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[171]$1314 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[170]$1312 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[169]$1310 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[168]$1308 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[167]$1306 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[166]$1304 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[165]$1302 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[164]$1300 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[163]$1298 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[162]$1296 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[161]$1294 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[160]$1292 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[159]$1290 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[158]$1288 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[157]$1286 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[156]$1284 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[155]$1282 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[154]$1280 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[153]$1278 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[152]$1276 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[151]$1274 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[150]$1272 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[149]$1270 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[148]$1268 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[147]$1266 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[146]$1264 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[145]$1262 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[144]$1260 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[143]$1258 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[142]$1256 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[141]$1254 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[140]$1252 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[139]$1250 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[138]$1248 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[137]$1246 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[136]$1244 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[135]$1242 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[134]$1240 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[133]$1238 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[132]$1236 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[131]$1234 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[130]$1232 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[129]$1230 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[128]$1228 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[127]$1226 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[126]$1224 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[125]$1222 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[124]$1220 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[123]$1218 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[122]$1216 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[121]$1214 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[120]$1212 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[119]$1210 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[118]$1208 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[117]$1206 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[116]$1204 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[115]$1202 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[114]$1200 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[113]$1198 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[112]$1196 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[111]$1194 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[110]$1192 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[109]$1190 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[108]$1188 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[107]$1186 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[106]$1184 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[105]$1182 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[104]$1180 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[103]$1178 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[102]$1176 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[101]$1174 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[100]$1172 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[99]$1170 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[98]$1168 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[97]$1166 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[96]$1164 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[95]$1162 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[94]$1160 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[93]$1158 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[92]$1156 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[91]$1154 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[90]$1152 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[89]$1150 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[88]$1148 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[87]$1146 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[86]$1144 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[85]$1142 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[84]$1140 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[83]$1138 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[82]$1136 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[81]$1134 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[80]$1132 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[79]$1130 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[78]$1128 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[77]$1126 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[76]$1124 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[75]$1122 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[74]$1120 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[73]$1118 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[72]$1116 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[71]$1114 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[70]$1112 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[69]$1110 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[68]$1108 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[67]$1106 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[66]$1104 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[65]$1102 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[64]$1100 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[63]$1098 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[62]$1096 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[61]$1094 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[60]$1092 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[59]$1090 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[58]$1088 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[57]$1086 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[56]$1084 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[55]$1082 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[54]$1080 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[53]$1078 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[52]$1076 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[51]$1074 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[50]$1072 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[49]$1070 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[48]$1068 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[47]$1066 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[46]$1064 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[45]$1062 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[44]$1060 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[43]$1058 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[42]$1056 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[41]$1054 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[40]$1052 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[39]$1050 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[38]$1048 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[37]$1046 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[36]$1044 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[35]$1042 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[34]$1040 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[33]$1038 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[32]$1036 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[31]$1034 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[30]$1032 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[29]$1030 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[28]$1028 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[27]$1026 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[26]$1024 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[25]$1022 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[24]$1020 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[23]$1018 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[22]$1016 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[21]$1014 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[20]$1012 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[19]$1010 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[18]$1008 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[17]$1006 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[16]$1004 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[15]$1002 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[14]$1000 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[13]$998 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[12]$996 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[11]$994 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[10]$992 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[9]$990 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[8]$988 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[7]$986 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[6]$984 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[5]$982 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[4]$980 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[3]$978 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[2]$976 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[1]$974 ($dff) from module instruction_memory.
Removing $memory\instruction_memory[0]$972 ($dff) from module instruction_memory.
Replaced 178 DFF cells.

21.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 510 unused wires.
<suppressed ~2 debug messages>

21.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~125 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.26.9. Rerunning OPT passes. (Maybe there is more to do..)

21.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

21.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][3]$1718:
      Old ports: A=50398227, B=9783, Y=$memory\instruction_memory$rdmux[0][6][1]$b$1522
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][1]$b$1522 [31:17] $memory\instruction_memory$rdmux[0][6][1]$b$1522 [15:3] $memory\instruction_memory$rdmux[0][6][1]$b$1522 [1:0] } = { 6'000000 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] 9'000000000 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] 3'001 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] 3'000 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][0]$1709:
      Old ports: A=19, B=4407, Y=$memory\instruction_memory$rdmux[0][6][0]$a$1518
      New ports: A=1'0, B=1'1, Y=$memory\instruction_memory$rdmux[0][6][0]$a$1518 [2]
      New connections: { $memory\instruction_memory$rdmux[0][6][0]$a$1518 [31:3] $memory\instruction_memory$rdmux[0][6][0]$a$1518 [1:0] } = { 19'0000000000000000000 $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] 3'000 $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] 2'00 $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][16]$1757:
      Old ports: A=32'11111110000001000010010000100011, B=41943151, Y=$memory\instruction_memory$rdmux[0][6][8]$a$1542
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][8]$a$1542 [31:11] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [9:3] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [1:0] } = { $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] 2'10 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [2] 4'0000 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] 4'0000 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] 5'00000 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [2] 2'10 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][22]$1775:
      Old ports: A=4195895, B=32'11111100110001011100101011100011, Y=$memory\instruction_memory$rdmux[0][6][11]$a$1551
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][11]$a$1551 [31:7] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [5:3] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [1:0] } = { $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] 2'00 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] 4'1000 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] 1'0 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] 2'00 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [2] 2'10 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] 1'1 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [2] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][23]$1778:
      Old ports: A=32'11110110110111111111000001101111, B=0, Y=$memory\instruction_memory$rdmux[0][6][11]$b$1552
      New ports: A=1'1, B=1'0, Y=$memory\instruction_memory$rdmux[0][6][11]$b$1552 [0]
      New connections: $memory\instruction_memory$rdmux[0][6][11]$b$1552 [31:1] = { $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 1'0 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 1'0 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 1'0 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 5'00000 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 1'0 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][4]$1721:
      Old ports: A=32'11111110110001000010001000100011, B=32'11111110010001000010011000000011, Y=$memory\instruction_memory$rdmux[0][6][2]$a$1524
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][2]$a$1524 [10] $memory\instruction_memory$rdmux[0][6][2]$a$1524 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][6][2]$a$1524 [31:11] $memory\instruction_memory$rdmux[0][6][2]$a$1524 [9:6] $memory\instruction_memory$rdmux[0][6][2]$a$1524 [4:0] } = { 8'11111110 $memory\instruction_memory$rdmux[0][6][2]$a$1524 [5] 21'100010000100100000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][12]$1745:
      Old ports: A=4195895, B=32'11111100110001011100101011100011, Y=$memory\instruction_memory$rdmux[0][6][6]$a$1536
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][6]$a$1536 [31:7] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [5:3] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [1:0] } = { $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 2'00 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 4'1000 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 1'0 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 2'00 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [2] 2'10 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 1'1 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [2] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][5]$1724:
      Old ports: A=267388307, B=11935779, Y=$memory\instruction_memory$rdmux[0][6][2]$b$1525
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][6][2]$b$1525 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][6][2]$b$1525 [31:6] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [3:0] } = { 4'0000 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] 1'1 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] 3'110 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5] 3'000 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5] 2'00 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] 1'0 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][19]$1766:
      Old ports: A=32'11111100110101000010110000100011, B=32'11111100111001000010111000100011, Y=$memory\instruction_memory$rdmux[0][6][9]$b$1546
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][9]$b$1546 [20] $memory\instruction_memory$rdmux[0][6][9]$b$1546 [9] }
      New connections: { $memory\instruction_memory$rdmux[0][6][9]$b$1546 [31:21] $memory\instruction_memory$rdmux[0][6][9]$b$1546 [19:10] $memory\instruction_memory$rdmux[0][6][9]$b$1546 [8:0] } = { 10'1111110011 $memory\instruction_memory$rdmux[0][6][9]$b$1546 [9] 19'0100001011000100011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][21]$1772:
      Old ports: A=32'11111110110001000010010000100011, B=32'11111110100001000010010110000011, Y=$memory\instruction_memory$rdmux[0][6][10]$b$1549
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][10]$b$1549 [7] $memory\instruction_memory$rdmux[0][6][10]$b$1549 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][6][10]$b$1549 [31:8] $memory\instruction_memory$rdmux[0][6][10]$b$1549 [6] $memory\instruction_memory$rdmux[0][6][10]$b$1549 [4:0] } = { 9'111111101 $memory\instruction_memory$rdmux[0][6][10]$b$1549 [5] 13'0001000010010 $memory\instruction_memory$rdmux[0][6][10]$b$1549 [7] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][15]$1754:
      Old ports: A=32'11111110010001000010011000000011, B=11935779, Y=$memory\instruction_memory$rdmux[0][6][7]$b$1540
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][6][7]$b$1540 [31:10] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [8:6] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [4:0] } = { $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] 1'0 $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] 2'01 $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] 6'000100 $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] 8'00000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][2]$1715:
      Old ports: A=32'11111101000000010000000100010011, B=42018339, Y=$memory\instruction_memory$rdmux[0][6][1]$a$1521
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][6][1]$a$1521 [31:6] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [3:0] } = { $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5] 9'000000100 $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5] 2'00 $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][44]$1649:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][44]$a$1650, B=32'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Y=$memory\instruction_memory$rdmux[0][5][22]$a$1488
      New ports: A=1'0, B=1'x, Y=$memory\instruction_memory$rdmux[0][5][22]$a$1488 [0]
      New connections: $memory\instruction_memory$rdmux[0][5][22]$a$1488 [31:1] = { $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] $memory\instruction_memory$rdmux[0][5][22]$a$1488 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][6]$1727:
      Old ports: A=32'11111110000001000010011000100011, B=41943151, Y=$memory\instruction_memory$rdmux[0][6][3]$a$1527
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][3]$a$1527 [31:10] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [8:3] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [1:0] } = { $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 2'10 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [2] 4'0000 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 4'0000 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 2'00 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 2'00 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [2] 2'10 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][10]$1739:
      Old ports: A=32'11111110110001000010011000000011, B=1443347, Y=$memory\instruction_memory$rdmux[0][6][5]$a$1533
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [4] }
      New connections: { $memory\instruction_memory$rdmux[0][6][5]$a$1533 [31:14] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [12:5] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [3:0] } = { $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] 1'0 $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] 1'0 $memory\instruction_memory$rdmux[0][6][5]$a$1533 [4] 2'01 $memory\instruction_memory$rdmux[0][6][5]$a$1533 [4] 15'000001100000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][11]$1742:
      Old ports: A=32'11111110110001000010011000100011, B=32'11111110110001000010010110000011, Y=$memory\instruction_memory$rdmux[0][6][5]$b$1534
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][5]$b$1534 [7] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][6][5]$b$1534 [31:8] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [6] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [4:0] } = { 22'1111111011000100001001 $memory\instruction_memory$rdmux[0][6][5]$b$1534 [5] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [7] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][13]$1748:
      Old ports: A=32'11111101100001000010010110000011, B=32'11111101110001000010011000000011, Y=$memory\instruction_memory$rdmux[0][6][6]$b$1537
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][6]$b$1537 [9] $memory\instruction_memory$rdmux[0][6][6]$b$1537 [7] }
      New connections: { $memory\instruction_memory$rdmux[0][6][6]$b$1537 [31:10] $memory\instruction_memory$rdmux[0][6][6]$b$1537 [8] $memory\instruction_memory$rdmux[0][6][6]$b$1537 [6:0] } = { 9'111111011 $memory\instruction_memory$rdmux[0][6][6]$b$1537 [9] 12'000100001001 $memory\instruction_memory$rdmux[0][6][6]$b$1537 [7] 7'0000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][14]$1751:
      Old ports: A=362003, B=32'11111111111101100100010110010011, Y=$memory\instruction_memory$rdmux[0][6][7]$a$1539
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][7]$a$1539 [9] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] }
      New connections: { $memory\instruction_memory$rdmux[0][6][7]$a$1539 [31:10] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [8] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [6:0] } = { $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] 2'01 $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [9] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [9] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] 4'0001 $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] 7'0010011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][17]$1760:
      Old ports: A=32'11111110010001000010011000000011, B=402947, Y=$memory\instruction_memory$rdmux[0][6][8]$b$1543
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [17] }
      New connections: { $memory\instruction_memory$rdmux[0][6][8]$b$1543 [31:23] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [21:18] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [16:0] } = { $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] 23'00000100010011000000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][18]$1763:
      Old ports: A=394899, B=1811, Y=$memory\instruction_memory$rdmux[0][6][9]$a$1545
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][6][9]$a$1545 [8:7]
      New connections: { $memory\instruction_memory$rdmux[0][6][9]$a$1545 [31:9] $memory\instruction_memory$rdmux[0][6][9]$a$1545 [6:0] } = { 13'0000000000000 $memory\instruction_memory$rdmux[0][6][9]$a$1545 [7] $memory\instruction_memory$rdmux[0][6][9]$a$1545 [7] 15'000000110010011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][1]$1712:
      Old ports: A=1073807635, B=4194415, Y=$memory\instruction_memory$rdmux[0][6][0]$b$1519
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][0]$b$1519 [31:5] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [3] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [1:0] } = { 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] 7'0000000 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] 5'00000 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] 7'0000000 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][20]$1769:
      Old ports: A=32'11111110100001000010011000000011, B=1443347, Y=$memory\instruction_memory$rdmux[0][6][10]$a$1548
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [4] }
      New connections: { $memory\instruction_memory$rdmux[0][6][10]$a$1548 [31:14] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [12:5] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [3:0] } = { $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] 1'0 $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] 2'00 $memory\instruction_memory$rdmux[0][6][10]$a$1548 [4] 2'01 $memory\instruction_memory$rdmux[0][6][10]$a$1548 [4] 15'000001100000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][7]$1730:
      Old ports: A=32'11111110010001000010011000000011, B=402947, Y=$memory\instruction_memory$rdmux[0][6][3]$b$1528
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [17] }
      New connections: { $memory\instruction_memory$rdmux[0][6][3]$b$1528 [31:23] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [21:18] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [16:0] } = { $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] 23'00000100010011000000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][8]$1733:
      Old ports: A=395155, B=2067, Y=$memory\instruction_memory$rdmux[0][6][4]$a$1530
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][6][4]$a$1530 [11] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] }
      New connections: { $memory\instruction_memory$rdmux[0][6][4]$a$1530 [31:12] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [10:8] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [6:0] } = { 13'0000000000000 $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] 5'00000 $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] 7'0010011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][9]$1736:
      Old ports: A=32'11111100111101000010110000100011, B=32'11111101000001000010111000100011, Y=$memory\instruction_memory$rdmux[0][6][4]$b$1531
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][6][4]$b$1531 [20] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [9] }
      New connections: { $memory\instruction_memory$rdmux[0][6][4]$b$1531 [31:21] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [19:10] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [8:0] } = { 7'1111110 $memory\instruction_memory$rdmux[0][6][4]$b$1531 [9] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [20] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [20] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [20] 19'0100001011000100011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][5]$1532:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][5]$a$1533, B=$memory\instruction_memory$rdmux[0][6][5]$b$1534, Y=$memory\instruction_memory$rdmux[0][5][2]$b$1429
      New ports: A={ $memory\instruction_memory$rdmux[0][6][5]$a$1533 [13] 3'100 $memory\instruction_memory$rdmux[0][6][5]$a$1533 [4] }, B={ 1'1 $memory\instruction_memory$rdmux[0][6][5]$b$1534 [5] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [7] $memory\instruction_memory$rdmux[0][6][5]$b$1534 [5] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [9] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [7] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][2]$b$1429 [31:14] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [12:10] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [8] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [6] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [3:0] } = { $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] 1'0 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] 1'0 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [4] 2'01 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [4] 6'000001 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [7] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][22]$1487:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][22]$a$1488, B=32'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Y=$memory\instruction_memory$rdmux[0][4][11]$a$1407
      New ports: A=$memory\instruction_memory$rdmux[0][5][22]$a$1488 [0], B=1'x, Y=$memory\instruction_memory$rdmux[0][4][11]$a$1407 [0]
      New connections: $memory\instruction_memory$rdmux[0][4][11]$a$1407 [31:1] = { $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] $memory\instruction_memory$rdmux[0][4][11]$a$1407 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][9]$1544:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][9]$a$1545, B=$memory\instruction_memory$rdmux[0][6][9]$b$1546, Y=$memory\instruction_memory$rdmux[0][5][4]$b$1435
      New ports: A={ 2'00 $memory\instruction_memory$rdmux[0][6][9]$a$1545 [7] 1'1 $memory\instruction_memory$rdmux[0][6][9]$a$1545 [8:7] 2'01 }, B={ $memory\instruction_memory$rdmux[0][6][9]$b$1546 [9] $memory\instruction_memory$rdmux[0][6][9]$b$1546 [20] 1'1 $memory\instruction_memory$rdmux[0][6][9]$b$1546 [9] 4'0010 }, Y={ $memory\instruction_memory$rdmux[0][5][4]$b$1435 [21:20] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [18] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [9:7] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][4]$b$1435 [31:22] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [19] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [17:10] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [6] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [3:0] } = { $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 2'00 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 1'0 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [7] 3'000 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 1'0 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 6'100011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][0]$1517:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][0]$a$1518, B=$memory\instruction_memory$rdmux[0][6][0]$b$1519, Y=$memory\instruction_memory$rdmux[0][5][0]$a$1422
      New ports: A={ 1'0 $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] 2'10 $memory\instruction_memory$rdmux[0][6][0]$a$1518 [2] }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [4] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [2] }, Y={ $memory\instruction_memory$rdmux[0][5][0]$a$1422 [16] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [12] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [8] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [4:2] }
      New connections: { $memory\instruction_memory$rdmux[0][5][0]$a$1422 [31:17] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [15:13] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [11:9] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [7:5] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [1:0] } = { 1'0 $memory\instruction_memory$rdmux[0][5][0]$a$1422 [16] 7'0000000 $memory\instruction_memory$rdmux[0][5][0]$a$1422 [3] 12'000000000000 $memory\instruction_memory$rdmux[0][5][0]$a$1422 [3:2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][11]$1550:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][11]$a$1551, B=$memory\instruction_memory$rdmux[0][6][11]$b$1552, Y=$memory\instruction_memory$rdmux[0][5][5]$b$1438
      New ports: A={ 1'1 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [6] $memory\instruction_memory$rdmux[0][6][11]$a$1551 [2] 1'0 $memory\instruction_memory$rdmux[0][6][11]$a$1551 [2] 1'1 }, B={ 2'00 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] 1'0 $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] $memory\instruction_memory$rdmux[0][6][11]$b$1552 [0] }, Y={ $memory\instruction_memory$rdmux[0][5][5]$b$1438 [9] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7:6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [4:2] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][5][5]$b$1438 [31:10] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [8] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [5] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [1] } = { $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7:6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] 1'0 $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] 1'0 $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [4] 1'0 $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][1]$1520:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][1]$a$1521, B=$memory\instruction_memory$rdmux[0][6][1]$b$1522, Y=$memory\instruction_memory$rdmux[0][5][0]$b$1423
      New ports: A={ $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5] 1'1 $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4] $memory\instruction_memory$rdmux[0][6][1]$a$1521 [5:4] 1'0 }, B={ $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] 1'0 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [16] 2'10 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] 1'1 $memory\instruction_memory$rdmux[0][6][1]$b$1522 [2] }, Y={ $memory\instruction_memory$rdmux[0][5][0]$b$1423 [25:23] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [16] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [10] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [5:4] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][5][0]$b$1423 [31:26] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [22:17] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [15:11] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [9] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [7:6] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [3] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [1:0] } = { $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] 8'00000000 $memory\instruction_memory$rdmux[0][5][0]$b$1423 [5] 2'00 $memory\instruction_memory$rdmux[0][5][0]$b$1423 [5] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][2]$1523:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][2]$a$1524, B=$memory\instruction_memory$rdmux[0][6][2]$b$1525, Y=$memory\instruction_memory$rdmux[0][5][1]$a$1425
      New ports: A={ $memory\instruction_memory$rdmux[0][6][2]$a$1524 [5] 4'1001 $memory\instruction_memory$rdmux[0][6][2]$a$1524 [10] 1'1 $memory\instruction_memory$rdmux[0][6][2]$a$1524 [5] 1'0 }, B={ 1'1 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [4] 1'1 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5] $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5:4] 1'0 $memory\instruction_memory$rdmux[0][6][2]$b$1525 [5:4] }, Y={ $memory\instruction_memory$rdmux[0][5][1]$a$1425 [23:22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [20] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [17] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [13] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [10:9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][1]$a$1425 [31:24] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [21] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [19:18] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [16:14] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [12:11] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [8:6] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [3:0] } = { $memory\instruction_memory$rdmux[0][5][1]$a$1425 [9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [4] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [20] 1'0 $memory\instruction_memory$rdmux[0][5][1]$a$1425 [13] 5'00000 $memory\instruction_memory$rdmux[0][5][1]$a$1425 [4] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [4] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][3]$1526:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][3]$a$1527, B=$memory\instruction_memory$rdmux[0][6][3]$b$1528, Y=$memory\instruction_memory$rdmux[0][5][1]$b$1426
      New ports: A={ $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 3'100 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [9] 1'1 $memory\instruction_memory$rdmux[0][6][3]$a$1527 [2] }, B={ $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [22] $memory\instruction_memory$rdmux[0][6][3]$b$1528 [17] 3'100 }, Y={ $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26:25] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [22] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [17] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [5] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][5][1]$b$1426 [31:27] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [24:23] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [21:18] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [16:10] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [8:6] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [4:3] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [1:0] } = { $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] 1'0 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] 3'000 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] 3'000 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] 2'00 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] 2'00 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] 1'0 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][4]$1529:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][4]$a$1530, B=$memory\instruction_memory$rdmux[0][6][4]$b$1531, Y=$memory\instruction_memory$rdmux[0][5][2]$a$1428
      New ports: A={ 2'00 $memory\instruction_memory$rdmux[0][6][4]$a$1530 [11] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] $memory\instruction_memory$rdmux[0][6][4]$a$1530 [7] 2'01 }, B={ $memory\instruction_memory$rdmux[0][6][4]$b$1531 [9] $memory\instruction_memory$rdmux[0][6][4]$b$1531 [20] 2'11 $memory\instruction_memory$rdmux[0][6][4]$b$1531 [9] 3'010 }, Y={ $memory\instruction_memory$rdmux[0][5][2]$a$1428 [24] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [11:9] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [7] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][2]$a$1428 [31:25] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [23:21] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [19:12] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [8] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [6] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [3:0] } = { $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] 1'0 $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] 1'0 $memory\instruction_memory$rdmux[0][5][2]$a$1428 [10] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [7] 3'000 $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] 1'0 $memory\instruction_memory$rdmux[0][5][2]$a$1428 [7] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][6]$1535:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][6]$a$1536, B=$memory\instruction_memory$rdmux[0][6][6]$b$1537, Y=$memory\instruction_memory$rdmux[0][5][3]$a$1431
      New ports: A={ $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 1'0 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [2] 2'10 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] $memory\instruction_memory$rdmux[0][6][6]$a$1536 [6] 1'1 $memory\instruction_memory$rdmux[0][6][6]$a$1536 [2] }, B={ 3'111 $memory\instruction_memory$rdmux[0][6][6]$b$1537 [9] $memory\instruction_memory$rdmux[0][6][6]$b$1537 [7] $memory\instruction_memory$rdmux[0][6][6]$b$1537 [7] 3'000 }, Y={ $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [13] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [10:5] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][5][3]$a$1431 [31:19] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [17:14] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [12:11] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [4:3] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [1:0] } = { $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] 1'0 $memory\instruction_memory$rdmux[0][5][3]$a$1431 [13] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [9] 4'0000 $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] 1'0 $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [2] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][7]$1538:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][7]$a$1539, B=$memory\instruction_memory$rdmux[0][6][7]$b$1540, Y=$memory\instruction_memory$rdmux[0][5][3]$b$1432
      New ports: A={ $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [9] 2'01 $memory\instruction_memory$rdmux[0][6][7]$a$1539 [9] $memory\instruction_memory$rdmux[0][6][7]$a$1539 [7] 2'01 }, B={ $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] 2'01 $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] $memory\instruction_memory$rdmux[0][6][7]$b$1540 [9] 1'0 $memory\instruction_memory$rdmux[0][6][7]$b$1540 [5] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [15] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [13] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [10:9] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][3]$b$1432 [31:23] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [21:18] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [16] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [14] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [12:11] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [8] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [6] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [3:0] } = { $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] 2'01 $memory\instruction_memory$rdmux[0][5][3]$b$1432 [15] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] 2'00 $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][8]$1541:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][8]$a$1542, B=$memory\instruction_memory$rdmux[0][6][8]$b$1543, Y=$memory\instruction_memory$rdmux[0][5][4]$a$1434
      New ports: A={ $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] 3'100 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [10] 2'01 $memory\instruction_memory$rdmux[0][6][8]$a$1542 [2] }, B={ $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [22] $memory\instruction_memory$rdmux[0][6][8]$b$1543 [17] 4'1100 }, Y={ $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26:25] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [22] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [17] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10:9] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [5] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][5][4]$a$1434 [31:27] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [24:23] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [21:18] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [16:11] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [8:6] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [4:3] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [1:0] } = { $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26] 1'0 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] 3'000 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10] 3'000 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10] 4'0000 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] 1'0 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][10]$1547:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][10]$a$1548, B=$memory\instruction_memory$rdmux[0][6][10]$b$1549, Y=$memory\instruction_memory$rdmux[0][5][5]$a$1437
      New ports: A={ $memory\instruction_memory$rdmux[0][6][10]$a$1548 [13] 3'100 $memory\instruction_memory$rdmux[0][6][10]$a$1548 [4] }, B={ 2'10 $memory\instruction_memory$rdmux[0][6][10]$b$1549 [7] $memory\instruction_memory$rdmux[0][6][10]$b$1549 [5] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [9] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [7] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][5]$a$1437 [31:14] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [12:10] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [8] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [6] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [3:0] } = { $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] 1'0 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [5] 1'0 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [4] 2'01 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [4] 6'000001 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [7] 5'00011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][3]$1430:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][3]$a$1431, B=$memory\instruction_memory$rdmux[0][5][3]$b$1432, Y=$memory\instruction_memory$rdmux[0][4][1]$b$1378
      New ports: A={ $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] 1'0 $memory\instruction_memory$rdmux[0][5][3]$a$1431 [13] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [9] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [18] 1'0 $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [6] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [13] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [10:5] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [2] $memory\instruction_memory$rdmux[0][5][3]$a$1431 [2] }, B={ $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [22] 1'1 $memory\instruction_memory$rdmux[0][5][3]$b$1432 [17] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [15] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [13] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [10:9] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [7] 1'0 $memory\instruction_memory$rdmux[0][5][3]$b$1432 [5:4] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26:22] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [18:17] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [15:13] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [10:4] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][4][1]$b$1378 [31:27] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [21:19] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [16] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [12:11] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [3] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [1:0] } = { $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [17] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [17] 1'0 $memory\instruction_memory$rdmux[0][4][1]$b$1378 [15] 1'0 $memory\instruction_memory$rdmux[0][4][1]$b$1378 [6] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][4]$1433:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][4]$a$1434, B=$memory\instruction_memory$rdmux[0][5][4]$b$1435, Y=$memory\instruction_memory$rdmux[0][4][2]$a$1380
      New ports: A={ $memory\instruction_memory$rdmux[0][5][4]$a$1434 [26:25] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [22] 2'00 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [17] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10] 1'0 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [10:9] 2'00 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [5] 1'0 $memory\instruction_memory$rdmux[0][5][4]$a$1434 [2] }, B={ $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 1'0 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [21:20] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [18] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [7] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5] 1'1 $memory\instruction_memory$rdmux[0][5][4]$b$1435 [9:7] $memory\instruction_memory$rdmux[0][5][4]$b$1435 [5:4] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26:25] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [23:20] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [18:17] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [13] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [11:7] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [5:4] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][4][2]$a$1380 [31:27] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [24] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [19] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [16:14] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [12] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [6] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [3] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [1:0] } = { $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] 6'000000 $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][4][11]$1406:
      Old ports: A=$memory\instruction_memory$rdmux[0][4][11]$a$1407, B=32'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Y=$memory\instruction_memory$rdmux[0][3][5]$b$1366
      New ports: A=$memory\instruction_memory$rdmux[0][4][11]$a$1407 [0], B=1'x, Y=$memory\instruction_memory$rdmux[0][3][5]$b$1366 [0]
      New connections: $memory\instruction_memory$rdmux[0][3][5]$b$1366 [31:1] = { $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] $memory\instruction_memory$rdmux[0][3][5]$b$1366 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][0]$1421:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][0]$a$1422, B=$memory\instruction_memory$rdmux[0][5][0]$b$1423, Y=$memory\instruction_memory$rdmux[0][4][0]$a$1374
      New ports: A={ $memory\instruction_memory$rdmux[0][5][0]$a$1422 [16] 4'0000 $memory\instruction_memory$rdmux[0][5][0]$a$1422 [16] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [12] 2'00 $memory\instruction_memory$rdmux[0][5][0]$a$1422 [8] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [2] $memory\instruction_memory$rdmux[0][5][0]$a$1422 [4:2] }, B={ $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [25:23] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [16] 1'0 $memory\instruction_memory$rdmux[0][5][0]$b$1423 [10] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [5] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [8] $memory\instruction_memory$rdmux[0][5][0]$b$1423 [5:4] 1'0 $memory\instruction_memory$rdmux[0][5][0]$b$1423 [2] }, Y={ $memory\instruction_memory$rdmux[0][4][0]$a$1374 [30] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26:23] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [16] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [12] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [10:8] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [5:2] }
      New connections: { $memory\instruction_memory$rdmux[0][4][0]$a$1374 [31] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [29:27] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [22:17] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [15:13] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [11] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [7:6] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [1:0] } = { $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [3] 7'0000000 $memory\instruction_memory$rdmux[0][4][0]$a$1374 [9] 2'00 $memory\instruction_memory$rdmux[0][4][0]$a$1374 [3] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][2]$1427:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][2]$a$1428, B=$memory\instruction_memory$rdmux[0][5][2]$b$1429, Y=$memory\instruction_memory$rdmux[0][4][1]$a$1377
      New ports: A={ 1'0 $memory\instruction_memory$rdmux[0][5][2]$a$1428 [24] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [20] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [7] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [11:9] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [7] $memory\instruction_memory$rdmux[0][5][2]$a$1428 [5:4] }, B={ $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] 1'0 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] 1'0 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [4] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [4] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [13] 2'01 $memory\instruction_memory$rdmux[0][5][2]$b$1429 [9] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [7] $memory\instruction_memory$rdmux[0][5][2]$b$1429 [5:4] }, Y={ $memory\instruction_memory$rdmux[0][4][1]$a$1377 [25:24] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [22:20] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [17] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [11:9] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [7] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][4][1]$a$1377 [31:26] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [23] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [19:18] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [16:14] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [12] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [8] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [6] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [3:0] } = { $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [22] 1'0 $memory\instruction_memory$rdmux[0][4][1]$a$1377 [10] 4'0000 $memory\instruction_memory$rdmux[0][4][1]$a$1377 [7] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][5]$1436:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][5]$a$1437, B=$memory\instruction_memory$rdmux[0][5][5]$b$1438, Y=$memory\instruction_memory$rdmux[0][4][2]$b$1381
      New ports: A={ $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] 1'1 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [4] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [13] 2'01 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [9] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [7] $memory\instruction_memory$rdmux[0][5][5]$a$1437 [7] 1'0 $memory\instruction_memory$rdmux[0][5][5]$a$1437 [5:4] 3'001 }, B={ $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7:6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [3] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [4] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [9] 1'0 $memory\instruction_memory$rdmux[0][5][5]$b$1438 [7:6] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [4:2] $memory\instruction_memory$rdmux[0][5][5]$b$1438 [0] }, Y={ $memory\instruction_memory$rdmux[0][4][2]$b$1381 [27] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [18:17] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [13] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [11:2] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][4][2]$b$1381 [31:28] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [26:24] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [22:19] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [16:14] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [12] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [1] } = { $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [13] 1'0 $memory\instruction_memory$rdmux[0][4][2]$b$1381 [5] 1'0 $memory\instruction_memory$rdmux[0][4][2]$b$1381 [17] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [3] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [6] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [6] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [6] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [3] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][1]$1424:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][1]$a$1425, B=$memory\instruction_memory$rdmux[0][5][1]$b$1426, Y=$memory\instruction_memory$rdmux[0][4][0]$b$1375
      New ports: A={ $memory\instruction_memory$rdmux[0][5][1]$a$1425 [9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [23:22] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [20] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [17] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [13] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [10:9] $memory\instruction_memory$rdmux[0][5][1]$a$1425 [5:4] 1'0 }, B={ $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [26:25] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [22] 1'0 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [17] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [9] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [5] 1'0 $memory\instruction_memory$rdmux[0][5][1]$b$1426 [2] }, Y={ $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [26:25] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [23:22] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [20] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [17] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [13] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [10:9] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [5:4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][4][0]$b$1375 [31:29] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [27] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [24] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [21] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [19:18] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [16:14] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [12:11] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [8:6] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [3] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [1:0] } = { $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [26] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [20] 1'0 $memory\instruction_memory$rdmux[0][4][0]$b$1375 [13] 5'00000 $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [2] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [2] 2'11 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][4][0]$1373:
      Old ports: A=$memory\instruction_memory$rdmux[0][4][0]$a$1374, B=$memory\instruction_memory$rdmux[0][4][0]$b$1375, Y=$memory\instruction_memory$rdmux[0][3][0]$a$1350
      New ports: A={ $memory\instruction_memory$rdmux[0][4][0]$a$1374 [30] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [26:23] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [3] 3'000 $memory\instruction_memory$rdmux[0][4][0]$a$1374 [16] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [9] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [12] $memory\instruction_memory$rdmux[0][4][0]$a$1374 [10:8] 1'0 $memory\instruction_memory$rdmux[0][4][0]$a$1374 [5:2] }, B={ $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [28] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [26:25] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [23:22] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [20] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [13] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [17] 1'0 $memory\instruction_memory$rdmux[0][4][0]$b$1375 [13] 1'0 $memory\instruction_memory$rdmux[0][4][0]$b$1375 [10:9] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [5:4] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [2] $memory\instruction_memory$rdmux[0][4][0]$b$1375 [2] }, Y={ $memory\instruction_memory$rdmux[0][3][0]$a$1350 [30] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [28] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [26:22] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [20] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [18:16] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [13:12] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [10:7] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [5:2] }
      New connections: { $memory\instruction_memory$rdmux[0][3][0]$a$1350 [31] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [29] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [27] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [21] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [19] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [15:14] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [11] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [6] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [1:0] } = { $memory\instruction_memory$rdmux[0][3][0]$a$1350 [28] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [28] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [26] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [20] 4'0000 $memory\instruction_memory$rdmux[0][3][0]$a$1350 [3] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][4][2]$1379:
      Old ports: A=$memory\instruction_memory$rdmux[0][4][2]$a$1380, B=$memory\instruction_memory$rdmux[0][4][2]$b$1381, Y=$memory\instruction_memory$rdmux[0][3][1]$a$1353
      New ports: A={ $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [26:25] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [23:20] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [18:17] 1'0 $memory\instruction_memory$rdmux[0][4][2]$a$1380 [13] 1'0 $memory\instruction_memory$rdmux[0][4][2]$a$1380 [11:7] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [5:4] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] $memory\instruction_memory$rdmux[0][4][2]$a$1380 [2] 1'1 }, B={ $memory\instruction_memory$rdmux[0][4][2]$b$1381 [27] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [13] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [23] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [5] 1'0 $memory\instruction_memory$rdmux[0][4][2]$b$1381 [17] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [18:17] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [6] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [13] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [3] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [11:2] $memory\instruction_memory$rdmux[0][4][2]$b$1381 [0] }, Y={ $memory\instruction_memory$rdmux[0][3][1]$a$1353 [27:25] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [23:20] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [18:17] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [14:2] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][3][1]$a$1353 [31:28] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [24] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [19] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [16:15] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [1] } = { $memory\instruction_memory$rdmux[0][3][1]$a$1353 [26] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [26] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [26] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [26] 1'0 $memory\instruction_memory$rdmux[0][3][1]$a$1353 [12] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [14] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [14] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][3][5]$1364:
      Old ports: A=$memory\instruction_memory$rdmux[0][3][5]$a$1365, B=$memory\instruction_memory$rdmux[0][3][5]$b$1366, Y=$memory\instruction_memory$rdmux[0][2][2]$b$1345
      New ports: A=1'0, B=$memory\instruction_memory$rdmux[0][3][5]$b$1366 [0], Y=$memory\instruction_memory$rdmux[0][2][2]$b$1345 [0]
      New connections: $memory\instruction_memory$rdmux[0][2][2]$b$1345 [31:1] = { $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] $memory\instruction_memory$rdmux[0][2][2]$b$1345 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][4][1]$1376:
      Old ports: A=$memory\instruction_memory$rdmux[0][4][1]$a$1377, B=$memory\instruction_memory$rdmux[0][4][1]$b$1378, Y=$memory\instruction_memory$rdmux[0][3][0]$b$1351
      New ports: A={ $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [25:24] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [22] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [22:20] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [10] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [17] 2'00 $memory\instruction_memory$rdmux[0][4][1]$a$1377 [13] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [11:9] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [7] $memory\instruction_memory$rdmux[0][4][1]$a$1377 [7] 1'0 $memory\instruction_memory$rdmux[0][4][1]$a$1377 [5:4] 1'0 }, B={ $memory\instruction_memory$rdmux[0][4][1]$b$1378 [26:22] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [17] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [17] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [18:17] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [15:13] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [6] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [10:4] $memory\instruction_memory$rdmux[0][4][1]$b$1378 [2] }, Y={ $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26:20] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [18:17] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [15:13] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [11:4] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][3][0]$b$1351 [31:27] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [19] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [16] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [12] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [3] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [1:0] } = { $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] 1'0 $memory\instruction_memory$rdmux[0][3][0]$b$1351 [15] 4'0011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][2][2]$1343:
      Old ports: A=$memory\instruction_memory$rdmux[0][2][2]$a$1344, B=$memory\instruction_memory$rdmux[0][2][2]$b$1345, Y=$memory\instruction_memory$rdmux[0][1][1]$a$1335
      New ports: A=1'0, B=$memory\instruction_memory$rdmux[0][2][2]$b$1345 [0], Y=$memory\instruction_memory$rdmux[0][1][1]$a$1335 [0]
      New connections: $memory\instruction_memory$rdmux[0][1][1]$a$1335 [31:1] = { $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] $memory\instruction_memory$rdmux[0][1][1]$a$1335 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][3][1]$1352:
      Old ports: A=$memory\instruction_memory$rdmux[0][3][1]$a$1353, B=0, Y=$memory\instruction_memory$rdmux[0][2][0]$b$1339
      New ports: A={ $memory\instruction_memory$rdmux[0][3][1]$a$1353 [27:25] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [23:20] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [18:17] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [14:2] $memory\instruction_memory$rdmux[0][3][1]$a$1353 [0] }, B=23'00000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][2][0]$b$1339 [27:25] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [23:20] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [18:17] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14:2] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][2][0]$b$1339 [31:28] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [24] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [19] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [16:15] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [1] } = { $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] 1'0 $memory\instruction_memory$rdmux[0][2][0]$b$1339 [12] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][3][0]$1349:
      Old ports: A=$memory\instruction_memory$rdmux[0][3][0]$a$1350, B=$memory\instruction_memory$rdmux[0][3][0]$b$1351, Y=$memory\instruction_memory$rdmux[0][2][0]$a$1338
      New ports: A={ $memory\instruction_memory$rdmux[0][3][0]$a$1350 [30] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [28] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [26:22] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [20] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [20] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [18:16] 2'00 $memory\instruction_memory$rdmux[0][3][0]$a$1350 [13:12] 1'0 $memory\instruction_memory$rdmux[0][3][0]$a$1350 [10:7] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [3] $memory\instruction_memory$rdmux[0][3][0]$a$1350 [5:2] }, B={ $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [26:20] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [18:17] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [15] $memory\instruction_memory$rdmux[0][3][0]$b$1351 [15:13] 1'0 $memory\instruction_memory$rdmux[0][3][0]$b$1351 [11:4] 1'0 $memory\instruction_memory$rdmux[0][3][0]$b$1351 [2] }, Y={ $memory\instruction_memory$rdmux[0][2][0]$a$1338 [30] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [28] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [26:20] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [18:2] }
      New connections: { $memory\instruction_memory$rdmux[0][2][0]$a$1338 [31] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [29] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [27] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [19] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [1:0] } = { $memory\instruction_memory$rdmux[0][2][0]$a$1338 [28] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [28] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [26] 3'011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][1][1]$1334:
      Old ports: A=$memory\instruction_memory$rdmux[0][1][1]$a$1335, B=32'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Y=$memory\instruction_memory$rdmux[0][0][0]$b$1330
      New ports: A=$memory\instruction_memory$rdmux[0][1][1]$a$1335 [0], B=1'x, Y=$memory\instruction_memory$rdmux[0][0][0]$b$1330 [0]
      New connections: $memory\instruction_memory$rdmux[0][0][0]$b$1330 [31:1] = { $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][2][0]$1337:
      Old ports: A=$memory\instruction_memory$rdmux[0][2][0]$a$1338, B=$memory\instruction_memory$rdmux[0][2][0]$b$1339, Y=$memory\instruction_memory$rdmux[0][1][0]$a$1332
      New ports: A={ $memory\instruction_memory$rdmux[0][2][0]$a$1338 [30] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [28] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [26] $memory\instruction_memory$rdmux[0][2][0]$a$1338 [26:20] 1'0 $memory\instruction_memory$rdmux[0][2][0]$a$1338 [18:2] 1'1 }, B={ $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [26] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [27:25] 1'0 $memory\instruction_memory$rdmux[0][2][0]$b$1339 [23:20] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [12] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [18:17] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [14:2] $memory\instruction_memory$rdmux[0][2][0]$b$1339 [0] }, Y={ $memory\instruction_memory$rdmux[0][1][0]$a$1332 [30] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [28:2] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][1][0]$a$1332 [31] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [29] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [1] } = { $memory\instruction_memory$rdmux[0][1][0]$a$1332 [28] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [28] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][1][0]$1331:
      Old ports: A=$memory\instruction_memory$rdmux[0][1][0]$a$1332, B=0, Y=$memory\instruction_memory$rdmux[0][0][0]$a$1329
      New ports: A={ $memory\instruction_memory$rdmux[0][1][0]$a$1332 [30] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [28:2] $memory\instruction_memory$rdmux[0][1][0]$a$1332 [0] }, B=29'00000000000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][0][0]$a$1329 [30] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [28:2] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][0][0]$a$1329 [31] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [29] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [1] } = { $memory\instruction_memory$rdmux[0][0][0]$a$1329 [28] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [28] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][0][0]$1328:
      Old ports: A=$memory\instruction_memory$rdmux[0][0][0]$a$1329, B={ $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] }, Y=\out
      New ports: A={ $memory\instruction_memory$rdmux[0][0][0]$a$1329 [30] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [28:2] $memory\instruction_memory$rdmux[0][0][0]$a$1329 [0] }, B={ $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] $memory\instruction_memory$rdmux[0][0][0]$b$1330 [0] }, Y={ \out [30] \out [28:2] \out [0] }
      New connections: { \out [31] \out [29] \out [1] } = { \out [28] \out [28] \out [0] }
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 56 changes.

21.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
<suppressed ~60 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 20 cells.

21.26.13. Executing OPT_RMDFF pass (remove dff with constant values).

21.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 145 unused wires.
<suppressed ~1 debug messages>

21.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.26.16. Rerunning OPT passes. (Maybe there is more to do..)

21.26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

21.26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][3]$1526:
      Old ports: A={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 3'100 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 1'1 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 3'100 }, Y={ $memory\instruction_memory$rdmux[0][5][1]$b$1426 [31] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [25] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [22] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [17] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [18] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [5] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [23] }
      New ports: A={ 3'100 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 1'1 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 3'100 }, Y={ $memory\instruction_memory$rdmux[0][5][1]$b$1426 [25] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [22] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [17] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [18] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [5] $memory\instruction_memory$rdmux[0][5][1]$b$1426 [23] }
      New connections: $memory\instruction_memory$rdmux[0][5][1]$b$1426 [31] = $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30]
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][7]$1538:
      Old ports: A={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 2'01 }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][5][3]$b$1432 [31] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [23] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [16] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [13] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [10:9] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [24] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [5:4] }
      New ports: A={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 2'01 }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][5][3]$b$1432 [31] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [16] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [13] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [10] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [24] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][5][3]$b$1432 [23] $memory\instruction_memory$rdmux[0][5][3]$b$1432 [9] } = { $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][8]$1541:
      Old ports: A={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 3'100 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 4'1100 }, Y={ $memory\instruction_memory$rdmux[0][5][4]$a$1434 [31] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [25] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [22] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [17] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [18] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [9] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [5] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [23] }
      New ports: A={ 3'100 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] 2'01 $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30] $memory\instruction_memory$rdmux[0][6][0]$b$1519 [22] 4'1100 }, Y={ $memory\instruction_memory$rdmux[0][5][4]$a$1434 [25] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [22] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [17] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [18] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [9] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [5] $memory\instruction_memory$rdmux[0][5][4]$a$1434 [23] }
      New connections: $memory\instruction_memory$rdmux[0][5][4]$a$1434 [31] = $memory\instruction_memory$rdmux[0][6][0]$b$1519 [30]
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 3 changes.

21.26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.26.20. Executing OPT_RMDFF pass (remove dff with constant values).

21.26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

21.26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.26.23. Rerunning OPT passes. (Maybe there is more to do..)

21.26.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=11..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\WIDTH=9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_dsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dsp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \full_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

21.26.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\mux2to1\WIDTH=11.
  Optimizing cells in module $paramod\mux2to1\WIDTH=9.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder_dsp.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dsp_adder.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \full_adder.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

21.26.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.26.27. Executing OPT_RMDFF pass (remove dff with constant values).

21.26.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.26.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.26.30. Finished OPT passes. (There is nothing left to do.)

21.27. Executing ICE40_WRAPCARRY pass (wrap carries).

21.28. Executing TECHMAP pass (map to technology primitives).

21.28.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.28.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

21.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$0c11a8b0f7bc0abe97ee32fac977a1bbaae6bdf7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
No more expansions possible.
<suppressed ~1865 debug messages>

21.29. Executing OPT pass (performing simple optimizations).

21.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
<suppressed ~254 debug messages>
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
<suppressed ~421 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~32 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~296 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
<suppressed ~32 debug messages>
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
<suppressed ~54 debug messages>
Optimizing module instruction_memory.
<suppressed ~13 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
<suppressed ~270 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
<suppressed ~705 debug messages>
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~240 debug messages>
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
<suppressed ~273 debug messages>
Finding identical cells in module `\instruction_memory'.
<suppressed ~261 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 583 cells.

21.29.3. Executing OPT_RMDFF pass (remove dff with constant values).

21.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 230 unused cells and 681 unused wires.
<suppressed ~249 debug messages>

21.29.5. Finished fast OPT passes.

21.30. Executing ICE40_OPT pass (performing simple optimizations).

21.30.1. Running ICE40 specific optimizations.

21.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~29 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~12 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.30.4. Executing OPT_RMDFF pass (remove dff with constant values).

21.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

21.30.6. Rerunning OPT passes. (Removed registers in this run.)

21.30.7. Running ICE40 specific optimizations.

21.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.30.10. Executing OPT_RMDFF pass (remove dff with constant values).

21.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.30.12. Finished OPT passes. (There is nothing left to do.)

21.31. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module $paramod\mux2to1\WIDTH=11:
Transforming FF to FF+Enable cells in module $paramod\mux2to1\WIDTH=9:
Transforming FF to FF+Enable cells in module ALUControl:
Transforming FF to FF+Enable cells in module ForwardingUnit:
Transforming FF to FF+Enable cells in module adder_dsp:
Transforming FF to FF+Enable cells in module alu:
Transforming FF to FF+Enable cells in module branch_decision:
Transforming FF to FF+Enable cells in module branch_predictor:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5657 to $_DFFE_PP_ for $0\s[1:0] [0] -> \s [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5658 to $_DFFE_PP_ for $0\s[1:0] [1] -> \s [1].
Transforming FF to FF+Enable cells in module control:
Transforming FF to FF+Enable cells in module cpu:
Transforming FF to FF+Enable cells in module data_mem:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8131 to $_DFFE_PP_ for $0\read_data[31:0] [0] -> \read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8132 to $_DFFE_PP_ for $0\read_data[31:0] [1] -> \read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8133 to $_DFFE_PP_ for $0\read_data[31:0] [2] -> \read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8134 to $_DFFE_PP_ for $0\read_data[31:0] [3] -> \read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8135 to $_DFFE_PP_ for $0\read_data[31:0] [4] -> \read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8136 to $_DFFE_PP_ for $0\read_data[31:0] [5] -> \read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8137 to $_DFFE_PP_ for $0\read_data[31:0] [6] -> \read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8138 to $_DFFE_PP_ for $0\read_data[31:0] [7] -> \read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8139 to $_DFFE_PP_ for $0\read_data[31:0] [8] -> \read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8140 to $_DFFE_PP_ for $0\read_data[31:0] [9] -> \read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8141 to $_DFFE_PP_ for $0\read_data[31:0] [10] -> \read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8142 to $_DFFE_PP_ for $0\read_data[31:0] [11] -> \read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8143 to $_DFFE_PP_ for $0\read_data[31:0] [12] -> \read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8144 to $_DFFE_PP_ for $0\read_data[31:0] [13] -> \read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8145 to $_DFFE_PP_ for $0\read_data[31:0] [14] -> \read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8146 to $_DFFE_PP_ for $0\read_data[31:0] [15] -> \read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8147 to $_DFFE_PP_ for $0\read_data[31:0] [16] -> \read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8148 to $_DFFE_PP_ for $0\read_data[31:0] [17] -> \read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8149 to $_DFFE_PP_ for $0\read_data[31:0] [18] -> \read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8150 to $_DFFE_PP_ for $0\read_data[31:0] [19] -> \read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8151 to $_DFFE_PP_ for $0\read_data[31:0] [20] -> \read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8152 to $_DFFE_PP_ for $0\read_data[31:0] [21] -> \read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8153 to $_DFFE_PP_ for $0\read_data[31:0] [22] -> \read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8154 to $_DFFE_PP_ for $0\read_data[31:0] [23] -> \read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8155 to $_DFFE_PP_ for $0\read_data[31:0] [24] -> \read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8156 to $_DFFE_PP_ for $0\read_data[31:0] [25] -> \read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8157 to $_DFFE_PP_ for $0\read_data[31:0] [26] -> \read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8158 to $_DFFE_PP_ for $0\read_data[31:0] [27] -> \read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8159 to $_DFFE_PP_ for $0\read_data[31:0] [28] -> \read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8160 to $_DFFE_PP_ for $0\read_data[31:0] [29] -> \read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8161 to $_DFFE_PP_ for $0\read_data[31:0] [30] -> \read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8162 to $_DFFE_PP_ for $0\read_data[31:0] [31] -> \read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8163 to $_DFFE_PP_ for $0\clk_stall[0:0] -> \clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8164 to $_DFFE_PP_ for $0\state[31:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8165 to $_DFFE_PP_ for $0\state[31:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8166 to $_DFFE_PP_ for $0\state[31:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8167 to $_DFFE_PP_ for $0\state[31:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8168 to $_DFFE_PP_ for $0\state[31:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8169 to $_DFFE_PP_ for $0\state[31:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8170 to $_DFFE_PP_ for $0\state[31:0] [6] -> \state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8171 to $_DFFE_PP_ for $0\state[31:0] [7] -> \state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8172 to $_DFFE_PP_ for $0\state[31:0] [8] -> \state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8173 to $_DFFE_PP_ for $0\state[31:0] [9] -> \state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8174 to $_DFFE_PP_ for $0\state[31:0] [10] -> \state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8175 to $_DFFE_PP_ for $0\state[31:0] [11] -> \state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8176 to $_DFFE_PP_ for $0\state[31:0] [12] -> \state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8177 to $_DFFE_PP_ for $0\state[31:0] [13] -> \state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8178 to $_DFFE_PP_ for $0\state[31:0] [14] -> \state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8179 to $_DFFE_PP_ for $0\state[31:0] [15] -> \state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8180 to $_DFFE_PP_ for $0\state[31:0] [16] -> \state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8181 to $_DFFE_PP_ for $0\state[31:0] [17] -> \state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8182 to $_DFFE_PP_ for $0\state[31:0] [18] -> \state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8183 to $_DFFE_PP_ for $0\state[31:0] [19] -> \state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8184 to $_DFFE_PP_ for $0\state[31:0] [20] -> \state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8185 to $_DFFE_PP_ for $0\state[31:0] [21] -> \state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8186 to $_DFFE_PP_ for $0\state[31:0] [22] -> \state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8187 to $_DFFE_PP_ for $0\state[31:0] [23] -> \state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8188 to $_DFFE_PP_ for $0\state[31:0] [24] -> \state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8189 to $_DFFE_PP_ for $0\state[31:0] [25] -> \state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8190 to $_DFFE_PP_ for $0\state[31:0] [26] -> \state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8191 to $_DFFE_PP_ for $0\state[31:0] [27] -> \state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8192 to $_DFFE_PP_ for $0\state[31:0] [28] -> \state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8193 to $_DFFE_PP_ for $0\state[31:0] [29] -> \state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8194 to $_DFFE_PP_ for $0\state[31:0] [30] -> \state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8195 to $_DFFE_PP_ for $0\state[31:0] [31] -> \state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8196 to $_DFFE_PP_ for $0\memread_buf[0:0] -> \memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8197 to $_DFFE_PP_ for $0\memwrite_buf[0:0] -> \memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8198 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [0] -> \write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8199 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [1] -> \write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8200 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [2] -> \write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8201 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [3] -> \write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8202 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [4] -> \write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8203 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [5] -> \write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8204 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [6] -> \write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8205 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [7] -> \write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8206 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [8] -> \write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8207 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [9] -> \write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8208 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [10] -> \write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8209 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [11] -> \write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8210 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [12] -> \write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8211 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [13] -> \write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8212 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [14] -> \write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8213 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [15] -> \write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8214 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [16] -> \write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8215 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [17] -> \write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8216 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [18] -> \write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8217 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [19] -> \write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8218 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [20] -> \write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8219 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [21] -> \write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8220 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [22] -> \write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8221 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [23] -> \write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8222 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [24] -> \write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8223 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [25] -> \write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8224 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [26] -> \write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8225 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [27] -> \write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8226 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [28] -> \write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8227 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [29] -> \write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8228 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [30] -> \write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8229 to $_DFFE_PP_ for $0\write_data_buffer[31:0] [31] -> \write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8230 to $_DFFE_PP_ for $0\addr_buf[31:0] [0] -> \addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8231 to $_DFFE_PP_ for $0\addr_buf[31:0] [1] -> \addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8232 to $_DFFE_PP_ for $0\addr_buf[31:0] [2] -> \addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8233 to $_DFFE_PP_ for $0\addr_buf[31:0] [3] -> \addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8234 to $_DFFE_PP_ for $0\addr_buf[31:0] [4] -> \addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8235 to $_DFFE_PP_ for $0\addr_buf[31:0] [5] -> \addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8236 to $_DFFE_PP_ for $0\addr_buf[31:0] [6] -> \addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8237 to $_DFFE_PP_ for $0\addr_buf[31:0] [7] -> \addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8238 to $_DFFE_PP_ for $0\addr_buf[31:0] [8] -> \addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8239 to $_DFFE_PP_ for $0\addr_buf[31:0] [9] -> \addr_buf [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8240 to $_DFFE_PP_ for $0\addr_buf[31:0] [10] -> \addr_buf [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8263 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [1] -> \sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8264 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [2] -> \sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8265 to $_DFFE_PP_ for $0\sign_mask_buf[3:0] [3] -> \sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8266 to $_DFFE_PP_ for $0\led_reg[31:0] [0] -> \led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8267 to $_DFFE_PP_ for $0\led_reg[31:0] [1] -> \led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8268 to $_DFFE_PP_ for $0\led_reg[31:0] [2] -> \led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8269 to $_DFFE_PP_ for $0\led_reg[31:0] [3] -> \led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8270 to $_DFFE_PP_ for $0\led_reg[31:0] [4] -> \led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8271 to $_DFFE_PP_ for $0\led_reg[31:0] [5] -> \led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8272 to $_DFFE_PP_ for $0\led_reg[31:0] [6] -> \led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8273 to $_DFFE_PP_ for $0\led_reg[31:0] [7] -> \led_reg [7].
Transforming FF to FF+Enable cells in module dsp_adder:
Transforming FF to FF+Enable cells in module ex_mem:
Transforming FF to FF+Enable cells in module full_adder:
Transforming FF to FF+Enable cells in module id_ex:
Transforming FF to FF+Enable cells in module if_id:
Transforming FF to FF+Enable cells in module imm_gen:
Transforming FF to FF+Enable cells in module instruction_memory:
Transforming FF to FF+Enable cells in module mem_wb:
Transforming FF to FF+Enable cells in module mux2to1:
Transforming FF to FF+Enable cells in module program_counter:
Transforming FF to FF+Enable cells in module regfile:
Transforming FF to FF+Enable cells in module sign_mask_gen:
Transforming FF to FF+Enable cells in module top:

21.32. Executing TECHMAP pass (map to technology primitives).

21.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

21.32.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~718 debug messages>

21.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~4 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~242 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).

21.35. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in $paramod\mux2to1\WIDTH=11.
Handling FF init values in $paramod\mux2to1\WIDTH=9.
Handling FF init values in ALUControl.
Handling FF init values in ForwardingUnit.
Handling FF init values in adder_dsp.
Handling FF init values in alu.
Handling FF init values in branch_decision.
Handling FF init values in branch_predictor.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5658 (SB_DFFE): \s [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5659 (SB_DFFN): \branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5657 (SB_DFFE): \s [0] = 0
Handling FF init values in control.
Handling FF init values in cpu.
Handling FF init values in data_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8163 (SB_DFFE): \clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8165 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8166 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8167 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8168 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8169 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8170 (SB_DFFE): \state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8171 (SB_DFFE): \state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8172 (SB_DFFE): \state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8173 (SB_DFFE): \state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8174 (SB_DFFE): \state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8175 (SB_DFFE): \state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8176 (SB_DFFE): \state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8177 (SB_DFFE): \state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8178 (SB_DFFE): \state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8179 (SB_DFFE): \state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8180 (SB_DFFE): \state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8181 (SB_DFFE): \state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8182 (SB_DFFE): \state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8183 (SB_DFFE): \state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8184 (SB_DFFE): \state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8185 (SB_DFFE): \state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8186 (SB_DFFE): \state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8187 (SB_DFFE): \state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8188 (SB_DFFE): \state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8189 (SB_DFFE): \state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8190 (SB_DFFE): \state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8191 (SB_DFFE): \state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8192 (SB_DFFE): \state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8193 (SB_DFFE): \state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8194 (SB_DFFE): \state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8164 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$8195 (SB_DFFE): \state [31] = 0
Handling FF init values in dsp_adder.
Handling FF init values in ex_mem.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6969 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6815 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6816 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6817 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6818 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6819 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6820 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6821 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6822 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6823 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6824 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6825 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6826 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6827 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6828 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6829 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6830 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6831 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6832 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6833 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6834 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6835 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6836 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6837 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6838 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6839 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6840 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6841 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6842 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6843 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6844 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6845 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6846 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6847 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6848 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6849 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6850 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6851 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6852 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6853 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6854 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6855 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6856 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6857 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6858 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6859 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6860 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6861 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6862 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6863 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6864 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6865 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6866 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6867 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6868 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6869 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6870 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6871 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6872 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6873 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6874 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6875 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6876 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6877 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6878 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6879 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6880 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6881 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6882 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6883 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6884 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6885 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6886 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6887 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6888 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6889 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6890 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6891 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6892 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6893 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6894 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6895 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6896 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6897 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6898 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6899 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6900 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6901 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6902 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6903 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6904 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6905 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6906 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6907 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6908 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6909 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6910 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6911 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6912 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6913 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6914 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6915 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6916 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6917 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6918 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6919 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6920 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6921 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6922 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6923 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6924 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6925 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6926 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6927 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6928 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6929 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6930 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6931 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6932 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6933 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6934 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6935 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6936 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6937 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6938 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6939 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6940 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6941 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6942 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6943 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6944 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6945 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6946 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6947 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6948 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6949 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6950 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6951 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6952 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6953 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6954 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6955 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6956 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6957 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6958 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6959 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6960 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6961 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6962 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6963 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6964 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6965 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6966 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6967 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6968 (SB_DFF): \data_out [153] = 0
Handling FF init values in full_adder.
Handling FF init values in id_ex.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6814 (SB_DFF): \data_out [177] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6637 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6638 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6639 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6640 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6641 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6642 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6643 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6644 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6645 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6646 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6647 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6648 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6649 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6650 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6651 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6652 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6653 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6654 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6655 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6656 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6657 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6658 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6659 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6660 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6661 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6662 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6663 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6664 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6665 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6666 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6667 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6668 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6669 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6670 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6671 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6672 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6673 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6674 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6675 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6676 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6677 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6678 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6679 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6680 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6681 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6682 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6683 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6684 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6685 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6686 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6687 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6688 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6689 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6690 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6691 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6692 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6693 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6694 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6695 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6696 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6697 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6698 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6699 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6700 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6701 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6702 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6703 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6704 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6705 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6706 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6707 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6708 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6709 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6710 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6711 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6712 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6713 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6714 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6715 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6716 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6717 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6718 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6719 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6720 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6721 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6722 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6723 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6724 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6725 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6726 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6727 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6728 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6729 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6730 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6731 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6732 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6733 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6734 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6735 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6736 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6737 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6738 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6739 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6740 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6741 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6742 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6743 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6744 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6745 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6746 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6747 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6748 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6749 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6750 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6751 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6752 (SB_DFF): \data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6753 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6754 (SB_DFF): \data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6755 (SB_DFF): \data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6756 (SB_DFF): \data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6757 (SB_DFF): \data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6758 (SB_DFF): \data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6759 (SB_DFF): \data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6760 (SB_DFF): \data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6761 (SB_DFF): \data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6762 (SB_DFF): \data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6763 (SB_DFF): \data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6764 (SB_DFF): \data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6765 (SB_DFF): \data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6766 (SB_DFF): \data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6767 (SB_DFF): \data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6768 (SB_DFF): \data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6769 (SB_DFF): \data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6770 (SB_DFF): \data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6771 (SB_DFF): \data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6772 (SB_DFF): \data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6773 (SB_DFF): \data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6774 (SB_DFF): \data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6775 (SB_DFF): \data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6776 (SB_DFF): \data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6777 (SB_DFF): \data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6778 (SB_DFF): \data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6779 (SB_DFF): \data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6780 (SB_DFF): \data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6781 (SB_DFF): \data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6782 (SB_DFF): \data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6783 (SB_DFF): \data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6784 (SB_DFF): \data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6785 (SB_DFF): \data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6786 (SB_DFF): \data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6787 (SB_DFF): \data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6788 (SB_DFF): \data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6789 (SB_DFF): \data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6790 (SB_DFF): \data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6791 (SB_DFF): \data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6792 (SB_DFF): \data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6793 (SB_DFF): \data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6794 (SB_DFF): \data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6795 (SB_DFF): \data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6796 (SB_DFF): \data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6797 (SB_DFF): \data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6798 (SB_DFF): \data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6799 (SB_DFF): \data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6800 (SB_DFF): \data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6801 (SB_DFF): \data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6802 (SB_DFF): \data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6803 (SB_DFF): \data_out [166] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6804 (SB_DFF): \data_out [167] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6805 (SB_DFF): \data_out [168] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6806 (SB_DFF): \data_out [169] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6807 (SB_DFF): \data_out [170] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6808 (SB_DFF): \data_out [171] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6809 (SB_DFF): \data_out [172] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6810 (SB_DFF): \data_out [173] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6811 (SB_DFF): \data_out [174] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6812 (SB_DFF): \data_out [175] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6813 (SB_DFF): \data_out [176] = 0
Handling FF init values in if_id.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5922 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5859 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5860 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5861 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5862 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5863 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5864 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5865 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5866 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5867 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5868 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5869 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5870 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5871 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5872 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5873 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5874 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5875 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5876 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5877 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5878 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5879 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5880 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5881 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5882 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5883 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5884 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5885 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5886 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5887 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5888 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5889 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5890 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5891 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5892 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5893 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5894 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5895 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5896 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5897 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5898 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5899 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5900 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5901 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5902 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5903 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5904 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5905 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5906 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5907 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5908 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5909 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5910 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5911 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5912 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5913 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5914 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5915 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5916 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5917 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5918 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5919 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5920 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5921 (SB_DFF): \data_out [62] = 0
Handling FF init values in imm_gen.
Handling FF init values in instruction_memory.
Handling FF init values in mem_wb.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7086 (SB_DFF): \data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6970 (SB_DFF): \data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6971 (SB_DFF): \data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6972 (SB_DFF): \data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6973 (SB_DFF): \data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6974 (SB_DFF): \data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6975 (SB_DFF): \data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6976 (SB_DFF): \data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6977 (SB_DFF): \data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6978 (SB_DFF): \data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6979 (SB_DFF): \data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6980 (SB_DFF): \data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6981 (SB_DFF): \data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6982 (SB_DFF): \data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6983 (SB_DFF): \data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6984 (SB_DFF): \data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6985 (SB_DFF): \data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6986 (SB_DFF): \data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6987 (SB_DFF): \data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6988 (SB_DFF): \data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6989 (SB_DFF): \data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6990 (SB_DFF): \data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6991 (SB_DFF): \data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6992 (SB_DFF): \data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6993 (SB_DFF): \data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6994 (SB_DFF): \data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6995 (SB_DFF): \data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6996 (SB_DFF): \data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6997 (SB_DFF): \data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6998 (SB_DFF): \data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6999 (SB_DFF): \data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7000 (SB_DFF): \data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7001 (SB_DFF): \data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7002 (SB_DFF): \data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7003 (SB_DFF): \data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7004 (SB_DFF): \data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7005 (SB_DFF): \data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7006 (SB_DFF): \data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7007 (SB_DFF): \data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7008 (SB_DFF): \data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7009 (SB_DFF): \data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7010 (SB_DFF): \data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7011 (SB_DFF): \data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7012 (SB_DFF): \data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7013 (SB_DFF): \data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7014 (SB_DFF): \data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7015 (SB_DFF): \data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7016 (SB_DFF): \data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7017 (SB_DFF): \data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7018 (SB_DFF): \data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7019 (SB_DFF): \data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7020 (SB_DFF): \data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7021 (SB_DFF): \data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7022 (SB_DFF): \data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7023 (SB_DFF): \data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7024 (SB_DFF): \data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7025 (SB_DFF): \data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7026 (SB_DFF): \data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7027 (SB_DFF): \data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7028 (SB_DFF): \data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7029 (SB_DFF): \data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7030 (SB_DFF): \data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7031 (SB_DFF): \data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7032 (SB_DFF): \data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7033 (SB_DFF): \data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7034 (SB_DFF): \data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7035 (SB_DFF): \data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7036 (SB_DFF): \data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7037 (SB_DFF): \data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7038 (SB_DFF): \data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7039 (SB_DFF): \data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7040 (SB_DFF): \data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7041 (SB_DFF): \data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7042 (SB_DFF): \data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7043 (SB_DFF): \data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7044 (SB_DFF): \data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7045 (SB_DFF): \data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7046 (SB_DFF): \data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7047 (SB_DFF): \data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7048 (SB_DFF): \data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7049 (SB_DFF): \data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7050 (SB_DFF): \data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7051 (SB_DFF): \data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7052 (SB_DFF): \data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7053 (SB_DFF): \data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7054 (SB_DFF): \data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7055 (SB_DFF): \data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7056 (SB_DFF): \data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7057 (SB_DFF): \data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7058 (SB_DFF): \data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7059 (SB_DFF): \data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7060 (SB_DFF): \data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7061 (SB_DFF): \data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7062 (SB_DFF): \data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7063 (SB_DFF): \data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7064 (SB_DFF): \data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7065 (SB_DFF): \data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7066 (SB_DFF): \data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7067 (SB_DFF): \data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7068 (SB_DFF): \data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7069 (SB_DFF): \data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7070 (SB_DFF): \data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7071 (SB_DFF): \data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7072 (SB_DFF): \data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7073 (SB_DFF): \data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7074 (SB_DFF): \data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7075 (SB_DFF): \data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7076 (SB_DFF): \data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7077 (SB_DFF): \data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7078 (SB_DFF): \data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7079 (SB_DFF): \data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7080 (SB_DFF): \data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7081 (SB_DFF): \data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7082 (SB_DFF): \data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7083 (SB_DFF): \data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7084 (SB_DFF): \data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$7085 (SB_DFF): \data_out [115] = 0
Handling FF init values in mux2to1.
Handling FF init values in program_counter.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5858 (SB_DFF): \outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5827 (SB_DFF): \outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5828 (SB_DFF): \outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5829 (SB_DFF): \outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5830 (SB_DFF): \outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5831 (SB_DFF): \outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5832 (SB_DFF): \outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5833 (SB_DFF): \outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5834 (SB_DFF): \outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5835 (SB_DFF): \outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5836 (SB_DFF): \outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5837 (SB_DFF): \outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5838 (SB_DFF): \outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5839 (SB_DFF): \outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5840 (SB_DFF): \outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5841 (SB_DFF): \outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5842 (SB_DFF): \outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5843 (SB_DFF): \outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5844 (SB_DFF): \outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5845 (SB_DFF): \outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5846 (SB_DFF): \outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5847 (SB_DFF): \outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5848 (SB_DFF): \outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5849 (SB_DFF): \outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5850 (SB_DFF): \outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5851 (SB_DFF): \outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5852 (SB_DFF): \outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5853 (SB_DFF): \outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5854 (SB_DFF): \outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5855 (SB_DFF): \outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5856 (SB_DFF): \outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$5857 (SB_DFF): \outAddr [30] = 0
Handling FF init values in regfile.
Handling FF init values in sign_mask_gen.
Handling FF init values in top.

21.36. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in $paramod\mux2to1\WIDTH=11.
Merging set/reset $_MUX_ cells into SB_FFs in $paramod\mux2to1\WIDTH=9.
Merging set/reset $_MUX_ cells into SB_FFs in ALUControl.
Merging set/reset $_MUX_ cells into SB_FFs in ForwardingUnit.
Merging set/reset $_MUX_ cells into SB_FFs in adder_dsp.
Merging set/reset $_MUX_ cells into SB_FFs in alu.
Merging set/reset $_MUX_ cells into SB_FFs in branch_decision.
Merging set/reset $_MUX_ cells into SB_FFs in branch_predictor.
Merging set/reset $_MUX_ cells into SB_FFs in control.
Merging set/reset $_MUX_ cells into SB_FFs in cpu.
Merging set/reset $_MUX_ cells into SB_FFs in data_mem.
Merging set/reset $_MUX_ cells into SB_FFs in dsp_adder.
Merging set/reset $_MUX_ cells into SB_FFs in ex_mem.
Merging set/reset $_MUX_ cells into SB_FFs in full_adder.
Merging set/reset $_MUX_ cells into SB_FFs in id_ex.
Merging set/reset $_MUX_ cells into SB_FFs in if_id.
Merging set/reset $_MUX_ cells into SB_FFs in imm_gen.
Merging set/reset $_MUX_ cells into SB_FFs in instruction_memory.
Merging set/reset $_MUX_ cells into SB_FFs in mem_wb.
Merging set/reset $_MUX_ cells into SB_FFs in mux2to1.
Merging set/reset $_MUX_ cells into SB_FFs in program_counter.
Merging set/reset $_MUX_ cells into SB_FFs in regfile.
Merging set/reset $_MUX_ cells into SB_FFs in sign_mask_gen.
Merging set/reset $_MUX_ cells into SB_FFs in top.

21.37. Executing ICE40_OPT pass (performing simple optimizations).

21.37.1. Running ICE40 specific optimizations.

21.37.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
<suppressed ~11 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~4 debug messages>
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
<suppressed ~8 debug messages>
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~31 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.
<suppressed ~1 debug messages>

21.37.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
<suppressed ~240 debug messages>
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 80 cells.

21.37.4. Executing OPT_RMDFF pass (remove dff with constant values).

21.37.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2614 unused wires.
<suppressed ~8 debug messages>

21.37.6. Rerunning OPT passes. (Removed registers in this run.)

21.37.7. Running ICE40 specific optimizations.

21.37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2to1\WIDTH=11.
Optimizing module $paramod\mux2to1\WIDTH=9.
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder_dsp.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module data_mem.
Optimizing module dsp_adder.
Optimizing module ex_mem.
Optimizing module full_adder.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

21.37.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\mux2to1\WIDTH=11'.
Finding identical cells in module `$paramod\mux2to1\WIDTH=9'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder_dsp'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dsp_adder'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\full_adder'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.37.10. Executing OPT_RMDFF pass (remove dff with constant values).

21.37.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=11..
Finding unused cells or wires in module $paramod\mux2to1\WIDTH=9..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder_dsp..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dsp_adder..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \full_adder..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

21.37.12. Finished OPT passes. (There is nothing left to do.)

21.38. Executing TECHMAP pass (map to technology primitives).

21.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

21.38.2. Continuing TECHMAP pass.
No more expansions possible.

21.39. Executing ABC pass (technology mapping using ABC).

21.39.1. Extracting gate netlist of module `$paramod\mux2to1\WIDTH=11' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 34 wires to a netlist network with 23 inputs and 11 outputs.

21.39.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =      11. (  91.67 % of nodes)
ABC: Participating nodes from the second network  =      11. (  91.67 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  91.67 % of names can be moved)
ABC: Node pairs (same polarity)                   =      11. (  91.67 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       11
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       11
Removing temp directory.

21.39.2. Extracting gate netlist of module `$paramod\mux2to1\WIDTH=9' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 28 wires to a netlist network with 19 inputs and 9 outputs.

21.39.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      10.
ABC: Participating nodes from both networks       =      18.
ABC: Participating nodes from the first network   =       9. (  90.00 % of nodes)
ABC: Participating nodes from the second network  =       9. (  90.00 % of nodes)
ABC: Node pairs (any polarity)                    =       9. (  90.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       9. (  90.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        9
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        9
Removing temp directory.

21.39.3. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 179 wires to a netlist network with 11 inputs and 7 outputs.

21.39.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      15.
ABC: Participating nodes from both networks       =      42.
ABC: Participating nodes from the first network   =      14. (  41.18 % of nodes)
ABC: Participating nodes from the second network  =      28. (  82.35 % of nodes)
ABC: Node pairs (any polarity)                    =      14. (  41.18 % of names can be moved)
ABC: Node pairs (same polarity)                   =       9. (  26.47 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.3.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       33
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

21.39.4. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 67 gates and 89 wires to a netlist network with 22 inputs and 4 outputs.

21.39.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =      11. (  45.83 % of nodes)
ABC: Participating nodes from the second network  =      11. (  45.83 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  45.83 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  16.67 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       23
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        4
Removing temp directory.

21.39.5. Extracting gate netlist of module `\adder_dsp' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.6. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1311 gates and 1415 wires to a netlist network with 103 inputs and 66 outputs.

21.39.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     261.
ABC: Participating nodes from both networks       =     523.
ABC: Participating nodes from the first network   =     260. (  50.39 % of nodes)
ABC: Participating nodes from the second network  =     263. (  50.97 % of nodes)
ABC: Node pairs (any polarity)                    =     260. (  50.39 % of names can be moved)
ABC: Node pairs (same polarity)                   =      93. (  18.02 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.6.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      515
ABC RESULTS:        internal signals:     1246
ABC RESULTS:           input signals:      103
ABC RESULTS:          output signals:       66
Removing temp directory.

21.39.7. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

21.39.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       7.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       4. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.7.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

21.39.8. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 15 wires to a netlist network with 4 inputs and 3 outputs.

21.39.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.8.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

21.39.9. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 35 gates and 42 wires to a netlist network with 7 inputs and 11 outputs.

21.39.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =      11. (  84.62 % of nodes)
ABC: Participating nodes from the second network  =      11. (  84.62 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  84.62 % of names can be moved)
ABC: Node pairs (same polarity)                   =      11. (  84.62 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.9.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       12
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       11
Removing temp directory.

21.39.10. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

21.39.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       3.
ABC: Participating nodes from both networks       =       4.
ABC: Participating nodes from the first network   =       2. (  66.67 % of nodes)
ABC: Participating nodes from the second network  =       2. (  66.67 % of nodes)
ABC: Node pairs (any polarity)                    =       2. (  66.67 % of names can be moved)
ABC: Node pairs (same polarity)                   =       2. (  66.67 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.10.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

21.39.11. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 608 gates and 746 wires to a netlist network with 137 inputs and 104 outputs.

21.39.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      91.
ABC: Participating nodes from both networks       =     303.
ABC: Participating nodes from the first network   =     120. (  50.42 % of nodes)
ABC: Participating nodes from the second network  =     183. (  76.89 % of nodes)
ABC: Node pairs (any polarity)                    =     120. (  50.42 % of names can be moved)
ABC: Node pairs (same polarity)                   =     101. (  42.44 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.11.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      207
ABC RESULTS:        internal signals:      505
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:      104
Removing temp directory.

21.39.12. Extracting gate netlist of module `\dsp_adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.13. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.14. Extracting gate netlist of module `\full_adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.15. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.16. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.17. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 260 wires to a netlist network with 29 inputs and 31 outputs.

21.39.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      48.
ABC: Participating nodes from both networks       =      95.
ABC: Participating nodes from the first network   =      47. (  88.68 % of nodes)
ABC: Participating nodes from the second network  =      48. (  90.57 % of nodes)
ABC: Node pairs (any polarity)                    =      47. (  88.68 % of names can be moved)
ABC: Node pairs (same polarity)                   =      46. (  86.79 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.17.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       52
ABC RESULTS:        internal signals:      200
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

21.39.18. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 278 gates and 288 wires to a netlist network with 8 inputs and 29 outputs.

21.39.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      70.
ABC: Participating nodes from both networks       =     145.
ABC: Participating nodes from the first network   =      69. (  51.49 % of nodes)
ABC: Participating nodes from the second network  =      76. (  56.72 % of nodes)
ABC: Node pairs (any polarity)                    =      69. (  51.49 % of names can be moved)
ABC: Node pairs (same polarity)                   =      47. (  35.07 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.18.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      133
ABC RESULTS:        internal signals:      251
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:       29
Removing temp directory.

21.39.19. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.20. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

21.39.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.20.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

21.39.21. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.39.22. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 216 wires to a netlist network with 118 inputs and 66 outputs.

21.39.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      69.
ABC: Participating nodes from both networks       =     138.
ABC: Participating nodes from the first network   =      69. (  84.15 % of nodes)
ABC: Participating nodes from the second network  =      69. (  84.15 % of nodes)
ABC: Node pairs (any polarity)                    =      69. (  84.15 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  81.71 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.22.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

21.39.23. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 9 wires to a netlist network with 3 inputs and 4 outputs.

21.39.23.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       5.
ABC: Participating nodes from both networks       =       9.
ABC: Participating nodes from the first network   =       4. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =       5. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       4. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  80.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.23.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        4
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

21.39.24. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

21.39.24.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       2.
ABC: Participating nodes from both networks       =       2.
ABC: Participating nodes from the first network   =       1. (  50.00 % of nodes)
ABC: Participating nodes from the second network  =       1. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =       1. (  50.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       1. (  50.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

21.39.24.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

21.40. Executing ICE40_WRAPCARRY pass (wrap carries).

21.41. Executing TECHMAP pass (map to technology primitives).

21.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

21.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 2 unused cells and 1461 unused wires.

21.42. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       11
  3-LUT               11

Eliminating LUTs.
Number of LUTs:       11
  3-LUT               11

Combining LUTs.
Number of LUTs:       11
  3-LUT               11
Discovering LUTs.
Number of LUTs:        9
  3-LUT                9

Eliminating LUTs.
Number of LUTs:        9
  3-LUT                9

Combining LUTs.
Number of LUTs:        9
  3-LUT                9
Discovering LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Eliminating LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19

Combining LUTs.
Number of LUTs:       33
  2-LUT                4
  3-LUT               10
  4-LUT               19
Discovering LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17

Eliminating LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17

Combining LUTs.
Number of LUTs:       23
  3-LUT                6
  4-LUT               17
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:      515
  2-LUT               68
  3-LUT              204
  4-LUT              243

Eliminating LUTs.
Number of LUTs:      515
  2-LUT               68
  3-LUT              204
  4-LUT              243

Combining LUTs.
Number of LUTs:      515
  2-LUT               68
  3-LUT              204
  4-LUT              243
Discovering LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
Discovering LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33

Eliminating LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33

Combining LUTs.
Number of LUTs:       35
  2-LUT                2
  3-LUT               33
Discovering LUTs.
Number of LUTs:       12
  2-LUT                3
  3-LUT                4
  4-LUT                5

Eliminating LUTs.
Number of LUTs:       12
  2-LUT                3
  3-LUT                4
  4-LUT                5

Combining LUTs.
Number of LUTs:       12
  2-LUT                3
  3-LUT                4
  4-LUT                5
Discovering LUTs.
Number of LUTs:        2
  2-LUT                1
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        2
  2-LUT                1
  4-LUT                1

Combining LUTs.
Number of LUTs:        2
  2-LUT                1
  4-LUT                1
Discovering LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105

Eliminating LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105

Combining LUTs.
Number of LUTs:      207
  2-LUT               32
  3-LUT               70
  4-LUT              105
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Eliminating LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20

Combining LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
Discovering LUTs.
Number of LUTs:      133
  2-LUT               26
  3-LUT               21
  4-LUT               86

Eliminating LUTs.
Number of LUTs:      133
  2-LUT               26
  3-LUT               21
  4-LUT               86

Combining LUTs.
Number of LUTs:      133
  2-LUT               26
  3-LUT               21
  4-LUT               86
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Eliminating LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73

Combining LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
Discovering LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Eliminating LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Combining LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
Discovering LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminating LUTs.
Number of LUTs:        1
  2-LUT                1

Combining LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~6029 debug messages>

21.43. Executing TECHMAP pass (map to technology primitives).

21.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

21.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000010110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001111000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011101011101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000110110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011101110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101110101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001111010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101101100111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010000111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001100001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101001100101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101111010110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001110011101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
No more expansions possible.
<suppressed ~3707 debug messages>
Removed 0 unused cells and 2370 unused wires.

21.44. Executing AUTONAME pass.
Renamed 11 objects in module $paramod\mux2to1\WIDTH=11 (2 iterations).
Renamed 9 objects in module $paramod\mux2to1\WIDTH=9 (2 iterations).
Renamed 210 objects in module ALUControl (16 iterations).
Renamed 96 objects in module ForwardingUnit (6 iterations).
Renamed 3485 objects in module alu (23 iterations).
Renamed 3 objects in module branch_decision (2 iterations).
Renamed 172 objects in module branch_predictor (5 iterations).
Renamed 15 objects in module control (4 iterations).
Renamed 4 objects in module cpu (2 iterations).
Renamed 1376 objects in module data_mem (22 iterations).
Renamed 155 objects in module ex_mem (2 iterations).
Renamed 156 objects in module full_adder (5 iterations).
Renamed 178 objects in module id_ex (2 iterations).
Renamed 64 objects in module if_id (2 iterations).
Renamed 169 objects in module imm_gen (12 iterations).
Renamed 609 objects in module instruction_memory (12 iterations).
Renamed 117 objects in module mem_wb (2 iterations).
Renamed 32 objects in module mux2to1 (2 iterations).
Renamed 32 objects in module program_counter (2 iterations).
Renamed 262 objects in module regfile (14 iterations).
Renamed 4 objects in module sign_mask_gen (2 iterations).
Renamed 1 objects in module top (2 iterations).
<suppressed ~2753 debug messages>

21.45. Executing HIERARCHY pass (managing design hierarchy).

21.45.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \program_counter
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \mux2to1
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

21.45.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \program_counter
Used module:         \dsp_adder
Used module:             \adder_dsp
Used module:         \mux2to1
Used module:         \ALUControl
Used module:         \alu
Used module:             \full_adder
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         $paramod\mux2to1\WIDTH=11
Used module:         \control
Used module:         $paramod\mux2to1\WIDTH=9
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

21.46. Printing statistics.

=== $paramod\mux2to1\WIDTH=11 ===

   Number of wires:                  4
   Number of wire bits:             34
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     SB_LUT4                        11

=== $paramod\mux2to1\WIDTH=9 ===

   Number of wires:                  4
   Number of wire bits:             28
   Number of public wires:           4
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     SB_LUT4                         9

=== ALUControl ===

   Number of wires:                 29
   Number of wire bits:             44
   Number of public wires:          29
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     SB_LUT4                        33

=== ForwardingUnit ===

   Number of wires:                 29
   Number of wire bits:             45
   Number of public wires:          29
   Number of public wire bits:      45
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     SB_LUT4                        23

=== adder_dsp ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== alu ===

   Number of wires:                458
   Number of wire bits:            650
   Number of public wires:         458
   Number of public wire bits:     650
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                516
     SB_LUT4                       515
     full_adder                      1

=== branch_decision ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     SB_LUT4                         3

=== branch_predictor ===

   Number of wires:                 12
   Number of wire bits:            138
   Number of public wires:          12
   Number of public wire bits:     138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     SB_CARRY                       31
     SB_DFFE                         2
     SB_DFFN                         1
     SB_LUT4                        35

=== control ===

   Number of wires:                 13
   Number of wire bits:             19
   Number of public wires:          13
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     SB_LUT4                        12

=== cpu ===

   Number of wires:                 71
   Number of wire bits:           1640
   Number of public wires:          71
   Number of public wire bits:    1640
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $paramod\mux2to1\WIDTH=11       1
     $paramod\mux2to1\WIDTH=9        1
     ALUControl                      1
     ForwardingUnit                  1
     SB_LUT4                         2
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     dsp_adder                       2
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        18
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== data_mem ===

   Number of wires:                177
   Number of wire bits:            784
   Number of public wires:         177
   Number of public wire bits:     784
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                332
     SB_DFFE                       121
     SB_LUT4                       207
     SB_RAM40_4K                     4

=== dsp_adder ===

   Number of wires:                  4
   Number of wire bits:            128
   Number of public wires:           4
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     adder_dsp                       1

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     SB_DFF                        155

=== full_adder ===

   Number of wires:                  5
   Number of wire bits:            129
   Number of public wires:           5
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     SB_CARRY                       31
     SB_LUT4                        32

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_DFF                        178

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_DFF                         64

=== imm_gen ===

   Number of wires:                 23
   Number of wire bits:             85
   Number of public wires:          23
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     SB_LUT4                        52

=== instruction_memory ===

   Number of wires:                284
   Number of wire bits:           5864
   Number of public wires:         284
   Number of public wire bits:    5864
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     SB_LUT4                       133

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     SB_DFF                        117

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== program_counter ===

   Number of wires:                  3
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_DFF                         32

=== regfile ===

   Number of wires:                 32
   Number of wire bits:            273
   Number of public wires:          32
   Number of public wire bits:     273
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     SB_DFF                         48
     SB_LUT4                        81
     SB_RAM40_4K                     4

=== sign_mask_gen ===

   Number of wires:                  2
   Number of wire bits:              7
   Number of public wires:           2
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== top ===

   Number of wires:                 16
   Number of wire bits:            181
   Number of public wires:          16
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     SB_HFOSC                        1
     SB_LUT4                         1
     SB_PLL40_CORE                   1
     cpu                             1
     data_mem                        1
     instruction_memory              1

=== design hierarchy ===

   top                               1
     cpu                             1
       $paramod\mux2to1\WIDTH=11      1
       $paramod\mux2to1\WIDTH=9      1
       ALUControl                    1
       ForwardingUnit                1
       alu                           1
         full_adder                  1
       branch_decision               1
       branch_predictor              1
       control                       1
       dsp_adder                     2
         adder_dsp                   1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      18
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1

   Number of wires:               1269
   Number of wire bits:          13221
   Number of public wires:        1269
   Number of public wire bits:   13221
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2521
     SB_CARRY                       62
     SB_DFF                        594
     SB_DFFE                       123
     SB_DFFN                         1
     SB_HFOSC                        1
     SB_LUT4                      1729
     SB_MAC16                        2
     SB_PLL40_CORE                   1
     SB_RAM40_4K                     8

21.47. Executing CHECK pass (checking for obvious problems).
checking module $paramod\mux2to1\WIDTH=11..
checking module $paramod\mux2to1\WIDTH=9..
checking module ALUControl..
Warning: Wire ALUControl.ALUCtl has an unprocessed 'init' attribute.
checking module ForwardingUnit..
checking module adder_dsp..
checking module alu..
checking module branch_decision..
checking module branch_predictor..
checking module control..
checking module cpu..
checking module data_mem..
checking module dsp_adder..
checking module ex_mem..
checking module full_adder..
checking module id_ex..
checking module if_id..
checking module imm_gen..
Warning: Wire imm_gen.imm has an unprocessed 'init' attribute.
checking module instruction_memory..
checking module mem_wb..
checking module mux2to1..
checking module program_counter..
checking module regfile..
checking module sign_mask_gen..
checking module top..
found and reported 2 problems.

21.48. Executing BLIF backend.

22. Executing JSON backend.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 3fa6d97304, CPU: user 2.01s system 0.11s, MEM: 72.77 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 18% 25x opt_expr (0 sec), 16% 23x opt_clean (0 sec), ...
